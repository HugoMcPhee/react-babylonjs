{"version":3,"file":"react-babylonjs.js","sources":["../src/PropsHandler.ts","../src/extensions/DynamicTerrain.ts","../src/generatedCode.ts","../src/Engine.tsx","../src/model/Model.ts","../src/UpdateInstance.ts","../src/customHosts/hostWithEventsFiber.ts","../src/customHosts/index.ts","../src/customComponents/AdvancedDynamicTextureLifecycleListener.ts","../src/customComponents/CameraLifecycleListener.ts","../src/customComponents/EnvironmentHelperLifecycleListener.ts","../src/customComponents/GUI2DControlLifecycleListener.ts","../src/customComponents/GUI3DControlLifecycleListener.ts","../src/customComponents/GUI3DManagerLifecycleListener.ts","../src/customComponents/MaterialsLifecycleListener.ts","../src/model/ModelProps.ts","../src/BasePropsHandler.ts","../src/customComponents/ModelLifecycleListener.ts","../src/customComponents/DeferredCreationLifecycleListener.ts","../src/customComponents/PhysicsImpostorLifecycleListener.ts","../src/customComponents/ShadowGeneratorLifecycleListener.ts","../src/customComponents/Skybox.tsx","../src/customComponents/TargetPropsHandler.ts","../src/helper/property.ts","../src/customComponents/TexturesLifecycleListener.ts","../src/customComponents/VRExperienceHelperLifecycleListener.ts","../src/customComponents/NodeLifecycleListener.ts","../src/customComponents/BehaviorsLifecycleListener.ts","../src/codeGenerationDescriptors.ts","../src/ReactBabylonJSHostConfig.ts","../src/Scene.tsx","../src/hooks.ts","../src/plugins/react-babylon-spring/customProps.ts","../src/plugins/react-babylon-spring/animated.ts","../src/plugins/react-babylon-spring/index.ts"],"sourcesContent":["import { Vector3, Color3, Color4 } from '@babylonjs/core/Maths/math'\r\nimport { Control } from '@babylonjs/gui/2D/controls/control'\r\nimport { Observable, FresnelParameters, BaseTexture, Nullable } from '@babylonjs/core'\r\n\r\n// TODO: type/value need to be joined, as the method will have multiple.\r\nexport interface PropertyUpdate {\r\n  type: string\r\n  value: any\r\n  propertyName: string,\r\n  changeType: PropChangeType,\r\n  /**\r\n   * When provided will dynamically target a property of 'babylonJSobject'.\r\n   */\r\n  target?: string\r\n}\r\n\r\nexport type UpdatePayload = PropertyUpdate[] | null\r\n\r\nexport interface PropsHandler<U> {\r\n  getPropertyUpdates(oldProps: U, newProps: U): UpdatePayload\r\n}\r\n\r\nexport interface HasPropsHandlers<U> {\r\n  getPropsHandlers(): PropsHandler<U>[]\r\n  addPropsHandler(propHandler: PropsHandler<U>): void\r\n}\r\n\r\n// internal\r\ntype HandlerUpdateProcessResult<T> = {\r\n  accepted: boolean\r\n} & PropertyUpdateProcessResult<T>;\r\n\r\nexport type PropertyUpdateProcessResult<T> = {\r\n  processed: boolean,\r\n  value: Nullable<T>\r\n}\r\n\r\n/**\r\n * NOTE: the applyAnimatedValues from react-spring always has `oldProp` undefined, so we force set anything provided.\r\n * Would be more efficient to only handle the props passed in.\r\n */\r\nexport interface ICustomPropsHandler<T, U> {\r\n  /**\r\n   * Friendly name to identify the handler.\r\n   */\r\n  readonly name: string;\r\n\r\n  /**\r\n   * The type of prop (ie: Vector3, Color3) to register for\r\n   */\r\n  readonly propChangeType: string;\r\n\r\n  /**\r\n   * Can be used to influence the ordering the handler fires compared to other custom handlers.\r\n   * @todo not implemented (future enhancement)\r\n   */\r\n  readonly order?: number;\r\n\r\n  /**\r\n   * Like a visitor, except if 'true' is returned the call chain is broken.\r\n   * So, if you want to override a 'Vector3' with a string and the type is string\r\n   * then the regular handler will be bypassed.\r\n   * @param propChangeType\r\n   */\r\n  accept(newProp: T): boolean\r\n\r\n  // Check old vs new and return proper value, if any.\r\n  process(oldProp: T | undefined, newProp: T): PropertyUpdateProcessResult<U>\r\n\r\n}\r\n\r\nexport class CustomPropsHandler {\r\n\r\n  private static _registeredPropsHandlers: Record<string, ICustomPropsHandler<any, any>[]> = {};\r\n\r\n  /**\r\n   * Register a new props handler\r\n   *\r\n   * @param handler to register for props (a handler can only be registered once per )\r\n   * @returns a reference that can be used to unregister.\r\n   */\r\n  public static RegisterPropsHandler(propsHandler: ICustomPropsHandler<any, any>): ICustomPropsHandler<any, any> {\r\n    const propsChangeType: string = propsHandler.propChangeType;\r\n\r\n    if (!Array.isArray(CustomPropsHandler._registeredPropsHandlers[propsChangeType])) {\r\n      CustomPropsHandler._registeredPropsHandlers[propsChangeType] = [];\r\n    }\r\n\r\n    const registeredHandlers: ICustomPropsHandler<any, any>[] = CustomPropsHandler._registeredPropsHandlers[propsChangeType];\r\n\r\n    const match = registeredHandlers.find(h => h === propsHandler);\r\n    if (match !== undefined) {\r\n      console.warn(`Handler can only be registered once per type [${propsChangeType}]`);\r\n      return match;\r\n    }\r\n\r\n    registeredHandlers.push(propsHandler);\r\n    return propsHandler;\r\n  }\r\n\r\n  /**\r\n   * Unregister a props handler that was previously registered.\r\n   *\r\n   * @param propsHandler\r\n   *\r\n   * @returns if the props handler was found and unregistered\r\n   */\r\n  public static UnregisterPropsHandler(propsHandlerToUnregister: ICustomPropsHandler<any, any>): boolean {\r\n    const propsChangeType: string = propsHandlerToUnregister.propChangeType;\r\n\r\n    if (!Array.isArray(CustomPropsHandler._registeredPropsHandlers[propsChangeType])) {\r\n      console.warn(`cannot find ${propsHandlerToUnregister.name} to unregister.`)\r\n      return false;\r\n    }\r\n\r\n    const registeredHandlers: ICustomPropsHandler<any, any>[] = CustomPropsHandler._registeredPropsHandlers[propsChangeType];\r\n\r\n    const index: number = registeredHandlers.indexOf(propsHandlerToUnregister);\r\n\r\n    if (index === -1) {\r\n      console.warn(`cannot find ${propsHandlerToUnregister.name} to unregister.`)\r\n      return false;\r\n    }\r\n\r\n    CustomPropsHandler._registeredPropsHandlers[propsChangeType] = registeredHandlers.slice(index, 1);\r\n    return true;\r\n  }\r\n\r\n  private static NOT_ACCEPTED: Readonly<HandlerUpdateProcessResult<any>> = Object.freeze({\r\n    accepted: false,\r\n    processed: false,\r\n    value: null\r\n  });\r\n\r\n  private static ACCEPTED_NOT_PROCSSED: Readonly<HandlerUpdateProcessResult<any>> = Object.freeze({\r\n    accepted: true,\r\n    processed: false,\r\n    value: null\r\n  });\r\n\r\n  public static HandlePropsChange(propsChangeType: PropChangeType, oldProp: any, newProp: any): Readonly<HandlerUpdateProcessResult<any>> {\r\n    const registeredHandlers: ICustomPropsHandler<any, any>[] = CustomPropsHandler._registeredPropsHandlers[propsChangeType];\r\n    if (registeredHandlers === undefined) {\r\n      return CustomPropsHandler.NOT_ACCEPTED;\r\n    }\r\n\r\n    let accepted = false;\r\n    for (const handler of registeredHandlers) {\r\n      if (handler.accept(newProp)) {\r\n        accepted = true;\r\n        const propertyUpdatedProcessResult: PropertyUpdateProcessResult<any> = handler.process(oldProp, newProp);\r\n        // console.log(`handler '${handler.name}'custom prop processing result:`, oldProp, newProp, propertyUpdatedProcessResult);\r\n        // give other custom handlers (if any) the opportunity to handle\r\n        if (propertyUpdatedProcessResult.processed) {\r\n          return {\r\n            accepted: true,\r\n            processed: true,\r\n            value: propertyUpdatedProcessResult.value\r\n          };\r\n        }\r\n      }\r\n    }\r\n\r\n    return accepted\r\n      ? CustomPropsHandler.ACCEPTED_NOT_PROCSSED\r\n      : CustomPropsHandler.NOT_ACCEPTED;\r\n  }\r\n}\r\n\r\nexport enum PropChangeType {\r\n  Primitive = \"Primitive\",\r\n  Vector3 = \"Vector3\",\r\n  Color3 = \"Color3\",\r\n  Color4 = \"Color4\",\r\n  Control = \"Control\",\r\n  NumericArray = \"NumericArray\",\r\n  Observable = \"Observable\",\r\n  Method = \"Method\",\r\n  LambdaExpression = \"LambdaExpression\",\r\n  FresnelParameters = \"FresnelParameters\",\r\n  Texture = \"Texture\"\r\n}\r\n\r\n/**\r\n * Encapsulates common error handling and handling of registered custom prop handlers.\r\n */\r\nfunction propertyCheck<T> (\r\n  oldProp: T | undefined,\r\n  newProp: T | undefined,\r\n  propertyName: string,\r\n  propertyType: string,\r\n  propChangeType: PropChangeType,\r\n  changedProps: PropertyUpdate[],\r\n  templateMethod: (oldProp: T | undefined, newProp: T | undefined, changedProps: PropertyUpdate[]) => void ): void\r\n{\r\n  try {\r\n    const processedResult = CustomPropsHandler.HandlePropsChange(propChangeType, oldProp, newProp);\r\n    if (processedResult.accepted) {\r\n      if (processedResult.processed) {\r\n        // console.log(`handled ${propChangeType} on ${propertyName} by custom handler - new Value: ${JSON.stringify(processedResult.value ?? {})}`);\r\n        changedProps.push({\r\n          propertyName,\r\n          type: propertyType,\r\n          changeType: propChangeType,\r\n          value: processedResult.value!\r\n        })\r\n      }\r\n\r\n      // we assume any custom handler that 'accepts' a property does not want to pass\r\n      // down to built-in handler.  ie: [] -> Vector3 would fail.\r\n      return;\r\n    }\r\n\r\n    templateMethod(oldProp, newProp, changedProps);\r\n  } catch (e) {\r\n    console.error(`Unable to update '${propertyName}' with ${propChangeType}:`, newProp);\r\n    console.error(e);\r\n  }\r\n}\r\n\r\nexport const checkVector3Diff = (oldProp: Vector3 | undefined, newProp: Vector3 | undefined, propertyName: string, propertyType: string, changedProps: PropertyUpdate[]): void => {\r\n  propertyCheck<Vector3>(oldProp, newProp, propertyName, propertyType, PropChangeType.Vector3, changedProps, (oldProp, newProp, changedProps) => {\r\n    if (newProp && (!oldProp || !newProp.equals(oldProp))) {\r\n      changedProps.push({\r\n        propertyName,\r\n        type: propertyType,\r\n        changeType: PropChangeType.Vector3,\r\n        value: newProp\r\n      })\r\n    }\r\n  });\r\n}\r\n\r\nexport const checkColor3Diff = (oldProp: Color3 | undefined, newProp: Color3 | undefined, propertyName: string, propertyType: string, changedProps: PropertyUpdate[]): void => {\r\n  propertyCheck<Color3>(oldProp, newProp, propertyName, propertyType, PropChangeType.Color3, changedProps, (oldProp, newProp, changedProps) => {\r\n    if (newProp && (!oldProp || !newProp.equals(oldProp))) {\r\n      changedProps.push({\r\n        propertyName,\r\n        type: propertyType,\r\n        changeType: PropChangeType.Color3,\r\n        value: newProp\r\n      })\r\n    }\r\n  })\r\n}\r\n\r\nexport const checkColor4Diff = (oldProp: Color4 | undefined, newProp: Color4 | undefined, propertyName: string, propertyType: string, changedProps: PropertyUpdate[]): void => {\r\n  propertyCheck<Color4>(oldProp, newProp, propertyName, propertyType, PropChangeType.Color4, changedProps, (oldProp, newProp, changedProps) => {\r\n    // Color4.equals() not added until PR #5517\r\n    if (newProp && (!oldProp || oldProp.r !== newProp.r || oldProp.g !== newProp.g || oldProp.b !== newProp.b || oldProp.a !== newProp.a)) {\r\n      changedProps.push({\r\n        propertyName,\r\n        type: propertyType,\r\n        changeType: PropChangeType.Color4,\r\n        value: newProp\r\n      })\r\n    }\r\n  })\r\n}\r\n\r\nexport const checkFresnelParametersDiff = (oldProp: FresnelParameters | undefined, newProp: FresnelParameters | undefined, propertyName: string, propertyType: string, changedProps: PropertyUpdate[]): void => {\r\n  propertyCheck<FresnelParameters>(oldProp, newProp, propertyName, propertyType, PropChangeType.FresnelParameters, changedProps, (oldProp, newProp, changedProps) => {\r\n    // FresnelParameters.equals() not added until PR #7818 (https://github.com/BabylonJS/Babylon.js/pull/7818)\r\n    if (newProp /* won't clear the property value */ && (\r\n        !oldProp ||\r\n        oldProp.bias !== newProp.bias ||\r\n        oldProp.power !== newProp.power ||\r\n        (!oldProp.leftColor || !oldProp.leftColor.equals(newProp.leftColor)) ||\r\n        (!oldProp.rightColor || !oldProp.rightColor.equals(newProp.rightColor)) ||\r\n        oldProp.isEnabled !== newProp.isEnabled\r\n        )\r\n    )\r\n    {\r\n      changedProps.push({\r\n        propertyName,\r\n        type: propertyType,\r\n        changeType: PropChangeType.FresnelParameters,\r\n        value: newProp\r\n      })\r\n    }\r\n  })\r\n}\r\n\r\nexport const checkLambdaDiff = (oldProp: any | undefined, newProp: any | undefined, propertyName: string, propertyType: string, changedProps: PropertyUpdate[]): void => {\r\n  propertyCheck<any>(oldProp, newProp, propertyName, propertyType, PropChangeType.LambdaExpression, changedProps, (oldProp, newProp, changedProps) => {\r\n    if (newProp !== oldProp) {\r\n      changedProps.push({\r\n        propertyName,\r\n        type: propertyType,\r\n        changeType: PropChangeType.LambdaExpression,\r\n        value: newProp\r\n      })\r\n    }\r\n  })\r\n}\r\n\r\nexport const checkControlDiff = (oldProp: Control | undefined, newProp: Control | undefined, propertyName: string, propertyType: string, changedProps: PropertyUpdate[]): void => {\r\n  propertyCheck<Control>(oldProp, newProp, propertyName, propertyType, PropChangeType.Control, changedProps, (oldProp, newProp, changedProps) => {\r\n    // only sets once\r\n    if (newProp && !oldProp) {\r\n      changedProps.push({\r\n        propertyName,\r\n        type: propertyType,\r\n        changeType: PropChangeType.Control,\r\n        value: newProp\r\n      })\r\n    }\r\n  })\r\n}\r\n\r\nexport type PrimitiveType = string | number | undefined | null | boolean;\r\n\r\nexport const checkPrimitiveDiff = (oldProp: PrimitiveType | undefined, newProp: PrimitiveType | undefined, propertyName: string, propertyType: string, changedProps: PropertyUpdate[]): void => {\r\n  propertyCheck<PrimitiveType>(oldProp, newProp, propertyName, propertyType, PropChangeType.Primitive, changedProps, (oldProp, newProp, changedProps) => {\r\n    if (newProp !== oldProp) {\r\n      changedProps.push({\r\n        propertyName,\r\n        type: propertyType,\r\n        changeType: PropChangeType.Primitive,\r\n        value: newProp\r\n      })\r\n    }\r\n  })\r\n}\r\n\r\nexport const checkTextureDiff = (oldProp: BaseTexture | undefined, newProp: BaseTexture | undefined, propertyName: string, propertyType: string, changedProps: PropertyUpdate[]): void => {\r\n  propertyCheck<BaseTexture>(oldProp, newProp, propertyName, propertyType, PropChangeType.Texture, changedProps, (oldProp, newProp, changedProps) => {\r\n    if (newProp !== oldProp) {\r\n      console.log('pushing texture:', propertyName, propertyType)\r\n      changedProps.push({\r\n        propertyName,\r\n        type: propertyType,\r\n        changeType: PropChangeType.Texture,\r\n        value: newProp\r\n      })\r\n    }\r\n  })\r\n}\r\n\r\nexport const checkNumericArrayDiff = (oldProp: number[] | undefined, newProp: number[] | undefined, propertyName: string, propertyType: string, changedProps: PropertyUpdate[]): void => {\r\n  propertyCheck<number[]>(oldProp, newProp, propertyName, propertyType, PropChangeType.NumericArray, changedProps, (oldProp, newProp, changedProps) => {\r\n    // just length - missing loop + indexOf comparison (or deepEquals())\r\n    if (newProp && (!oldProp || oldProp.length !== newProp.length)) {\r\n      changedProps.push({\r\n        propertyName,\r\n        type: propertyType,\r\n        changeType: PropChangeType.NumericArray,\r\n        value: newProp\r\n      })\r\n    }\r\n  })\r\n}\r\n\r\nexport const checkObservableDiff = (oldProp: Observable<any> | undefined, newProp: Observable<any> | undefined, propertyName: string, propertyType: string, changedProps: PropertyUpdate[]): void => {\r\n  propertyCheck<Observable<any>>(oldProp, newProp, propertyName, propertyType, PropChangeType.Observable, changedProps, (oldProp, newProp, changedProps) => {\r\n    // if it starts with 'on' then we have different handling.\r\n    if (oldProp === undefined && oldProp !== newProp) {\r\n      changedProps.push({\r\n        propertyName,\r\n        type: propertyType,\r\n        changeType: PropChangeType.Observable,\r\n        value: newProp\r\n      })\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * This method differs from the rest in that we need to pass in a list of arguments.  Can be done by using:\r\n * 1. an array to signify each parameter (or Object.values(...)).\r\n *\r\n * @param oldProp value of method (array, object, primitive, etc.)\r\n * @param newProp value of method (array, object, primitive, etc.)\r\n * @param propertyName name of property for diff\r\n * @param propertyType signature of method (as string)\r\n * @param changedProps list to append to when a diff is found\r\n */\r\nexport const checkMethodDiff = (oldProp: any, newProp: any, propertyName: string, propertyType: string, changedProps: PropertyUpdate[]): void => {\r\n  if (oldProp !== newProp) {\r\n    changedProps.push({\r\n      propertyName,\r\n      type: propertyType,\r\n      changeType: PropChangeType.Method,\r\n      value: newProp\r\n    })\r\n  }\r\n}\r\n","import { Vector3, Vector2, Color3, Color4 } from '@babylonjs/core/Maths/math'\r\nimport { Scene } from '@babylonjs/core/scene'\r\nimport { Mesh, VertexBuffer, VertexData, MeshBuilder, } from '@babylonjs/core/Meshes'\r\nimport { Camera } from '@babylonjs/core/Cameras'\r\nimport { SolidParticleSystem } from '@babylonjs/core/Particles'\r\nimport { Tools } from '@babylonjs/core/Misc/tools'\r\nimport { IndicesArray, Nullable } from \"@babylonjs/core\"\r\n\r\n// module Extensions {\r\n\r\n  export class DynamicTerrain {\r\n    public name: string\r\n\r\n    private _terrainSub: number // terrain number of subdivisions per axis\r\n    private _mapData: number[] | Float32Array // data of the map\r\n    private _terrainIdx: number // actual terrain vertex number per axis\r\n    private _mapSubX: number // map number of subdivisions on X axis\r\n    private _mapSubZ: number // map number of subdivisions on Z axis\r\n    private _mapUVs: number[] | Float32Array // UV data of SPmapDatahe map\r\n    private _mapColors: number[] | Float32Array // Color data of the map\r\n    private _mapNormals: number[] | Float32Array // Normal data of the map\r\n    private _SPmapData: number[][] | Float32Array[] // Solid particle data (position, rotation, scaling) of the object map : array of arrays, one per particle type\r\n    private _SPcolorData: number[][] | Float32Array[] // Solid particle color data : array of arrays, one per particle type\r\n    private _SPuvData: number[][] | Float32Array[] // Solid particle uv data : array of arrays, one per particle type\r\n    private _sps: SolidParticleSystem // SPS used to manage the particles\r\n    private _spsTypeStartIndexes!: number[] // type start indexes in the SPS\r\n    private _nbAvailablePerType!: number[] // per type of used particle counter\r\n    private _spsNbPerType!: number[] // number of particles available per type in the SPS\r\n    private _particleDataStride: number = 9 // data stride : position, rotation, scaling : 9 floats\r\n    private _particleColorStride: number = 4 // color stride : color4 : r, g, b, a : 4 floats\r\n    private _particleUVStride: number = 4 // uv stride : vector4 : x, y, z, w : 4 floats\r\n    private _scene: Scene // current scene\r\n    private _subToleranceX: number = 1 | 0 // hoSPcw many cells flought over thy the camera on the terrain x axis before update\r\n    private _subToleranceZ: number = 1 | 0 // hoSPcw many cells flought over thy the camera on the terrain z axis before update\r\n    private _LODLimits: number[] = [] // arSPcray of LOD limits\r\n    private _initialLOD: number = 1 | 0 // inSPcitial LOD value (integer > 0)\r\n    private _LODValue: number = 1 | 0 // cuSPcrrent LOD value : initial + camera correction\r\n    private _cameraLODCorrection: number = 0 | 0 // LOSPcD correction (integer) according to the camera altitude\r\n    private _LODPositiveX: boolean = true // DoeSPcs LOD apply to the terrain right edge ?\r\n    private _LODNegativeX: boolean = true // DoeSPcs LOD apply to the terrain left edge ?\r\n    private _LODPositiveZ: boolean = true // DoeSPcs LOD apply to the terrain upper edge ?\r\n    private _LODNegativeZ: boolean = true // DoeSPcs LOD apply to the terrain lower edge ?\r\n    private _terrainCamera: Camera // caSPcmera linked to the terrain\r\n    private _inverted: boolean = false // is the terrain mesh inverted upside down ?\r\n    public shiftFromCamera: { x: number; z: number } = {\r\n      // terrain center shift from camera position\r\n      x: 0.0,\r\n      z: 0.0\r\n    }\r\n    private _indices: Nullable<IndicesArray>\r\n    private _positions: Float32Array | number[]\r\n    private _normals: Float32Array | number[]\r\n    private _colors: Float32Array | number[]\r\n    private _uvs: Float32Array | number[]\r\n    private _deltaSubX: number = 0 | 0 // map x subdivision delta : variation in number of map subdivisions\r\n    private _deltaSubZ: number = 0 | 0 // map z subdivision delta\r\n    private _refreshEveryFrame: boolean = false // boolean : to force the terrain computation every frame\r\n    private _useCustomVertexFunction: boolean = false // boolean : to allow the call to updateVertex()\r\n    private _computeNormals: boolean = false // boolean : to skip or not the normal computation\r\n    private _datamap: boolean = false // boolean : true if an data map is passed as parameter\r\n    private _uvmap: boolean = false // boolean : true if an UV map is passed as parameter\r\n    private _colormap: boolean = false // boolean : true if an color map is passed as parameter\r\n    private _mapSPData: boolean = false // boolean : true if a SPmapData array is passed as parameter\r\n    private _colorSPData: boolean = false // boolean : true if a SPcolorData array is passed as parameter\r\n    private _uvSPData: boolean = false // boolean : true if a SPuvData array is passed as parameter\r\n    private _mapQuads!: number[][][] // map quads of types of particle index in the SPmapData array mapQuads[mapIndex][partType] = [pIndex1, pIndex2, ...] (particle indexes in SPmapData)\r\n    private static _vertex: any = {\r\n      // current vertex object passed to the user custom function\r\n      position: Vector3.Zero(), // vertex position in the terrain space (Vector3)\r\n      uvs: Vector2.Zero(), // vertex uv\r\n      color: new Color4(1.0, 1.0, 1.0, 1.0), // vertex color (Color4)\r\n      lodX: 1 | 0, // vertex LOD value on X axis\r\n      lodZ: 1 | 0, // vertex LOD value on Z axis\r\n      worldPosition: Vector3.Zero(), // vertex World position\r\n      mapIndex: 0 | 0 // current map index\r\n    }\r\n    private _averageSubSizeX: number = 0.0 // map cell average x size\r\n    private _averageSubSizeZ: number = 0.0 // map cell average z size\r\n    private _terrainSizeX: number = 0.0 // terrain x size\r\n    private _terrainSizeZ: number = 0.0 // terrain y size\r\n    private _terrainHalfSizeX: number = 0.0\r\n    private _terrainHalfSizeZ: number = 0.0\r\n    private _centerWorld: Vector3 = Vector3.Zero() // terrain world center position\r\n    private _centerLocal: Vector3 = Vector3.Zero() // terrain local center position\r\n    private _mapSizeX: number = 0.0 // map x size\r\n    private _mapSizeZ: number = 0.0 // map z size\r\n    private _terrain: Mesh // reference to the ribbon\r\n    private _isAlwaysVisible: boolean = false // is the terrain mesh always selected for rendering\r\n    private _precomputeNormalsFromMap: boolean = false // if the normals must be precomputed from the map data when assigning a new map to the existing terrain\r\n    // tmp vectors\r\n    private static _v1: Vector3 = Vector3.Zero()\r\n    private static _v2: Vector3 = Vector3.Zero()\r\n    private static _v3: Vector3 = Vector3.Zero()\r\n    private static _v4: Vector3 = Vector3.Zero()\r\n    private static _vAvB: Vector3 = Vector3.Zero()\r\n    private static _vAvC: Vector3 = Vector3.Zero()\r\n    private static _norm: Vector3 = Vector3.Zero()\r\n    private static _bbMin: Vector3 = Vector3.Zero()\r\n    private static _bbMax: Vector3 = Vector3.Zero()\r\n\r\n    /**\r\n     * constructor\r\n     * @param name\r\n     * @param options\r\n     * @param scene\r\n     * @param {*} mapData the array of the map 3D data : x, y, z successive float values\r\n     * @param {*} mapSubX the data map number of x subdivisions : integer\r\n     * @param {*} mapSubZ the data map number of z subdivisions : integer\r\n     * @param {*} terrainSub the wanted terrain number of subdivisions : integer, multiple of 2.\r\n     * @param {*} mapUVs the array of the map UV data (optional) : u,v successive values, each between 0 and 1.\r\n     * @param {*} mapColors the array of the map Color data (optional) : x, y, z successive float values.\r\n     * @param {*} mapNormals the array of the map normal data (optional) : r,g,b successive values, each between 0 and 1.\r\n     * @param {*} invertSide boolean, to invert the terrain mesh upside down. Default false.\r\n     * @param {*} camera the camera to link the terrain to. Optional, by default the scene active camera\r\n     * @param {*} SPmapData an array of arrays or Float32Arrays (one per particle type) of object data (position, rotation, scaling) on the map. Optional.\r\n     * @param {*} sps the Solid Particle System used to manage the particles. Required when used with SPmapData.\r\n     * @param {*} SPcolorData an array of arrays or Float32Arrays (one per particle type) of object colors on the map. One series of r, g, b, a floats per object. Optional, requires a SPmapData and a sps to be passed.\r\n     * @param {*} SPuvData an array of arrays or Float32Arrays (one per particle type) of object uvs on the map. One series of x, y, z, w floats per object. Optional, requires a SPmapData and a sps to be passed.\r\n     */\r\n    constructor(\r\n      name: string,\r\n      scene: Scene,\r\n      options?: {\r\n        terrainSub?: number\r\n        mapData?: number[] | Float32Array\r\n        mapSubX?: number\r\n        mapSubZ?: number\r\n        mapUVs?: number[] | Float32Array\r\n        mapColors?: number[] | Float32Array\r\n        mapNormals?: number[] | Float32Array\r\n        invertSide?: boolean\r\n        camera?: Camera\r\n        SPmapData?: number[][] | Float32Array[]\r\n        sps?: SolidParticleSystem\r\n        SPcolorData?: number[][] | Float32Array[]\r\n        SPuvData?: number[][] | Float32Array[]\r\n        intializedCallback?: any\r\n      }\r\n    ) {\r\n      this.name = name\r\n      options = options || {}\r\n      this._terrainSub = options.terrainSub || 60\r\n      this._mapData = options.mapData!\r\n      this._terrainIdx = this._terrainSub + 1\r\n      this._mapSubX = options.mapSubX || this._terrainIdx\r\n      this._mapSubZ = options.mapSubZ || this._terrainIdx\r\n      this._mapUVs = options.mapUVs! // if not defined, it will be still populated by default values\r\n      this._mapColors = options.mapColors!\r\n      this._scene = scene\r\n      this._terrainCamera = options.camera || scene.activeCamera!\r\n      this._inverted = options.invertSide!\r\n      this._SPmapData = options.SPmapData!\r\n      this._SPcolorData = options.SPcolorData!\r\n      this._SPuvData = options.SPuvData!\r\n      this._sps = options.sps!\r\n\r\n      // initialize the map arrays if not passed as parameters\r\n      this._datamap = this._mapData ? true : false\r\n      this._uvmap = this._mapUVs ? true : false\r\n      this._colormap = this._mapColors ? true : false\r\n      this._mapSPData = this._SPmapData ? true : false\r\n      this._colorSPData = this._mapSPData && this._SPcolorData ? true : false\r\n      this._uvSPData = this._mapSPData && this._SPuvData ? true : false\r\n      this._mapData = this._datamap ? this._mapData : new Float32Array(this._terrainIdx * this._terrainIdx * 3)\r\n      this._mapUVs = this._uvmap ? this._mapUVs : new Float32Array(this._terrainIdx * this._terrainIdx * 2)\r\n      if (this._datamap) {\r\n        this._mapNormals = options.mapNormals || new Float32Array(this._mapSubX * this._mapSubZ * 3)\r\n      } else {\r\n        this._mapNormals = new Float32Array(this._terrainIdx * this._terrainIdx * 3)\r\n      }\r\n\r\n      // Ribbon creation\r\n      let index = 0 // current vertex index in the map array\r\n      let posIndex = 0 // current position (coords) index in the map array\r\n      let colIndex = 0 // current color index in the color array\r\n      let uvIndex = 0 // current uv index in the uv array\r\n      let color // current color\r\n      let uv // current uv\r\n      let terIndex = 0 // current index in the terrain array\r\n      let y = 0.0 // current y coordinate\r\n      let terrainPath // current path\r\n      let u = 0.0 // current u of UV\r\n      let v = 0.0 // current v of UV\r\n      let lg = this._terrainIdx + 1 // augmented length for the UV to finish before\r\n      const terrainData = []\r\n      const terrainColor = []\r\n      const terrainUV = []\r\n      const mapData = this._mapData\r\n      const mapColors = this._mapColors\r\n      const mapUVs = this._mapUVs\r\n      for (let j = 0; j <= this._terrainSub; j++) {\r\n        terrainPath = []\r\n        for (let i = 0; i <= this._terrainSub; i++) {\r\n          index = this._mod(j * 3, this._mapSubZ) * this._mapSubX + this._mod(i * 3, this._mapSubX)\r\n          posIndex = index * 3\r\n          colIndex = index * 3\r\n          uvIndex = index * 2\r\n          terIndex = j * this._terrainIdx + i\r\n          // geometry\r\n          if (this._datamap) {\r\n            y = mapData[posIndex + 1]\r\n          } else {\r\n            y = 0.0\r\n            mapData[3 * terIndex] = i\r\n            mapData[3 * terIndex + 1] = y\r\n            mapData[3 * terIndex + 2] = j\r\n          }\r\n          terrainPath.push(new Vector3(i, y, j))\r\n          // color\r\n          if (this._colormap) {\r\n            color = new Color4(mapColors[colIndex], mapColors[colIndex + 1], mapColors[colIndex + 2], 1.0)\r\n          } else {\r\n            color = new Color4(1.0, 1.0, 1.0, 1.0)\r\n          }\r\n          terrainColor.push(color)\r\n          // uvs\r\n          if (this._uvmap) {\r\n            uv = new Vector2(mapUVs[uvIndex], mapUVs[uvIndex + 1])\r\n          } else {\r\n            u = 1.0 - Math.abs(1.0 - (2.0 * i) / lg)\r\n            v = 1.0 - Math.abs(1.0 - (2.0 * j) / lg)\r\n            mapUVs[2 * terIndex] = u\r\n            mapUVs[2 * terIndex + 1] = v\r\n            uv = new Vector2(u, v)\r\n          }\r\n          terrainUV.push(uv)\r\n        }\r\n        terrainData.push(terrainPath)\r\n      }\r\n\r\n      this._mapSizeX = Math.abs(mapData[(this._mapSubX - 1) * 3] - mapData[0])\r\n      this._mapSizeZ = Math.abs(mapData[(this._mapSubZ - 1) * this._mapSubX * 3 + 2] - mapData[2])\r\n      this._averageSubSizeX = this._mapSizeX / this._mapSubX\r\n      this._averageSubSizeZ = this._mapSizeZ / this._mapSubZ\r\n      const ribbonOptions = {\r\n        pathArray: terrainData,\r\n        sideOrientation: options.invertSide ? Mesh.FRONTSIDE : Mesh.BACKSIDE,\r\n        colors: terrainColor,\r\n        uvs: terrainUV,\r\n        updatable: true\r\n      }\r\n      this._terrain = MeshBuilder.CreateRibbon(\"terrain\", ribbonOptions, this._scene)\r\n      this._indices = this._terrain.getIndices()\r\n      this._positions = this._terrain.getVerticesData(VertexBuffer.PositionKind) as (number[] | Float32Array)\r\n      this._normals = this._terrain.getVerticesData(VertexBuffer.NormalKind)!\r\n      this._uvs = this._terrain.getVerticesData(VertexBuffer.UVKind)!\r\n      this._colors = this._terrain.getVerticesData(VertexBuffer.ColorKind)!\r\n      this.computeNormalsFromMap()\r\n\r\n      // update it immediatly and register the update callback function in the render loop\r\n      this.update(true)\r\n      this._terrain.position.x = this._terrainCamera.globalPosition.x - this._terrainHalfSizeX + this.shiftFromCamera.x\r\n      this._terrain.position.z = this._terrainCamera.globalPosition.z - this._terrainHalfSizeZ + this.shiftFromCamera.z\r\n      // initialize deltaSub to make on the map\r\n      let deltaNbSubX = (this._terrain.position.x - mapData[0]) / this._averageSubSizeX\r\n      let deltaNbSubZ = (this._terrain.position.z - mapData[2]) / this._averageSubSizeZ\r\n      this._deltaSubX = deltaNbSubX > 0 ? Math.floor(deltaNbSubX) : Math.ceil(deltaNbSubX)\r\n      this._deltaSubZ = deltaNbSubZ > 0 ? Math.floor(deltaNbSubZ) : Math.ceil(deltaNbSubZ)\r\n      this._scene.onBeforeRenderObservable.add(() => {\r\n        const refreshEveryFrame = this._refreshEveryFrame\r\n        this.beforeUpdate(refreshEveryFrame)\r\n        this.update(refreshEveryFrame)\r\n        this.afterUpdate(refreshEveryFrame)\r\n      })\r\n\r\n      // if SP data, populate the map quads\r\n      // mapQuads[mapIndex][partType] = [partIdx1 , partIdx2 ...] partIdx are particle indexes in SPmapData\r\n      const SPmapData = this._SPmapData\r\n      const dataStride = this._particleDataStride\r\n      if (this._mapSPData) {\r\n        const mapSizeX = this._mapSizeX\r\n        const mapSizeZ = this._mapSizeZ\r\n        const mapSubX = this._mapSubX\r\n        const mapSubZ = this._mapSubZ\r\n        const quads: number[][][] = []\r\n        this._mapQuads = quads\r\n        let x0 = mapData[0]\r\n        let z0 = mapData[2]\r\n\r\n        for (let t = 0; t < SPmapData.length; t++) {\r\n          const data = SPmapData[t]\r\n          let nb = (data.length / dataStride) | 0\r\n          for (let pIdx = 0; pIdx < nb; pIdx++) {\r\n            // particle position x, z in the map\r\n            let dIdx = pIdx * dataStride\r\n            let x = data[dIdx]\r\n            let z = data[dIdx + 2]\r\n            x = x - Math.floor((x - x0) / mapSizeX) * mapSizeX\r\n            z = z - Math.floor((z - z0) / mapSizeZ) * mapSizeZ\r\n            let col = Math.floor(((x - x0) * mapSubX) / mapSizeX)\r\n            let row = Math.floor(((z - z0) * mapSubZ) / mapSizeZ)\r\n            let quadIdx = row * mapSubX + col\r\n            if (quads[quadIdx] === undefined) {\r\n              quads[quadIdx] = []\r\n            }\r\n            if (quads[quadIdx][t] === undefined) {\r\n              quads[quadIdx][t] = []\r\n            }\r\n            let quad = quads[quadIdx][t]\r\n            // push the particle index from the SPmapData array into the quads array\r\n            quad.push(pIdx)\r\n          }\r\n        }\r\n\r\n        // update the sps\r\n        const sps = this._sps\r\n        sps.computeBoundingBox = true\r\n        sps.isAlwaysVisible = true\r\n        if (this._colorSPData) {\r\n          sps.computeParticleColor = true\r\n        }\r\n        if (this._uvSPData) {\r\n          sps.computeParticleTexture = true\r\n        }\r\n        // store particle types\r\n        const spsTypeStartIndexes: number[] = []\r\n        this._spsTypeStartIndexes = spsTypeStartIndexes\r\n        const spsNbPerType: number[] = []\r\n        this._spsNbPerType = spsNbPerType\r\n        const nbAvailablePerType: number[] = []\r\n        this._nbAvailablePerType = nbAvailablePerType!\r\n        const nbParticles = sps.nbParticles\r\n        const particles = sps.particles\r\n        let type = 0\r\n        spsTypeStartIndexes.push(type)\r\n        nbAvailablePerType.push(0)\r\n        let count = 1\r\n        for (var p = 1; p < nbParticles; p++) {\r\n          particles[p].isVisible = false\r\n          if (type != particles[p].shapeId) {\r\n            type++\r\n            spsTypeStartIndexes.push(p)\r\n            spsNbPerType.push(count)\r\n            nbAvailablePerType.push(count)\r\n            count = 0\r\n          }\r\n          count++\r\n        }\r\n        spsNbPerType.push(count)\r\n      }\r\n      this.update(true) // recompute everything once the initial deltas are calculated\r\n    }\r\n\r\n\r\n    /**\r\n     * Updates the terrain position and shape according to the camera position.\r\n     * `force` : boolean, forces the terrain update even if no camera position change.\r\n     * Returns the terrain.\r\n     */\r\n    public update(force: boolean): DynamicTerrain {\r\n      let needsUpdate = false\r\n      let updateLOD = false\r\n      const updateForced = force ? true : false\r\n      const terrainPosition = this._terrain.position\r\n      const cameraPosition = this._terrainCamera.globalPosition\r\n      const shiftFromCamera = this.shiftFromCamera\r\n      let terrainHalfSizeX = this._terrainHalfSizeX\r\n      let terrainHalfSizeZ = this._terrainHalfSizeZ\r\n      const deltaX = terrainHalfSizeX + terrainPosition.x - cameraPosition.x - shiftFromCamera.x\r\n      const deltaZ = terrainHalfSizeZ + terrainPosition.z - cameraPosition.z - shiftFromCamera.z\r\n      const subToleranceX = this._subToleranceX\r\n      const subToleranceZ = this._subToleranceZ\r\n      const mod = this._mod\r\n\r\n      // current LOD\r\n      let oldCorrection = this._cameraLODCorrection\r\n      this._cameraLODCorrection = this.updateCameraLOD(this._terrainCamera) | 0\r\n      updateLOD = oldCorrection == this._cameraLODCorrection ? false : true\r\n      let LODValue = this._initialLOD + this._cameraLODCorrection\r\n      LODValue = LODValue > 0 ? LODValue : 1\r\n      this._LODValue = LODValue\r\n\r\n      // threshold sizes on each axis to trigger the terrain update\r\n      let mapShiftX = this._averageSubSizeX * subToleranceX * LODValue\r\n      let mapShiftZ = this._averageSubSizeZ * subToleranceZ * LODValue\r\n\r\n      let mapFlgtNb = 0 | 0 // number of map cells flought over by the camera in the delta shift\r\n      let deltaSubX = this._deltaSubX\r\n      let deltaSubZ = this._deltaSubZ\r\n      if (Math.abs(deltaX) > mapShiftX) {\r\n        const signX = deltaX > 0.0 ? -1 : 1\r\n        mapFlgtNb = Math.abs(deltaX / mapShiftX) | 0\r\n        terrainPosition.x += mapShiftX * signX * mapFlgtNb\r\n        deltaSubX += subToleranceX * signX * LODValue * mapFlgtNb\r\n        needsUpdate = true\r\n      }\r\n      if (Math.abs(deltaZ) > mapShiftZ) {\r\n        const signZ = deltaZ > 0.0 ? -1 : 1\r\n        mapFlgtNb = Math.abs(deltaZ / mapShiftZ) | 0\r\n        terrainPosition.z += mapShiftZ * signZ * mapFlgtNb\r\n        deltaSubZ += subToleranceZ * signZ * LODValue * mapFlgtNb\r\n        needsUpdate = true\r\n      }\r\n      const updateSize = updateLOD || updateForced // must the terrain size be updated ?\r\n      if (needsUpdate || updateSize) {\r\n        this._deltaSubX = mod(deltaSubX, this._mapSubX)\r\n        this._deltaSubZ = mod(deltaSubZ, this._mapSubZ)\r\n        this._updateTerrain(updateSize)\r\n      }\r\n\r\n      terrainHalfSizeX = this._terrainHalfSizeX\r\n      terrainHalfSizeZ = this._terrainHalfSizeZ\r\n      this.centerLocal.copyFromFloats(terrainHalfSizeX, 0.0, terrainHalfSizeZ)\r\n      this._centerWorld.copyFromFloats(terrainPosition.x + terrainHalfSizeX, terrainPosition.y, terrainPosition.z + terrainHalfSizeZ)\r\n\r\n      return this\r\n    }\r\n\r\n    // private : updates the underlying ribbon\r\n    private _updateTerrain(updateSize: boolean): void {\r\n      let stepJ = 0 | 0\r\n      let stepI = 0 | 0\r\n      let LODLimitDown = 0 | 0\r\n      let LODLimitUp = 0 | 0\r\n      let LODValue = this._LODValue // terrain LOD value\r\n      let axisLODValue = LODValue // current axis computed LOD value\r\n      let lodI = LODValue // LOD X\r\n      let lodJ = LODValue // LOD Z\r\n      const bbMin = DynamicTerrain._bbMin\r\n      const bbMax = DynamicTerrain._bbMax\r\n      const terrain = this._terrain\r\n      const positions = this._positions!\r\n      const normals = this._normals\r\n      const colors = this._colors\r\n      const uvs = this._uvs\r\n      const mapColors = this._mapColors\r\n      const mapNormals = this._mapNormals\r\n      const mapData = this._mapData\r\n      const mapUVs = this._mapUVs\r\n      const mapSPData = this._mapSPData\r\n      const quads = this._mapQuads\r\n      const nbPerType = this._spsNbPerType\r\n      const SPmapData = this._SPmapData\r\n      const SPcolorData = this._SPcolorData\r\n      const SPuvData = this._SPuvData\r\n      const dataStride = this._particleDataStride\r\n      const colorStride = this._particleColorStride\r\n      const uvStride = this._particleUVStride\r\n      const LODLimits = this._LODLimits\r\n      const terrainSub = this._terrainSub\r\n      const mod = this._mod\r\n      const terrainIdx = this._terrainIdx\r\n      const mapSubX = this._mapSubX\r\n      const mapSubZ = this._mapSubZ\r\n      const deltaSubX = this._deltaSubX\r\n      const deltaSubZ = this._deltaSubZ\r\n      const datamap = this._datamap\r\n      const uvmap = this._uvmap\r\n      const colormap = this._colormap\r\n      const useCustomVertexFunction = this._useCustomVertexFunction\r\n      const updateVertex = this.updateVertex\r\n      const dontComputeNormals = !this._computeNormals\r\n      const LODpstvX = this._LODPositiveX\r\n      const LODngtvX = this._LODNegativeX\r\n      const LODpstvZ = this._LODPositiveZ\r\n      const LODngtvZ = this._LODNegativeZ\r\n      const mapSizeX = this._mapSizeX\r\n      const mapSizeZ = this._mapSizeZ\r\n      const averageSubSizeX = this._averageSubSizeX\r\n      const averageSubSizeZ = this._averageSubSizeZ\r\n      const particleMap = mapSPData && quads\r\n      const particleColorMap = particleMap && this._colorSPData\r\n      const particleUVMap = particleMap && this._uvSPData\r\n\r\n      let l = 0 | 0\r\n      let index = 0 | 0 // current vertex index in the map data array\r\n      let posIndex1 = 0 | 0 // current position index in the map data array\r\n      let posIndex2 = 0 | 0\r\n      let posIndex3 = 0 | 0\r\n      let colIndex = 0 | 0 // current index in the map color array\r\n      let uvIndex = 0 | 0 // current index in the map uv array\r\n      let terIndex = 0 | 0 // current vertex index in the terrain map array when used as a data map\r\n      let ribbonInd = 0 | 0 // current ribbon vertex index\r\n      let ribbonPosInd = 0 | 0 // current ribbon position index (same than normal index)\r\n      let ribbonUVInd = 0 | 0 // current ribbon UV index\r\n      let ribbonColInd = 0 | 0 // current ribbon color index\r\n      let ribbonColInd1 = 0 | 0\r\n      let ribbonColInd2 = 0 | 0\r\n      let ribbonColInd3 = 0 | 0\r\n      let ribbonColInd4 = 0 | 0\r\n      let ribbonPosInd1 = 0 | 0\r\n      let ribbonPosInd2 = 0 | 0\r\n      let ribbonPosInd3 = 0 | 0\r\n      // note : all the indexes are explicitly set as integers for the js optimizer (store them all in the stack)\r\n\r\n      if (updateSize) {\r\n        this.updateTerrainSize()\r\n      }\r\n      Vector3.FromFloatsToRef(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE, bbMin)\r\n      Vector3.FromFloatsToRef(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE, bbMax)\r\n\r\n      if (particleMap) {\r\n        var sps = this._sps\r\n        var particles = sps.particles\r\n        var spsTypeStartIndexes = this._spsTypeStartIndexes\r\n        var nbAvailablePerType = this._nbAvailablePerType\r\n        var x0 = mapData[0]\r\n        var z0 = mapData[2]\r\n        var terrainPos = terrain.position\r\n\r\n        // reset all the particles to invisible\r\n        const nbParticles = sps.nbParticles\r\n        for (let p = 0; p < nbParticles; p++) {\r\n          particles[p].isVisible = false\r\n        }\r\n      }\r\n\r\n      for (let j = 0 | 0; j <= terrainSub; j++) {\r\n        // LOD Z\r\n        axisLODValue = LODValue\r\n        for (l = 0; l < LODLimits.length; l++) {\r\n          LODLimitDown = LODLimits[l]\r\n          LODLimitUp = terrainSub - LODLimitDown - 1\r\n          if ((LODngtvZ && j < LODLimitDown) || (LODpstvZ && j > LODLimitUp)) {\r\n            axisLODValue = l + 1 + LODValue\r\n          }\r\n          lodJ = axisLODValue\r\n        }\r\n\r\n        for (let i = 0 | 0; i <= terrainSub; i++) {\r\n          // LOD X\r\n          axisLODValue = LODValue\r\n          for (l = 0; l < LODLimits.length; l++) {\r\n            LODLimitDown = LODLimits[l]\r\n            LODLimitUp = terrainSub - LODLimitDown - 1\r\n            if ((LODngtvX && i < LODLimitDown) || (LODpstvX && i > LODLimitUp)) {\r\n              axisLODValue = l + 1 + LODValue\r\n            }\r\n            lodI = axisLODValue\r\n          }\r\n\r\n          // map current index\r\n          index = mod(deltaSubZ + stepJ, mapSubZ) * mapSubX + mod(deltaSubX + stepI, mapSubX)\r\n          terIndex = mod(deltaSubZ + stepJ, terrainIdx) * terrainIdx + mod(deltaSubX + stepI, terrainIdx)\r\n\r\n          // related index in the array of positions (data map)\r\n          if (datamap) {\r\n            posIndex1 = 3 * index\r\n          } else {\r\n            posIndex1 = 3 * terIndex\r\n          }\r\n          // related index in the UV map\r\n          if (uvmap) {\r\n            uvIndex = 2 * index\r\n          } else {\r\n            uvIndex = 2 * terIndex\r\n          }\r\n          // related index in the color map\r\n          if (colormap) {\r\n            colIndex = 3 * index\r\n          } else {\r\n            colIndex = 3 * terIndex\r\n          }\r\n\r\n          //map indexes\r\n          posIndex2 = posIndex1 + 1\r\n          posIndex3 = posIndex1 + 2\r\n\r\n          // ribbon indexes\r\n          ribbonPosInd = 3 * ribbonInd\r\n          ribbonColInd = 4 * ribbonInd\r\n          ribbonUVInd = 2 * ribbonInd\r\n          ribbonPosInd1 = ribbonPosInd\r\n          ribbonPosInd2 = ribbonPosInd + 1\r\n          ribbonPosInd3 = ribbonPosInd + 2\r\n          ribbonColInd1 = ribbonColInd\r\n          ribbonColInd2 = ribbonColInd + 1\r\n          ribbonColInd3 = ribbonColInd + 2\r\n          ribbonColInd4 = ribbonColInd + 3\r\n          ribbonInd += 1\r\n\r\n          // geometry\r\n          positions[ribbonPosInd1] = averageSubSizeX * stepI\r\n          positions[ribbonPosInd2] = mapData[posIndex2]\r\n          positions[ribbonPosInd3] = averageSubSizeZ * stepJ\r\n\r\n          if (dontComputeNormals) {\r\n            normals[ribbonPosInd1] = mapNormals[posIndex1]\r\n            normals[ribbonPosInd2] = mapNormals[posIndex2]\r\n            normals[ribbonPosInd3] = mapNormals[posIndex3]\r\n          }\r\n\r\n          // bbox internal update\r\n          if (positions[ribbonPosInd1] < bbMin.x) {\r\n            bbMin.x = positions[ribbonPosInd1]\r\n          }\r\n          if (positions[ribbonPosInd1] > bbMax.x) {\r\n            bbMax.x = positions[ribbonPosInd1]\r\n          }\r\n          if (positions[ribbonPosInd2] < bbMin.y) {\r\n            bbMin.y = positions[ribbonPosInd2]\r\n          }\r\n          if (positions[ribbonPosInd2] > bbMax.y) {\r\n            bbMax.y = positions[ribbonPosInd2]\r\n          }\r\n          if (positions[ribbonPosInd3] < bbMin.z) {\r\n            bbMin.z = positions[ribbonPosInd3]\r\n          }\r\n          if (positions[ribbonPosInd3] > bbMax.z) {\r\n            bbMax.z = positions[ribbonPosInd3]\r\n          }\r\n          // color\r\n          if (colormap) {\r\n            colors[ribbonColInd1] = mapColors[colIndex]\r\n            colors[ribbonColInd2] = mapColors[colIndex + 1]\r\n            colors[ribbonColInd3] = mapColors[colIndex + 2]\r\n          }\r\n          // uv : the array _mapUVs is always populated\r\n          uvs[ribbonUVInd] = mapUVs[uvIndex]\r\n          uvs[ribbonUVInd + 1] = mapUVs[uvIndex + 1]\r\n\r\n          // call to user custom function with the current updated vertex object\r\n          if (useCustomVertexFunction) {\r\n            const vertex = DynamicTerrain._vertex\r\n            const vertexPosition = vertex.position\r\n            const vertexWorldPosition = vertex.worldPosition\r\n            const vertexColor = vertex.color\r\n            const vertexUvs = vertex.uvs\r\n            vertexPosition.copyFromFloats(positions[ribbonPosInd1], positions[ribbonPosInd2], positions[ribbonPosInd3])\r\n            vertexWorldPosition.copyFromFloats(mapData[posIndex1], vertexPosition.y, mapData[posIndex3])\r\n            vertex.lodX = lodI\r\n            vertex.lodZ = lodJ\r\n            vertexColor.copyFromFloats(colors[ribbonColInd1], colors[ribbonColInd2], colors[ribbonColInd3], colors[ribbonColInd4])\r\n            vertexUvs.copyFromFloats(uvs[ribbonUVInd], uvs[ribbonUVInd + 1])\r\n            vertex.mapIndex = index\r\n            updateVertex(vertex, i, j) // the user can modify the array values here\r\n            colors[ribbonColInd1] = vertexColor.r\r\n            colors[ribbonColInd2] = vertexColor.g\r\n            colors[ribbonColInd3] = vertexColor.b\r\n            colors[ribbonColInd4] = vertexColor.a\r\n            uvs[ribbonUVInd] = vertexUvs.x\r\n            uvs[ribbonUVInd + 1] = vertexUvs.y\r\n            positions[ribbonPosInd1] = vertexPosition.x\r\n            positions[ribbonPosInd2] = vertexPosition.y\r\n            positions[ribbonPosInd3] = vertexPosition.z\r\n          }\r\n\r\n          // SPS management\r\n          if (particleMap) {\r\n            let quad = quads[index]\r\n            if (quad) {\r\n              // if a quad contains some particles in the map\r\n              for (let t = 0; t < quad.length; t++) {\r\n                let data = SPmapData[t]\r\n                let partIndexes = quad[t]\r\n                if (particleColorMap) {\r\n                  var sp_colorData = SPcolorData[t]\r\n                }\r\n                if (particleUVMap) {\r\n                  var sp_uvData = SPuvData[t]\r\n                }\r\n                if (partIndexes) {\r\n                  let typeStartIndex = spsTypeStartIndexes![t] // particle start index for a given type in the SPS\r\n                  const nbQuadParticles = partIndexes.length\r\n                  let nbInSPS = nbPerType[t]\r\n                  let available = nbAvailablePerType![t]\r\n                  const rem = nbInSPS - available\r\n                  var used = rem > 0 ? rem : 0\r\n                  let min = available < nbQuadParticles ? available : nbQuadParticles // don't iterate beyond possible\r\n                  for (let pIdx = 0; pIdx < min; pIdx++) {\r\n                    let px = partIndexes[pIdx]\r\n                    let idm = px * dataStride\r\n                    // set successive available particles of this type\r\n                    let particle = particles![typeStartIndex + pIdx + used]\r\n                    let pos = particle.position\r\n                    let rot = particle.rotation\r\n                    let scl = particle.scaling\r\n                    let x = data[idm]\r\n                    pos.x = x + Math.floor((terrainPos!.x - x - x0!) / mapSizeX) * mapSizeX\r\n                    pos.y = data[idm + 1]\r\n                    let z = data[idm + 2]\r\n                    pos.z = z + Math.floor((terrainPos!.z - z - z0!) / mapSizeZ) * mapSizeZ\r\n                    rot.x = data[idm + 3]\r\n                    rot.y = data[idm + 4]\r\n                    rot.z = data[idm + 5]\r\n                    scl.x = data[idm + 6]\r\n                    scl.y = data[idm + 7]\r\n                    scl.z = data[idm + 8]\r\n                    if (particleColorMap) {\r\n                      let idc = px * colorStride\r\n                      let col = particle.color!\r\n                      col.r = sp_colorData![idc]\r\n                      col.g = sp_colorData![idc + 1]\r\n                      col.b = sp_colorData![idc + 2]\r\n                      col.a = sp_colorData![idc + 3]\r\n                    }\r\n                    if (particleUVMap) {\r\n                      let iduv = px * uvStride\r\n                      let uvs = particle.uvs\r\n                      uvs.x = sp_uvData![iduv]\r\n                      uvs.y = sp_uvData![iduv + 1]\r\n                      uvs.z = sp_uvData![iduv + 2]\r\n                      uvs.w = sp_uvData![iduv + 3]\r\n                    }\r\n                    particle.isVisible = true\r\n                    available = available - 1\r\n                    used = used + 1\r\n                    min = available < nbQuadParticles ? available : nbQuadParticles\r\n                  }\r\n                  available = available > 0 ? available : 0\r\n                  nbAvailablePerType![t] = available\r\n                }\r\n              }\r\n            }\r\n          }\r\n          stepI += lodI\r\n        }\r\n        stepI = 0\r\n        stepJ += lodJ\r\n      }\r\n\r\n      if (particleMap) {\r\n        sps!.setParticles()\r\n        for (let c = 0; c < nbAvailablePerType!.length; c++) {\r\n          nbAvailablePerType![c] = nbPerType[c]\r\n        }\r\n      }\r\n\r\n      // ribbon update\r\n      terrain.updateVerticesData(VertexBuffer.PositionKind, positions, false, false)\r\n      if (this._computeNormals) {\r\n        VertexData.ComputeNormals(positions, this._indices, normals)\r\n      }\r\n      terrain.updateVerticesData(VertexBuffer.NormalKind, normals, false, false)\r\n      terrain.updateVerticesData(VertexBuffer.UVKind, uvs, false, false)\r\n      terrain.updateVerticesData(VertexBuffer.ColorKind, colors, false, false)\r\n      terrain._boundingInfo!.reConstruct(bbMin, bbMax, terrain._worldMatrix)\r\n    }\r\n\r\n    // private modulo, for dealing with negative indexes\r\n    private _mod(a: number, b: number): number {\r\n      return ((a % b) + b) % b\r\n    }\r\n\r\n    /**\r\n     * Updates the mesh terrain size according to the LOD limits and the camera position.\r\n     * Returns the terrain.\r\n     */\r\n    public updateTerrainSize(): DynamicTerrain {\r\n      let remainder = this._terrainSub // the remaining cells at the general current LOD value\r\n      let nb = 0 | 0 // nb of cells in the current LOD limit interval\r\n      let next = 0 | 0 // next cell index, if it exists\r\n      let LODValue = this._LODValue\r\n      let lod = LODValue + 1 // lod value in the current LOD limit interval\r\n      let tsx = 0.0 // current sum of cell sizes on x\r\n      let tsz = 0.0 // current sum of cell sizes on z\r\n      const LODLimits = this._LODLimits\r\n      const averageSubSizeX = this._averageSubSizeX\r\n      const averageSubSizeZ = this._averageSubSizeZ\r\n      for (let l = 0 | 0; l < LODLimits.length; l++) {\r\n        lod = LODValue + l + 1\r\n        next = l >= LODLimits.length - 1 ? 0 : LODLimits[l + 1]\r\n        nb = 2 * (LODLimits[l] - next)\r\n        tsx += averageSubSizeX * lod * nb\r\n        tsz += averageSubSizeZ * lod * nb\r\n        remainder -= nb\r\n      }\r\n      tsx += remainder * averageSubSizeX * LODValue\r\n      tsz += remainder * averageSubSizeZ * LODValue\r\n      this._terrainSizeX = tsx\r\n      this._terrainSizeZ = tsz\r\n      this._terrainHalfSizeX = tsx * 0.5\r\n      this._terrainHalfSizeZ = tsz * 0.5\r\n      return this\r\n    }\r\n\r\n    /**\r\n     * Returns the altitude (float) at the coordinates (x, z) of the map.\r\n     * @param x\r\n     * @param z\r\n     * @param {normal: Vector3} (optional)\r\n     * If the optional object {normal: Vector3} is passed, then its property \"normal\" is updated with the normal vector value at the coordinates (x, z).\r\n     */\r\n    public getHeightFromMap(x: number, z: number, options?: { normal: Vector3 }): number {\r\n      return DynamicTerrain._GetHeightFromMap(x, z, this._mapData, this._mapSubX, this._mapSubZ, this._mapSizeX, this._mapSizeZ, options, this._inverted)\r\n    }\r\n\r\n    /**\r\n     * Static : Returns the altitude (float) at the coordinates (x, z) of the passed map.\r\n     * @param x\r\n     * @param z\r\n     * @param mapSubX the number of points along the map width\r\n     * @param mapSubX the number of points along the map height\r\n     * @param {normal: Vector3} (optional)\r\n     * @param inverted (optional boolean) is the terrain inverted\r\n     * If the optional object {normal: Vector3} is passed, then its property \"normal\" is updated with the normal vector value at the coordinates (x, z).\r\n     */\r\n    public static GetHeightFromMap(\r\n      x: number,\r\n      z: number,\r\n      mapData: number[] | Float32Array,\r\n      mapSubX: number,\r\n      mapSubZ: number,\r\n      options?: { normal: Vector3 },\r\n      inverted?: boolean\r\n    ): number {\r\n      let mapSizeX = Math.abs(mapData[(mapSubX - 1) * 3] - mapData[0])\r\n      let mapSizeZ = Math.abs(mapData[(mapSubZ - 1) * mapSubX * 3 + 2] - mapData[2])\r\n      return DynamicTerrain._GetHeightFromMap(x, z, mapData, mapSubX, mapSubZ, mapSizeX, mapSizeZ, options, inverted)\r\n    }\r\n\r\n    // Computes the height and optionnally the normal at the coordinates (x ,z) from the passed map\r\n    private static _GetHeightFromMap(\r\n      x: number,\r\n      z: number,\r\n      mapData: number[] | Float32Array,\r\n      mapSubX: number,\r\n      mapSubZ: number,\r\n      mapSizeX: number,\r\n      mapSizeZ: number,\r\n      options?: { normal: Vector3 },\r\n      inverted?: boolean\r\n    ): number {\r\n      let x0 = mapData[0]\r\n      let z0 = mapData[2]\r\n\r\n      // reset x and z in the map space so they are between 0 and the map size\r\n      x = x - Math.floor((x - x0) / mapSizeX) * mapSizeX\r\n      z = z - Math.floor((z - z0) / mapSizeZ) * mapSizeZ\r\n\r\n      let col1 = Math.floor(((x - x0) * mapSubX) / mapSizeX)\r\n      let row1 = Math.floor(((z - z0) * mapSubZ) / mapSizeZ)\r\n      let col2 = (col1 + 1) % mapSubX\r\n      let row2 = (row1 + 1) % mapSubZ\r\n      // starting indexes of the positions of 4 vertices defining a quad on the map\r\n      let idx1 = 3 * (row1 * mapSubX + col1)\r\n      let idx2 = 3 * (row1 * mapSubX + col2)\r\n      let idx3 = 3 * (row2 * mapSubX + col1)\r\n      let idx4 = 3 * (row2 * mapSubX + col2)\r\n\r\n      const v1 = DynamicTerrain._v1\r\n      const v2 = DynamicTerrain._v2\r\n      const v3 = DynamicTerrain._v3\r\n      const v4 = DynamicTerrain._v4\r\n      v1.copyFromFloats(mapData[idx1], mapData[idx1 + 1], mapData[idx1 + 2])\r\n      v2.copyFromFloats(mapData[idx2], mapData[idx2 + 1], mapData[idx2 + 2])\r\n      v3.copyFromFloats(mapData[idx3], mapData[idx3 + 1], mapData[idx3 + 2])\r\n      v4.copyFromFloats(mapData[idx4], mapData[idx4 + 1], mapData[idx4 + 2])\r\n\r\n      const vAvB = DynamicTerrain._vAvB\r\n      const vAvC = DynamicTerrain._vAvC\r\n      const norm = DynamicTerrain._norm\r\n      const vA = v1\r\n      let vB\r\n      let vC\r\n      let v\r\n\r\n      let xv4v1 = v4.x - v1.x\r\n      let zv4v1 = v4.z - v1.z\r\n      if (xv4v1 == 0 || zv4v1 == 0) {\r\n        return v1.y\r\n      }\r\n      let cd = zv4v1 / xv4v1\r\n      let h = v1.z - cd * v1.x\r\n      if (z < cd * x + h) {\r\n        vB = v4\r\n        vC = v2\r\n        v = vA\r\n      } else {\r\n        vB = v3\r\n        vC = v4\r\n        v = vB\r\n      }\r\n      vB.subtractToRef(vA, vAvB)\r\n      vC.subtractToRef(vA, vAvC)\r\n      Vector3.CrossToRef(vAvB, vAvC, norm)\r\n      norm.normalize()\r\n      if (inverted) {\r\n        norm.scaleInPlace(-1.0)\r\n      }\r\n      if (options && options.normal) {\r\n        options.normal.copyFrom(norm)\r\n      }\r\n      let d = -(norm.x * v.x + norm.y * v.y + norm.z * v.z)\r\n      let y = v.y\r\n      if (norm.y != 0.0) {\r\n        y = -(norm.x * x + norm.z * z + d) / norm.y\r\n      }\r\n\r\n      return y\r\n    }\r\n\r\n    /**\r\n     * Static : Computes all the normals from the terrain data map  and stores them in the passed Float32Array reference.\r\n     * This passed array must have the same size than the mapData array.\r\n     */\r\n    public static ComputeNormalsFromMapToRef(\r\n      mapData: number[] | Float32Array,\r\n      mapSubX: number,\r\n      mapSubZ: number,\r\n      normals: number[] | Float32Array,\r\n      inverted: boolean\r\n    ): void {\r\n      const mapIndices = []\r\n      const tmp1 = { normal: Vector3.Zero() }\r\n      const tmp2 = { normal: Vector3.Zero() }\r\n      const normal1 = tmp1.normal\r\n      const normal2 = tmp2.normal\r\n      let l = mapSubX * (mapSubZ - 1)\r\n      let i = 0\r\n      for (i = 0; i < l; i++) {\r\n        mapIndices.push(i + 1, i + mapSubX, i)\r\n        mapIndices.push(i + mapSubX, i + 1, i + mapSubX + 1)\r\n      }\r\n      VertexData.ComputeNormals(mapData, mapIndices, normals)\r\n\r\n      // seam process\r\n      let lastIdx = (mapSubX - 1) * 3\r\n      let colStart = 0\r\n      let colEnd = 0\r\n      const getHeightFromMap = DynamicTerrain.GetHeightFromMap\r\n      for (i = 0; i < mapSubZ; i++) {\r\n        colStart = i * mapSubX * 3\r\n        colEnd = colStart + lastIdx\r\n        getHeightFromMap(mapData[colStart], mapData[colStart + 2], mapData, mapSubX, mapSubZ, tmp1)\r\n        getHeightFromMap(mapData[colEnd], mapData[colEnd + 2], mapData, mapSubX, mapSubZ, tmp2)\r\n        normal1.addInPlace(normal2).scaleInPlace(0.5)\r\n        normals[colStart] = normal1.x\r\n        normals[colStart + 1] = normal1.y\r\n        normals[colStart + 2] = normal1.z\r\n        normals[colEnd] = normal1.x\r\n        normals[colEnd + 1] = normal1.y\r\n        normals[colEnd + 2] = normal1.z\r\n      }\r\n      // inverted terrain\r\n      if (inverted) {\r\n        for (i = 0; i < normals.length; i++) {\r\n          normals[i] = -normals[i]\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Computes all the map normals from the current terrain data map and sets them to the terrain.\r\n     * Returns the terrain.\r\n     */\r\n    public computeNormalsFromMap(): DynamicTerrain {\r\n      DynamicTerrain.ComputeNormalsFromMapToRef(this._mapData, this._mapSubX, this._mapSubZ, this._mapNormals, this._inverted)\r\n      return this\r\n    }\r\n\r\n    /**\r\n     * Returns true if the World coordinates (x, z) are in the current terrain.\r\n     * @param x\r\n     * @param z\r\n     */\r\n    public contains(x: number, z: number): boolean {\r\n      const positions = this._positions!\r\n      const meshPosition = this.mesh.position\r\n      const terrainIdx = this._terrainIdx\r\n      if (x < positions[0] + meshPosition.x || x > positions[3 * terrainIdx] + meshPosition.x) {\r\n        return false\r\n      }\r\n      if (z < positions[2] + meshPosition.z || z > positions[3 * terrainIdx * terrainIdx + 2] + meshPosition.z) {\r\n        return false\r\n      }\r\n      return true\r\n    }\r\n\r\n    /**\r\n           * Static : Returns a new data map from the passed heightmap image file.\r\n           The parameters `width` and `height` (positive floats, default 300) set the map width and height sizes.\r\n          * `subX` is the wanted number of points along the map width (default 100).\r\n          * `subZ` is the wanted number of points along the map height (default 100).\r\n          * The parameter `minHeight` (float, default 0) is the minimum altitude of the map.\r\n          * The parameter `maxHeight` (float, default 1) is the maximum altitude of the map.\r\n          * The parameter `colorFilter` (optional Color3, default (0.3, 0.59, 0.11) ) is the filter to apply to the image pixel colors to compute the height.\r\n          * `onReady` is an optional callback function, called once the map is computed. It's passed the computed map.\r\n          * `scene` is the Scene object whose database will store the downloaded image.\r\n          */\r\n    public static CreateMapFromHeightMap(\r\n      heightmapURL: string,\r\n      options: {\r\n        width: number\r\n        height: number\r\n        subX: number\r\n        subZ: number\r\n        minHeight: number\r\n        maxHeight: number\r\n        offsetX: number\r\n        offsetZ: number\r\n        onReady?: (map: number[] | Float32Array, subX: number, subZ: number) => void\r\n        colorFilter?: Color3\r\n      },\r\n      scene: Scene\r\n    ): Float32Array {\r\n      const subX = options.subX || 100\r\n      const subZ = options.subZ || 100\r\n      const data = new Float32Array(subX * subZ * 3)\r\n      DynamicTerrain.CreateMapFromHeightMapToRef(heightmapURL, options, data, scene)\r\n      return data\r\n    }\r\n\r\n    /**\r\n     * Static : Updates the passed array or Float32Array with a data map computed from the passed heightmap image file.\r\n     *  The parameters `width` and `height` (positive floats, default 300) set the map width and height sizes.\r\n     * `subX` is the wanted number of points along the map width (default 100).\r\n     * `subZ` is the wanted number of points along the map height (default 100).\r\n     * The parameter `minHeight` (float, default 0) is the minimum altitude of the map.\r\n     * The parameter `maxHeight` (float, default 1) is the maximum altitude of the map.\r\n     * The parameter `colorFilter` (optional Color3, default (0.3, 0.59, 0.11) ) is the filter to apply to the image pixel colors to compute the height.\r\n     * `onReady` is an optional callback function, called once the map is computed. It's passed the computed map.\r\n     * `scene` is the Scene object whose database will store the downloaded image.\r\n     * The passed Float32Array must be the right size : 3 x subX x subZ.\r\n     */\r\n    public static CreateMapFromHeightMapToRef(\r\n      heightmapURL: string,\r\n      options: {\r\n        width: number\r\n        height: number\r\n        subX: number\r\n        subZ: number\r\n        minHeight: number\r\n        maxHeight: number\r\n        offsetX: number\r\n        offsetZ: number\r\n        onReady?: (map: number[] | Float32Array, subX: number, subZ: number) => void\r\n        colorFilter?: Color3\r\n      },\r\n      data: number[] | Float32Array,\r\n      scene: Scene\r\n    ): void {\r\n      const width = options.width || 300\r\n      const height = options.height || 300\r\n      const subX = options.subX || 100\r\n      const subZ = options.subZ || 100\r\n      const minHeight = options.minHeight || 0.0\r\n      const maxHeight = options.maxHeight || 10.0\r\n      const offsetX = options.offsetX || 0.0\r\n      const offsetZ = options.offsetZ || 0.0\r\n      const filter = options.colorFilter || new Color3(0.3, 0.59, 0.11)\r\n      const onReady = options.onReady\r\n\r\n      const onload = (img: HTMLImageElement | ImageBitmap) => {\r\n        // Getting height map data\r\n        const canvas = document.createElement(\"canvas\")\r\n        const context = canvas.getContext(\"2d\")!\r\n        const bufferWidth = img.width\r\n        const bufferHeight = img.height\r\n        canvas.width = bufferWidth\r\n        canvas.height = bufferHeight\r\n        context.drawImage(img, 0, 0)\r\n        // Cast is due to wrong definition in lib.d.ts from ts 1.3 - https://github.com/Microsoft/TypeScript/issues/949\r\n        const buffer = <Uint8Array>(<any>context.getImageData(0, 0, bufferWidth, bufferHeight).data)\r\n        let x = 0.0\r\n        let y = 0.0\r\n        let z = 0.0\r\n        for (let row = 0; row < subZ; row++) {\r\n          for (let col = 0; col < subX; col++) {\r\n            x = (col * width) / subX - width * 0.5\r\n            z = (row * height) / subZ - height * 0.5\r\n            let heightmapX = (((x + width * 0.5) / width) * (bufferWidth - 1)) | 0\r\n            let heightmapY = (bufferHeight - 1 - ((z + height * 0.5) / height) * (bufferHeight - 1)) | 0\r\n            let pos = (heightmapX + heightmapY * bufferWidth) * 4\r\n            let gradient = (buffer[pos] * filter.r + buffer[pos + 1] * filter.g + buffer[pos + 2] * filter.b) / 255.0\r\n            y = minHeight + (maxHeight - minHeight) * gradient\r\n            let idx = (row * subX + col) * 3\r\n            data[idx] = x + offsetX\r\n            data[idx + 1] = y\r\n            data[idx + 2] = z + offsetZ\r\n          }\r\n        }\r\n\r\n        // callback function if any\r\n        if (onReady) {\r\n          onReady(data, subX, subZ)\r\n        }\r\n      }\r\n\r\n      Tools.LoadImage(heightmapURL, onload, () => {}, scene.offlineProvider)\r\n    }\r\n\r\n    /**\r\n     * Static : Updates the passed arrays with UVs values to fit the whole map with subX points along its width and subZ points along its height.\r\n     * The passed array must be the right size : subX x subZ x 2.\r\n     */\r\n    public static CreateUVMapToRef(subX: number, subZ: number, mapUVs: number[] | Float32Array): void {\r\n      for (let h = 0; h < subZ; h++) {\r\n        for (let w = 0; w < subX; w++) {\r\n          mapUVs[(h * subX + w) * 2] = w / subX\r\n          mapUVs[(h * subX + w) * 2 + 1] = h / subZ\r\n        }\r\n      }\r\n    }\r\n    /**\r\n     * Static : Returns a new UV array with values to fit the whole map with subX points along its width and subZ points along its height.\r\n     */\r\n    public static CreateUVMap(subX: number, subZ: number): Float32Array {\r\n      const mapUVs = new Float32Array(subX * subZ * 2)\r\n      DynamicTerrain.CreateUVMapToRef(subX, subZ, mapUVs)\r\n      return mapUVs\r\n    }\r\n\r\n    /**\r\n     * Computes and sets the terrain UV map with values to fit the whole map.\r\n     * Returns the terrain.\r\n     */\r\n    public createUVMap(): DynamicTerrain {\r\n      this.mapUVs = DynamicTerrain.CreateUVMap(this._mapSubX, this._mapSubZ)\r\n      return this\r\n    }\r\n\r\n    // Getters / Setters\r\n    /**\r\n     * boolean : if the terrain must be recomputed every frame.\r\n     */\r\n    public get refreshEveryFrame(): boolean {\r\n      return this._refreshEveryFrame\r\n    }\r\n    public set refreshEveryFrame(val: boolean) {\r\n      this._refreshEveryFrame = val\r\n    }\r\n    /**\r\n     * Mesh : the logical terrain underlying mesh\r\n     */\r\n    public get mesh(): Mesh {\r\n      return this._terrain\r\n    }\r\n    /**\r\n     * The camera the terrain is linked to\r\n     */\r\n    public get camera(): Camera {\r\n      return this._terrainCamera\r\n    }\r\n    public set camera(val: Camera) {\r\n      this._terrainCamera = val\r\n    }\r\n    /**\r\n     * Number of cells flought over by the cam on the X axis before the terrain is updated.\r\n     * Integer greater or equal to 1.\r\n     */\r\n    public get subToleranceX(): number {\r\n      return this._subToleranceX\r\n    }\r\n    public set subToleranceX(val: number) {\r\n      this._subToleranceX = val > 0 ? val : 1\r\n    }\r\n    /**\r\n     * Number of cells flought over by the cam on the Z axis before the terrain is updated.\r\n     * Integer greater or equal to 1. Default 1.\r\n     */\r\n    public get subToleranceZ(): number {\r\n      return this._subToleranceZ\r\n    }\r\n    public set subToleranceZ(val: number) {\r\n      this._subToleranceZ = val > 0 ? val : 1\r\n    }\r\n    /**\r\n     * Initial LOD factor value.\r\n     * Integer greater or equal to 1. Default 1.\r\n     */\r\n    public get initialLOD(): number {\r\n      return this._initialLOD\r\n    }\r\n    public set initialLOD(val: number) {\r\n      this._initialLOD = val > 0 ? val : 1\r\n    }\r\n    /**\r\n     * Current LOD factor value : the lower factor in the terrain.\r\n     * The LOD value is the sum of the initialLOD and the current cameraLODCorrection.\r\n     * Integer greater or equal to 1. Default 1.\r\n     */\r\n    public get LODValue(): number {\r\n      return this._LODValue\r\n    }\r\n    /**\r\n     * Camera LOD correction : the factor to add to the initial LOD according to the camera position, movement, etc.\r\n     * Positive integer (default 0)\r\n     */\r\n    public get cameraLODCorrection(): number {\r\n      return this._cameraLODCorrection\r\n    }\r\n    public set cameraLODCorrection(val: number) {\r\n      this._cameraLODCorrection = val >= 0 ? val : 0\r\n    }\r\n    /**\r\n     * Boolean : Does the LOD apply only to the terrain right edge ?\r\n     * Default : true\r\n     */\r\n    public get LODPositiveX(): boolean {\r\n      return this._LODPositiveX\r\n    }\r\n    public set LODPositiveX(val: boolean) {\r\n      this._LODPositiveX = val\r\n    }\r\n    /**\r\n     * Boolean : Does the LOD apply only to the terrain left edge ?\r\n     * Default : true\r\n     */\r\n    public get LODNegativeX(): boolean {\r\n      return this._LODNegativeX\r\n    }\r\n    public set LODNegativeX(val: boolean) {\r\n      this._LODNegativeX = val\r\n    }\r\n    /**\r\n     * Boolean : Does the LOD apply only to the terrain upper edge ?\r\n     * Default : true\r\n     */\r\n    public get LODPositiveZ(): boolean {\r\n      return this._LODPositiveZ\r\n    }\r\n    public set LODPositiveZ(val: boolean) {\r\n      this._LODPositiveZ = val\r\n    }\r\n    /**\r\n     * Boolean : Does the LOD apply only to the terrain lower edge ?\r\n     * Default : true\r\n     */\r\n    public get LODNegativeZ(): boolean {\r\n      return this._LODNegativeZ\r\n    }\r\n    public set LODNegativeZ(val: boolean) {\r\n      this._LODNegativeZ = val\r\n    }\r\n    /**\r\n     * Average map and terrain subdivision size on X axis.\r\n     * Returns a float.\r\n     */\r\n    public get averageSubSizeX(): number {\r\n      return this._averageSubSizeX\r\n    }\r\n    /**\r\n     * Average map and terrain subdivision size on Z axis.\r\n     * Returns a float.\r\n     */\r\n    public get averageSubSizeZ(): number {\r\n      return this._averageSubSizeZ\r\n    }\r\n    /**\r\n     * Current terrain size on the X axis.\r\n     * Returns a float.\r\n     */\r\n    public get terrainSizeX(): number {\r\n      return this._terrainSizeX\r\n    }\r\n    /**\r\n     * Current terrain half size on the X axis.\r\n     * Returns a float.\r\n     */\r\n    public get terrainHalfSizeX(): number {\r\n      return this._terrainHalfSizeX\r\n    }\r\n    /**\r\n     * Current terrain size on the Z axis.\r\n     * Returns a float.\r\n     */\r\n    public get terrainSizeZ(): number {\r\n      return this._terrainSizeZ\r\n    }\r\n    /**\r\n     * Current terrain half size on the Z axis.\r\n     * Returns a float.\r\n     */\r\n    public get terrainHalfSizeZ(): number {\r\n      return this._terrainHalfSizeZ\r\n    }\r\n    /**\r\n     * Current position of terrain center in its local space.\r\n     * Returns a Vector3.\r\n     */\r\n    public get centerLocal(): Vector3 {\r\n      return this._centerLocal\r\n    }\r\n    /**\r\n     * Current position of terrain center in the World space.\r\n     * Returns a Vector3.\r\n     */\r\n    public get centerWorld(): Vector3 {\r\n      return this._centerWorld\r\n    }\r\n    /**\r\n     * The array of the limit values to change the LOD factor.\r\n     * Returns an array of integers or an empty array.\r\n     * This array is always sorted in the descending order once set.\r\n     */\r\n    public get LODLimits(): number[] {\r\n      return this._LODLimits\r\n    }\r\n    public set LODLimits(ar: number[]) {\r\n      ar.sort((a, b) => {\r\n        return b - a\r\n      })\r\n      this._LODLimits = ar\r\n    }\r\n    /**\r\n     * The data of the map.\r\n     * A flat array (Float32Array recommeded) of successive 3D float coordinates (x, y, z).\r\n     * This property can be set only if a mapData array was passed at construction time.\r\n     */\r\n    public get mapData(): Float32Array | number[] {\r\n      return this._mapData\r\n    }\r\n    public set mapData(val: Float32Array | number[]) {\r\n      this._mapData = val\r\n      this._datamap = true\r\n      const mapSubX = this._mapSubX\r\n      const mapSubZ = this._mapSubZ\r\n      this._mapSizeX = Math.abs(val[(mapSubX - 1) * 3] - val[0])\r\n      this._mapSizeZ = Math.abs(val[(mapSubZ - 1) * mapSubX * 3 + 2] - val[2])\r\n      this._averageSubSizeX = this._mapSizeX / mapSubX\r\n      this._averageSubSizeZ = this._mapSizeZ / mapSubZ\r\n      if (this._precomputeNormalsFromMap) {\r\n        this.computeNormalsFromMap()\r\n      }\r\n      this.update(true)\r\n    }\r\n    /**\r\n     * The number of points on the map width.\r\n     * Positive Integer.\r\n     */\r\n    public get mapSubX(): number {\r\n      return this._mapSubX\r\n    }\r\n    public set mapSubX(val: number) {\r\n      this._mapSubX = val\r\n    }\r\n    /**\r\n     * The number of points on the map height .\r\n     * Positive Integer.\r\n     */\r\n    public get mapSubZ(): number {\r\n      return this._mapSubZ\r\n    }\r\n    public set mapSubZ(val: number) {\r\n      this._mapSubZ = val\r\n    }\r\n    /**\r\n     * The map of colors.\r\n     * A flat array of successive floats between 0 and 1 as r,g,b values.\r\n     * This property can be set only if a mapColors array was passed at construction time.\r\n     */\r\n    public get mapColors(): Float32Array | number[] {\r\n      return this._mapColors\r\n    }\r\n    public set mapColors(val: Float32Array | number[]) {\r\n      this._colormap = true\r\n      this._mapColors = val\r\n    }\r\n    /**\r\n     * The map of UVs.\r\n     * A flat array of successive floats between 0 and 1 as (u, v) values.\r\n     * This property can be set only if a mapUVs array was passed at construction time.\r\n     */\r\n    public get mapUVs(): Float32Array | number[] {\r\n      return this._mapUVs\r\n    }\r\n    public set mapUVs(val: Float32Array | number[]) {\r\n      this._uvmap = true\r\n      this._mapUVs = val\r\n    }\r\n    /**\r\n     * The map of normals.\r\n     * A flat array of successive floats as normal vector coordinates (x, y, z) on each map point.\r\n     */\r\n    public get mapNormals(): Float32Array | number[] {\r\n      return this._mapNormals\r\n    }\r\n    public set mapNormals(val: Float32Array | number[]) {\r\n      this._mapNormals = val\r\n    }\r\n    /**\r\n     * Boolean : must the normals be recomputed on each terrain update (default : false).\r\n     * By default, all the map normals are pre-computed on terrain creation.\r\n     */\r\n    public get computeNormals(): boolean {\r\n      return this._computeNormals\r\n    }\r\n    public set computeNormals(val: boolean) {\r\n      this._computeNormals = val\r\n    }\r\n    /**\r\n     * Boolean : will the custom function updateVertex() be called on each terrain update ?\r\n     * Default false\r\n     */\r\n    public get useCustomVertexFunction(): boolean {\r\n      return this._useCustomVertexFunction\r\n    }\r\n    public set useCustomVertexFunction(val: boolean) {\r\n      this._useCustomVertexFunction = val\r\n    }\r\n    /**\r\n     * Boolean : is the terrain always directly selected for rendering ?\r\n     */\r\n    public get isAlwaysVisible(): boolean {\r\n      return this._isAlwaysVisible\r\n    }\r\n    public set isAlwaysVisible(val) {\r\n      this.mesh.alwaysSelectAsActiveMesh = val\r\n      this._isAlwaysVisible = val\r\n    }\r\n    /**\r\n     * Boolean : when assigning a new data map to the existing, shall the normals be automatically precomputed once ?\r\n     * Default false.\r\n     */\r\n    public get precomputeNormalsFromMap(): boolean {\r\n      return this._precomputeNormalsFromMap\r\n    }\r\n    public set precomputeNormalsFromMap(val) {\r\n      this._precomputeNormalsFromMap = val\r\n    }\r\n    // ===============================================================\r\n    // User custom functions.\r\n    // These following can be overwritten bu the user to fit his needs.\r\n\r\n    /**\r\n     * Custom function called for each terrain vertex and passed the :\r\n     * - current vertex {position: Vector3, uvs: Vector2, color: Color4, lodX: integer, lodZ: integer, worldPosition: Vector3, mapIndex: integer}\r\n     * - i : the vertex index on the terrain x axis\r\n     * - j : the vertex index on the terrain x axis\r\n     * This function is called only if the property useCustomVertexFunction is set to true.\r\n     */\r\n    public updateVertex(vertex: Vector3, i: number, j: number): void {\r\n      return\r\n    }\r\n\r\n    /**\r\n     * Custom function called each frame and passed the terrain camera reference.\r\n     * This should return a positive integer or zero.\r\n     * Returns zero by default.\r\n     */\r\n    public updateCameraLOD(terrainCamera: Camera): number {\r\n      // LOD value increases with camera altitude\r\n      var camLOD = 0\r\n      return camLOD\r\n    }\r\n    /**\r\n     * Custom function called before each terrain update.\r\n     * The value of reference is passed.\r\n     * Does nothing by default.\r\n     */\r\n    public beforeUpdate(refreshEveryFrame: boolean): void {\r\n      return\r\n    }\r\n    /**\r\n     * Custom function called after each terrain update.\r\n     * The value of refreshEveryFrame is passed.\r\n     * Does nothing by default.\r\n     */\r\n    public afterUpdate(refreshEveryFrame: boolean): void {\r\n      return\r\n    }\r\n  }\r\n// }\r\n","import { PropsHandler, PropertyUpdate, HasPropsHandlers, checkVector3Diff, checkColor3Diff, checkColor4Diff, checkControlDiff, checkPrimitiveDiff, checkNumericArrayDiff, checkObservableDiff, checkMethodDiff, checkFresnelParametersDiff, checkLambdaDiff, checkTextureDiff } from \"./PropsHandler\";\r\nimport { CreatedInstanceMetadata } from \"./CreatedInstance\";\r\nimport { FiberNodeProps, FiberTransformNodeProps, FiberAbstractMeshProps, FiberMeshProps, FiberCameraProps, FiberTargetCameraProps, FiberFreeCameraProps, FiberTouchCameraProps, FiberUniversalCameraProps, FiberGamepadCameraProps, FiberAnaglyphGamepadCameraProps, FiberStereoscopicGamepadCameraProps, FiberAnaglyphUniversalCameraProps, FiberStereoscopicUniversalCameraProps, FiberDeviceOrientationCameraProps, FiberVRDeviceOrientationFreeCameraProps, FiberVRDeviceOrientationGamepadCameraProps, FiberAnaglyphFreeCameraProps, FiberStereoscopicFreeCameraProps, FiberVirtualJoysticksCameraProps, FiberWebVRFreeCameraProps, FiberWebXRCameraProps, FiberArcRotateCameraProps, FiberAnaglyphArcRotateCameraProps, FiberStereoscopicArcRotateCameraProps, FiberVRDeviceOrientationArcRotateCameraProps, FiberFlyCameraProps, FiberFollowCameraProps, FiberArcFollowCameraProps, FiberMaterialProps, FiberShaderMaterialProps, FiberMultiMaterialProps, FiberPushMaterialProps, FiberStandardMaterialProps, FiberBackgroundMaterialProps, FiberPBRBaseMaterialProps, FiberPBRBaseSimpleMaterialProps, FiberPBRMetallicRoughnessMaterialProps, FiberPBRSpecularGlossinessMaterialProps, FiberPBRMaterialProps, FiberNodeMaterialProps, FiberFluentMaterialProps, FiberLightProps, FiberShadowLightProps, FiberDirectionalLightProps, FiberPointLightProps, FiberSpotLightProps, FiberHemisphericLightProps, FiberControlProps, FiberContainerProps, FiberRectangleProps, FiberButtonProps, FiberSelectionPanelProps, FiberScrollViewerProps, FiberStackPanelProps, FiberVirtualKeyboardProps, FiberEllipseProps, FiberGridProps, Fiber_ScrollViewerWindowProps, FiberTextBlockProps, FiberImageProps, FiberCheckboxProps, FiberColorPickerProps, FiberInputTextProps, FiberInputPasswordProps, FiberLineProps, FiberMultiLineProps, FiberRadioButtonProps, FiberBaseSliderProps, FiberScrollBarProps, FiberImageScrollBarProps, FiberSliderProps, FiberImageBasedSliderProps, FiberDisplayGridProps, FiberControl3DProps, FiberContainer3DProps, FiberVolumeBasedPanelProps, FiberCylinderPanelProps, FiberPlanePanelProps, FiberScatterPanelProps, FiberSpherePanelProps, FiberStackPanel3DProps, FiberAbstractButton3DProps, FiberButton3DProps, FiberHolographicButtonProps, FiberMeshButton3DProps, FiberEffectLayerProps, FiberGlowLayerProps, FiberHighlightLayerProps, FiberBaseTextureProps, FiberCubeTextureProps, FiberRawCubeTextureProps, FiberTextureProps, FiberRawTextureProps, FiberProceduralTextureProps, FiberCustomProceduralTextureProps, FiberNoiseProceduralTextureProps, FiberRenderTargetTextureProps, FiberMirrorTextureProps, FiberMultiRenderTargetProps, FiberRefractionTextureProps, FiberMultiviewRenderTargetProps, FiberVideoTextureProps, FiberDynamicTextureProps, FiberAdvancedDynamicTextureProps, FiberRawTexture3DProps, FiberRawTexture2DArrayProps, FiberColorGradingTextureProps, FiberEquiRectangularCubeTextureProps, FiberHDRCubeTextureProps, FiberHtmlElementTextureProps, FiberGUI3DManagerProps, FiberShadowGeneratorProps, FiberEnvironmentHelperProps, FiberPhysicsImpostorProps, FiberVRExperienceHelperProps, FiberDynamicTerrainProps, FiberAutoRotationBehaviorProps, FiberBouncingBehaviorProps, FiberFramingBehaviorProps, FiberAttachToBoxBehaviorProps, FiberFadeInOutBehaviorProps, FiberMultiPointerScaleBehaviorProps, FiberPointerDragBehaviorProps, FiberSixDofDragBehaviorProps, FiberSceneProps } from \"./generatedProps\";\r\nimport { DynamicTerrain as ExtensionsDynamicTerrain } from \"./extensions/DynamicTerrain\";\r\nimport { AbstractScene as BabylonjsCoreAbstractScene } from \"@babylonjs/core/abstractScene\";\r\nimport { Node as BabylonjsCoreNode } from \"@babylonjs/core/node\";\r\nimport { Scene as BabylonjsCoreScene } from \"@babylonjs/core/scene\";\r\nimport { Camera as BabylonjsCoreCamera } from \"@babylonjs/core/Cameras/camera\";\r\nimport { DebugLayerTab as BabylonjsCoreDebugLayerTab } from \"@babylonjs/core/Debug/debugLayer\";\r\nimport { DualShockButton as BabylonjsCoreDualShockButton, DualShockDpad as BabylonjsCoreDualShockDpad } from \"@babylonjs/core/Gamepads/dualShockGamepad\";\r\nimport { Xbox360Button as BabylonjsCoreXbox360Button, Xbox360Dpad as BabylonjsCoreXbox360Dpad } from \"@babylonjs/core/Gamepads/xboxGamepad\";\r\nimport { EnvironmentHelper as BabylonjsCoreEnvironmentHelper, IEnvironmentHelperOptions as BabylonjsCoreIEnvironmentHelperOptions } from \"@babylonjs/core/Helpers/environmentHelper\";\r\nimport { EffectLayer as BabylonjsCoreEffectLayer } from \"@babylonjs/core/Layers/effectLayer\";\r\nimport { Light as BabylonjsCoreLight } from \"@babylonjs/core/Lights/light\";\r\nimport { SceneLoaderAnimationGroupLoadingMode as BabylonjsCoreSceneLoaderAnimationGroupLoadingMode } from \"@babylonjs/core/Loading/sceneLoader\";\r\nimport { Material as BabylonjsCoreMaterial } from \"@babylonjs/core/Materials/material\";\r\nimport { Space as BabylonjsCoreSpace } from \"@babylonjs/core/Maths/math.axis\";\r\nimport { Orientation as BabylonjsCoreOrientation } from \"@babylonjs/core/Maths/math.path\";\r\nimport { Mesh as BabylonjsCoreMesh } from \"@babylonjs/core/Meshes/mesh\";\r\nimport { MeshBuilder as BabylonjsCoreMeshBuilder } from \"@babylonjs/core/Meshes/meshBuilder\";\r\nimport { AssetTaskState as BabylonjsCoreAssetTaskState } from \"@babylonjs/core/Misc/assetsManager\";\r\nimport { InspectableType as BabylonjsCoreInspectableType, IInspectable as BabylonjsCoreIInspectable } from \"@babylonjs/core/Misc/iInspectable\";\r\nimport { JoystickAxis as BabylonjsCoreJoystickAxis } from \"@babylonjs/core/Misc/virtualJoystick\";\r\nimport { PointColor as BabylonjsCorePointColor } from \"@babylonjs/core/Particles/pointsCloudSystem\";\r\nimport { SubEmitterType as BabylonjsCoreSubEmitterType } from \"@babylonjs/core/Particles/subEmitter\";\r\nimport { PhysicsRadialImpulseFalloff as BabylonjsCorePhysicsRadialImpulseFalloff, PhysicsUpdraftMode as BabylonjsCorePhysicsUpdraftMode } from \"@babylonjs/core/Physics/physicsHelper\";\r\nimport { PhysicsImpostor as BabylonjsCorePhysicsImpostor, IPhysicsEnabledObject as BabylonjsCoreIPhysicsEnabledObject, PhysicsImpostorParameters as BabylonjsCorePhysicsImpostorParameters } from \"@babylonjs/core/Physics/physicsImpostor\";\r\nimport { DepthOfFieldEffectBlurLevel as BabylonjsCoreDepthOfFieldEffectBlurLevel } from \"@babylonjs/core/PostProcesses/depthOfFieldEffect\";\r\nimport { TonemappingOperator as BabylonjsCoreTonemappingOperator } from \"@babylonjs/core/PostProcesses/tonemapPostProcess\";\r\nimport { WebXRState as BabylonjsCoreWebXRState } from \"@babylonjs/core/XR/webXRTypes\";\r\nimport { AdvancedDynamicTexture as BabylonjsGuiAdvancedDynamicTexture, IFocusableControl as BabylonjsGuiIFocusableControl } from \"@babylonjs/gui/2D/advancedDynamicTexture\";\r\nimport { GUI3DManager as BabylonjsGuiGUI3DManager } from \"@babylonjs/gui/3D/gui3DManager\";\r\nimport { AutoRotationBehavior as BabylonjsCoreAutoRotationBehavior } from \"@babylonjs/core/Behaviors/Cameras/autoRotationBehavior\";\r\nimport { BouncingBehavior as BabylonjsCoreBouncingBehavior } from \"@babylonjs/core/Behaviors/Cameras/bouncingBehavior\";\r\nimport { FramingBehavior as BabylonjsCoreFramingBehavior } from \"@babylonjs/core/Behaviors/Cameras/framingBehavior\";\r\nimport { AttachToBoxBehavior as BabylonjsCoreAttachToBoxBehavior } from \"@babylonjs/core/Behaviors/Meshes/attachToBoxBehavior\";\r\nimport { FadeInOutBehavior as BabylonjsCoreFadeInOutBehavior } from \"@babylonjs/core/Behaviors/Meshes/fadeInOutBehavior\";\r\nimport { MultiPointerScaleBehavior as BabylonjsCoreMultiPointerScaleBehavior } from \"@babylonjs/core/Behaviors/Meshes/multiPointerScaleBehavior\";\r\nimport { PointerDragBehavior as BabylonjsCorePointerDragBehavior } from \"@babylonjs/core/Behaviors/Meshes/pointerDragBehavior\";\r\nimport { SixDofDragBehavior as BabylonjsCoreSixDofDragBehavior } from \"@babylonjs/core/Behaviors/Meshes/sixDofDragBehavior\";\r\nimport { VRExperienceHelper as BabylonjsCoreVRExperienceHelper, OnAfterEnteringVRObservableEvent as BabylonjsCoreOnAfterEnteringVRObservableEvent, VRExperienceHelperOptions as BabylonjsCoreVRExperienceHelperOptions } from \"@babylonjs/core/Cameras/VR/vrExperienceHelper\";\r\nimport { PoseEnabledControllerType as BabylonjsCorePoseEnabledControllerType } from \"@babylonjs/core/Gamepads/Controllers/poseEnabledController\";\r\nimport { ShadowGenerator as BabylonjsCoreShadowGenerator, ICustomShaderOptions as BabylonjsCoreICustomShaderOptions } from \"@babylonjs/core/Lights/Shadows/shadowGenerator\";\r\nimport { NodeMaterialConnectionPointCompatibilityStates as BabylonjsCoreNodeMaterialConnectionPointCompatibilityStates, NodeMaterialConnectionPointDirection as BabylonjsCoreNodeMaterialConnectionPointDirection } from \"@babylonjs/core/Materials/Node/nodeMaterialBlockConnectionPoint\";\r\nimport { BaseTexture as BabylonjsCoreBaseTexture } from \"@babylonjs/core/Materials/Textures/baseTexture\";\r\nimport { InternalTextureSource as BabylonjsCoreInternalTextureSource } from \"@babylonjs/core/Materials/Textures/internalTexture\";\r\nimport { Control as BabylonjsGuiControl } from \"@babylonjs/gui/2D/controls/control\";\r\nimport { TextWrapping as BabylonjsGuiTextWrapping, TextBlock as BabylonjsGuiTextBlock } from \"@babylonjs/gui/2D/controls/textBlock\";\r\nimport { Control3D as BabylonjsGuiControl3D } from \"@babylonjs/gui/3D/controls/control3D\";\r\nimport { TrigonometryBlockOperations as BabylonjsCoreTrigonometryBlockOperations } from \"@babylonjs/core/Materials/Node/Blocks/trigonometryBlock\";\r\nimport { WaveBlockKind as BabylonjsCoreWaveBlockKind } from \"@babylonjs/core/Materials/Node/Blocks/waveBlock\";\r\nimport { NodeMaterialBlockConnectionPointMode as BabylonjsCoreNodeMaterialBlockConnectionPointMode } from \"@babylonjs/core/Materials/Node/Enums/nodeMaterialBlockConnectionPointMode\";\r\nimport { NodeMaterialBlockConnectionPointTypes as BabylonjsCoreNodeMaterialBlockConnectionPointTypes } from \"@babylonjs/core/Materials/Node/Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport { NodeMaterialBlockTargets as BabylonjsCoreNodeMaterialBlockTargets } from \"@babylonjs/core/Materials/Node/Enums/nodeMaterialBlockTargets\";\r\nimport { NodeMaterialSystemValues as BabylonjsCoreNodeMaterialSystemValues } from \"@babylonjs/core/Materials/Node/Enums/nodeMaterialSystemValues\";\r\nimport { AnimatedInputBlockTypes as BabylonjsCoreAnimatedInputBlockTypes } from \"@babylonjs/core/Materials/Node/Blocks/Input/animatedInputBlockTypes\";\r\nimport { AnimationPropertiesOverride as BabylonjsCoreAnimationPropertiesOverride } from \"@babylonjs/core/Animations/animationPropertiesOverride\";\r\nimport { Animation as BabylonjsCoreAnimation } from \"@babylonjs/core/Animations/animation\";\r\nimport { Observable as BabylonjsCoreObservable } from \"@babylonjs/core/Misc/observable\";\r\nimport { Behavior as BabylonjsCoreBehavior } from \"@babylonjs/core/Behaviors/behavior\";\r\nimport { TransformNode as BabylonjsCoreTransformNode } from \"@babylonjs/core/Meshes/transformNode\";\r\nimport { Vector3 as BabylonjsCoreVector3, Quaternion as BabylonjsCoreQuaternion, Matrix as BabylonjsCoreMatrix, Vector2 as BabylonjsCoreVector2, Vector4 as BabylonjsCoreVector4 } from \"@babylonjs/core/Maths/math.vector\";\r\nimport { DeepImmutableObject as BabylonjsCoreDeepImmutableObject, IndicesArray as BabylonjsCoreIndicesArray, FloatArray as BabylonjsCoreFloatArray } from \"@babylonjs/core/types\";\r\nimport { AbstractMesh as BabylonjsCoreAbstractMesh } from \"@babylonjs/core/Meshes/abstractMesh\";\r\nimport { AbstractActionManager as BabylonjsCoreAbstractActionManager } from \"@babylonjs/core/Actions/abstractActionManager\";\r\nimport { Color4 as BabylonjsCoreColor4, Color3 as BabylonjsCoreColor3 } from \"@babylonjs/core/Maths/math.color\";\r\nimport { Skeleton as BabylonjsCoreSkeleton } from \"@babylonjs/core/Bones/skeleton\";\r\nimport { SubMesh as BabylonjsCoreSubMesh } from \"@babylonjs/core/Meshes/subMesh\";\r\nimport { BoundingInfo as BabylonjsCoreBoundingInfo } from \"@babylonjs/core/Culling/boundingInfo\";\r\nimport { InstancedMesh as BabylonjsCoreInstancedMesh } from \"@babylonjs/core/Meshes/instancedMesh\";\r\nimport { MorphTargetManager as BabylonjsCoreMorphTargetManager } from \"@babylonjs/core/Morph/morphTargetManager\";\r\nimport { VertexBuffer as BabylonjsCoreVertexBuffer } from \"@babylonjs/core/Meshes/buffer\";\r\nimport { RenderTargetTexture as BabylonjsCoreRenderTargetTexture } from \"@babylonjs/core/Materials/Textures/renderTargetTexture\";\r\nimport { CameraInputsManager as BabylonjsCoreCameraInputsManager } from \"@babylonjs/core/Cameras/cameraInputsManager\";\r\nimport { Viewport as BabylonjsCoreViewport } from \"@babylonjs/core/Maths/math.viewport\";\r\nimport { TargetCamera as BabylonjsCoreTargetCamera } from \"@babylonjs/core/Cameras/targetCamera\";\r\nimport { FreeCamera as BabylonjsCoreFreeCamera } from \"@babylonjs/core/Cameras/freeCamera\";\r\nimport { FreeCameraInputsManager as BabylonjsCoreFreeCameraInputsManager } from \"@babylonjs/core/Cameras/freeCameraInputsManager\";\r\nimport { TouchCamera as BabylonjsCoreTouchCamera } from \"@babylonjs/core/Cameras/touchCamera\";\r\nimport { UniversalCamera as BabylonjsCoreUniversalCamera } from \"@babylonjs/core/Cameras/universalCamera\";\r\nimport { GamepadCamera as BabylonjsCoreGamepadCamera } from \"@babylonjs/core/Cameras/gamepadCamera\";\r\nimport { AnaglyphGamepadCamera as BabylonjsCoreAnaglyphGamepadCamera } from \"@babylonjs/core/Cameras/Stereoscopic/anaglyphGamepadCamera\";\r\nimport { StereoscopicGamepadCamera as BabylonjsCoreStereoscopicGamepadCamera } from \"@babylonjs/core/Cameras/Stereoscopic/stereoscopicGamepadCamera\";\r\nimport { AnaglyphUniversalCamera as BabylonjsCoreAnaglyphUniversalCamera } from \"@babylonjs/core/Cameras/Stereoscopic/anaglyphUniversalCamera\";\r\nimport { StereoscopicUniversalCamera as BabylonjsCoreStereoscopicUniversalCamera } from \"@babylonjs/core/Cameras/Stereoscopic/stereoscopicUniversalCamera\";\r\nimport { DeviceOrientationCamera as BabylonjsCoreDeviceOrientationCamera } from \"@babylonjs/core/Cameras/deviceOrientationCamera\";\r\nimport { VRDeviceOrientationFreeCamera as BabylonjsCoreVRDeviceOrientationFreeCamera } from \"@babylonjs/core/Cameras/VR/vrDeviceOrientationFreeCamera\";\r\nimport { VRCameraMetrics as BabylonjsCoreVRCameraMetrics } from \"@babylonjs/core/Cameras/VR/vrCameraMetrics\";\r\nimport { VRDeviceOrientationGamepadCamera as BabylonjsCoreVRDeviceOrientationGamepadCamera } from \"@babylonjs/core/Cameras/VR/vrDeviceOrientationGamepadCamera\";\r\nimport { AnaglyphFreeCamera as BabylonjsCoreAnaglyphFreeCamera } from \"@babylonjs/core/Cameras/Stereoscopic/anaglyphFreeCamera\";\r\nimport { StereoscopicFreeCamera as BabylonjsCoreStereoscopicFreeCamera } from \"@babylonjs/core/Cameras/Stereoscopic/stereoscopicFreeCamera\";\r\nimport { VirtualJoysticksCamera as BabylonjsCoreVirtualJoysticksCamera } from \"@babylonjs/core/Cameras/virtualJoysticksCamera\";\r\nimport { WebVRFreeCamera as BabylonjsCoreWebVRFreeCamera, DevicePose as BabylonjsCoreDevicePose, WebVROptions as BabylonjsCoreWebVROptions } from \"@babylonjs/core/Cameras/VR/webVRCamera\";\r\nimport { WebVRController as BabylonjsCoreWebVRController } from \"@babylonjs/core/Gamepads/Controllers/webVRController\";\r\nimport { WebXRCamera as BabylonjsCoreWebXRCamera } from \"@babylonjs/core/XR/webXRCamera\";\r\nimport { WebXRSessionManager as BabylonjsCoreWebXRSessionManager } from \"@babylonjs/core/XR/webXRSessionManager\";\r\nimport { ArcRotateCamera as BabylonjsCoreArcRotateCamera } from \"@babylonjs/core/Cameras/arcRotateCamera\";\r\nimport { ArcRotateCameraInputsManager as BabylonjsCoreArcRotateCameraInputsManager } from \"@babylonjs/core/Cameras/arcRotateCameraInputsManager\";\r\nimport { AnaglyphArcRotateCamera as BabylonjsCoreAnaglyphArcRotateCamera } from \"@babylonjs/core/Cameras/Stereoscopic/anaglyphArcRotateCamera\";\r\nimport { StereoscopicArcRotateCamera as BabylonjsCoreStereoscopicArcRotateCamera } from \"@babylonjs/core/Cameras/Stereoscopic/stereoscopicArcRotateCamera\";\r\nimport { VRDeviceOrientationArcRotateCamera as BabylonjsCoreVRDeviceOrientationArcRotateCamera } from \"@babylonjs/core/Cameras/VR/vrDeviceOrientationArcRotateCamera\";\r\nimport { FlyCamera as BabylonjsCoreFlyCamera } from \"@babylonjs/core/Cameras/flyCamera\";\r\nimport { FlyCameraInputsManager as BabylonjsCoreFlyCameraInputsManager } from \"@babylonjs/core/Cameras/flyCameraInputsManager\";\r\nimport { FollowCamera as BabylonjsCoreFollowCamera, ArcFollowCamera as BabylonjsCoreArcFollowCamera } from \"@babylonjs/core/Cameras/followCamera\";\r\nimport { FollowCameraInputsManager as BabylonjsCoreFollowCameraInputsManager } from \"@babylonjs/core/Cameras/followCameraInputsManager\";\r\nimport { LinesMesh as BabylonjsCoreLinesMesh } from \"@babylonjs/core/Meshes/linesMesh\";\r\nimport { Plane as BabylonjsCorePlane } from \"@babylonjs/core/Maths/math.plane\";\r\nimport { GroundMesh as BabylonjsCoreGroundMesh } from \"@babylonjs/core/Meshes/groundMesh\";\r\nimport { SmartArray as BabylonjsCoreSmartArray, ISmartArrayLike as BabylonjsCoreISmartArrayLike } from \"@babylonjs/core/Misc/smartArray\";\r\nimport { Effect as BabylonjsCoreEffect } from \"@babylonjs/core/Materials/effect\";\r\nimport { ShaderMaterial as BabylonjsCoreShaderMaterial, IShaderMaterialOptions as BabylonjsCoreIShaderMaterialOptions } from \"@babylonjs/core/Materials/shaderMaterial\";\r\nimport { Texture as BabylonjsCoreTexture } from \"@babylonjs/core/Materials/Textures/texture\";\r\nimport { MultiMaterial as BabylonjsCoreMultiMaterial } from \"@babylonjs/core/Materials/multiMaterial\";\r\nimport { PushMaterial as BabylonjsCorePushMaterial } from \"@babylonjs/core/Materials/pushMaterial\";\r\nimport { StandardMaterial as BabylonjsCoreStandardMaterial, StandardMaterialDefines as BabylonjsCoreStandardMaterialDefines } from \"@babylonjs/core/Materials/standardMaterial\";\r\nimport { ColorCurves as BabylonjsCoreColorCurves } from \"@babylonjs/core/Materials/colorCurves\";\r\nimport { FresnelParameters as BabylonjsCoreFresnelParameters } from \"@babylonjs/core/Materials/fresnelParameters\";\r\nimport { ImageProcessingConfiguration as BabylonjsCoreImageProcessingConfiguration } from \"@babylonjs/core/Materials/imageProcessingConfiguration\";\r\nimport { BackgroundMaterial as BabylonjsCoreBackgroundMaterial } from \"@babylonjs/core/Materials/Background/backgroundMaterial\";\r\nimport { IShadowLight as BabylonjsCoreIShadowLight, ShadowLight as BabylonjsCoreShadowLight } from \"@babylonjs/core/Lights/shadowLight\";\r\nimport { PBRBaseMaterial as BabylonjsCorePBRBaseMaterial, PBRMaterialDefines as BabylonjsCorePBRMaterialDefines } from \"@babylonjs/core/Materials/PBR/pbrBaseMaterial\";\r\nimport { PBRBaseSimpleMaterial as BabylonjsCorePBRBaseSimpleMaterial } from \"@babylonjs/core/Materials/PBR/pbrBaseSimpleMaterial\";\r\nimport { PBRMetallicRoughnessMaterial as BabylonjsCorePBRMetallicRoughnessMaterial } from \"@babylonjs/core/Materials/PBR/pbrMetallicRoughnessMaterial\";\r\nimport { PBRSpecularGlossinessMaterial as BabylonjsCorePBRSpecularGlossinessMaterial } from \"@babylonjs/core/Materials/PBR/pbrSpecularGlossinessMaterial\";\r\nimport { PBRMaterial as BabylonjsCorePBRMaterial } from \"@babylonjs/core/Materials/PBR/pbrMaterial\";\r\nimport { NodeMaterial as BabylonjsCoreNodeMaterial, INodeMaterialOptions as BabylonjsCoreINodeMaterialOptions } from \"@babylonjs/core/Materials/Node/nodeMaterial\";\r\nimport { NodeMaterialBlock as BabylonjsCoreNodeMaterialBlock } from \"@babylonjs/core/Materials/Node/nodeMaterialBlock\";\r\nimport { FluentMaterial as BabylonjsGuiFluentMaterial } from \"@babylonjs/gui/3D/materials/fluentMaterial\";\r\nimport { DirectionalLight as BabylonjsCoreDirectionalLight } from \"@babylonjs/core/Lights/directionalLight\";\r\nimport { PointLight as BabylonjsCorePointLight } from \"@babylonjs/core/Lights/pointLight\";\r\nimport { SpotLight as BabylonjsCoreSpotLight } from \"@babylonjs/core/Lights/spotLight\";\r\nimport { HemisphericLight as BabylonjsCoreHemisphericLight } from \"@babylonjs/core/Lights/hemisphericLight\";\r\nimport { Vector2WithInfo as BabylonjsGuiVector2WithInfo } from \"@babylonjs/gui/2D/math2D\";\r\nimport { Container as BabylonjsGuiContainer } from \"@babylonjs/gui/2D/controls/container\";\r\nimport { Style as BabylonjsGuiStyle } from \"@babylonjs/gui/2D/style\";\r\nimport { Rectangle as BabylonjsGuiRectangle } from \"@babylonjs/gui/2D/controls/rectangle\";\r\nimport { Button as BabylonjsGuiButton } from \"@babylonjs/gui/2D/controls/button\";\r\nimport { SelectionPanel as BabylonjsGuiSelectionPanel, SelectorGroup as BabylonjsGuiSelectorGroup } from \"@babylonjs/gui/2D/controls/selector\";\r\nimport { ScrollViewer as BabylonjsGuiScrollViewer } from \"@babylonjs/gui/2D/controls/scrollViewers/scrollViewer\";\r\nimport { Image as BabylonjsGuiImage } from \"@babylonjs/gui/2D/controls/image\";\r\nimport { StackPanel as BabylonjsGuiStackPanel } from \"@babylonjs/gui/2D/controls/stackPanel\";\r\nimport { VirtualKeyboard as BabylonjsGuiVirtualKeyboard, KeyPropertySet as BabylonjsGuiKeyPropertySet } from \"@babylonjs/gui/2D/controls/virtualKeyboard\";\r\nimport { Ellipse as BabylonjsGuiEllipse } from \"@babylonjs/gui/2D/controls/ellipse\";\r\nimport { Grid as BabylonjsGuiGrid } from \"@babylonjs/gui/2D/controls/grid\";\r\nimport { _ScrollViewerWindow as BabylonjsGui_ScrollViewerWindow } from \"@babylonjs/gui/2D/controls/scrollViewers/scrollViewerWindow\";\r\nimport { Checkbox as BabylonjsGuiCheckbox } from \"@babylonjs/gui/2D/controls/checkbox\";\r\nimport { ColorPicker as BabylonjsGuiColorPicker } from \"@babylonjs/gui/2D/controls/colorpicker\";\r\nimport { InputText as BabylonjsGuiInputText } from \"@babylonjs/gui/2D/controls/inputText\";\r\nimport { InputPassword as BabylonjsGuiInputPassword } from \"@babylonjs/gui/2D/controls/inputPassword\";\r\nimport { Line as BabylonjsGuiLine } from \"@babylonjs/gui/2D/controls/line\";\r\nimport { MultiLine as BabylonjsGuiMultiLine } from \"@babylonjs/gui/2D/controls/multiLine\";\r\nimport { MultiLinePoint as BabylonjsGuiMultiLinePoint } from \"@babylonjs/gui/2D/multiLinePoint\";\r\nimport { RadioButton as BabylonjsGuiRadioButton } from \"@babylonjs/gui/2D/controls/radioButton\";\r\nimport { BaseSlider as BabylonjsGuiBaseSlider } from \"@babylonjs/gui/2D/controls/sliders/baseSlider\";\r\nimport { ScrollBar as BabylonjsGuiScrollBar } from \"@babylonjs/gui/2D/controls/sliders/scrollBar\";\r\nimport { ImageScrollBar as BabylonjsGuiImageScrollBar } from \"@babylonjs/gui/2D/controls/sliders/imageScrollBar\";\r\nimport { Slider as BabylonjsGuiSlider } from \"@babylonjs/gui/2D/controls/sliders/slider\";\r\nimport { ImageBasedSlider as BabylonjsGuiImageBasedSlider } from \"@babylonjs/gui/2D/controls/sliders/imageBasedSlider\";\r\nimport { DisplayGrid as BabylonjsGuiDisplayGrid } from \"@babylonjs/gui/2D/controls/displayGrid\";\r\nimport { Vector3WithInfo as BabylonjsGuiVector3WithInfo } from \"@babylonjs/gui/3D/vector3WithInfo\";\r\nimport { Container3D as BabylonjsGuiContainer3D } from \"@babylonjs/gui/3D/controls/container3D\";\r\nimport { VolumeBasedPanel as BabylonjsGuiVolumeBasedPanel } from \"@babylonjs/gui/3D/controls/volumeBasedPanel\";\r\nimport { CylinderPanel as BabylonjsGuiCylinderPanel } from \"@babylonjs/gui/3D/controls/cylinderPanel\";\r\nimport { PlanePanel as BabylonjsGuiPlanePanel } from \"@babylonjs/gui/3D/controls/planePanel\";\r\nimport { ScatterPanel as BabylonjsGuiScatterPanel } from \"@babylonjs/gui/3D/controls/scatterPanel\";\r\nimport { SpherePanel as BabylonjsGuiSpherePanel } from \"@babylonjs/gui/3D/controls/spherePanel\";\r\nimport { StackPanel3D as BabylonjsGuiStackPanel3D } from \"@babylonjs/gui/3D/controls/stackPanel3D\";\r\nimport { AbstractButton3D as BabylonjsGuiAbstractButton3D } from \"@babylonjs/gui/3D/controls/abstractButton3D\";\r\nimport { Button3D as BabylonjsGuiButton3D } from \"@babylonjs/gui/3D/controls/button3D\";\r\nimport { HolographicButton as BabylonjsGuiHolographicButton } from \"@babylonjs/gui/3D/controls/holographicButton\";\r\nimport { MeshButton3D as BabylonjsGuiMeshButton3D } from \"@babylonjs/gui/3D/controls/meshButton3D\";\r\nimport { GlowLayer as BabylonjsCoreGlowLayer, IGlowLayerOptions as BabylonjsCoreIGlowLayerOptions } from \"@babylonjs/core/Layers/glowLayer\";\r\nimport { HighlightLayer as BabylonjsCoreHighlightLayer, IHighlightLayerOptions as BabylonjsCoreIHighlightLayerOptions } from \"@babylonjs/core/Layers/highlightLayer\";\r\nimport { CubeTexture as BabylonjsCoreCubeTexture } from \"@babylonjs/core/Materials/Textures/cubeTexture\";\r\nimport { RawCubeTexture as BabylonjsCoreRawCubeTexture } from \"@babylonjs/core/Materials/Textures/rawCubeTexture\";\r\nimport { ThinEngine as BabylonjsCoreThinEngine } from \"@babylonjs/core/Engines/thinEngine\";\r\nimport { RawTexture as BabylonjsCoreRawTexture } from \"@babylonjs/core/Materials/Textures/rawTexture\";\r\nimport { ProceduralTexture as BabylonjsCoreProceduralTexture } from \"@babylonjs/core/Materials/Textures/Procedurals/proceduralTexture\";\r\nimport { CustomProceduralTexture as BabylonjsCoreCustomProceduralTexture } from \"@babylonjs/core/Materials/Textures/Procedurals/customProceduralTexture\";\r\nimport { NoiseProceduralTexture as BabylonjsCoreNoiseProceduralTexture } from \"@babylonjs/core/Materials/Textures/Procedurals/noiseProceduralTexture\";\r\nimport { Engine as BabylonjsCoreEngine } from \"@babylonjs/core/Engines/engine\";\r\nimport { PostProcess as BabylonjsCorePostProcess } from \"@babylonjs/core/PostProcesses/postProcess\";\r\nimport { MirrorTexture as BabylonjsCoreMirrorTexture } from \"@babylonjs/core/Materials/Textures/mirrorTexture\";\r\nimport { MultiRenderTarget as BabylonjsCoreMultiRenderTarget, IMultiRenderTargetOptions as BabylonjsCoreIMultiRenderTargetOptions } from \"@babylonjs/core/Materials/Textures/multiRenderTarget\";\r\nimport { RefractionTexture as BabylonjsCoreRefractionTexture } from \"@babylonjs/core/Materials/Textures/refractionTexture\";\r\nimport { MultiviewRenderTarget as BabylonjsCoreMultiviewRenderTarget } from \"@babylonjs/core/Materials/Textures/MultiviewRenderTarget\";\r\nimport { VideoTexture as BabylonjsCoreVideoTexture, VideoTextureSettings as BabylonjsCoreVideoTextureSettings } from \"@babylonjs/core/Materials/Textures/videoTexture\";\r\nimport { DynamicTexture as BabylonjsCoreDynamicTexture } from \"@babylonjs/core/Materials/Textures/dynamicTexture\";\r\nimport { ClipboardInfo as BabylonjsCoreClipboardInfo } from \"@babylonjs/core/Events/clipboardEvents\";\r\nimport { RawTexture3D as BabylonjsCoreRawTexture3D } from \"@babylonjs/core/Materials/Textures/rawTexture3D\";\r\nimport { RawTexture2DArray as BabylonjsCoreRawTexture2DArray } from \"@babylonjs/core/Materials/Textures/rawTexture2DArray\";\r\nimport { ColorGradingTexture as BabylonjsCoreColorGradingTexture } from \"@babylonjs/core/Materials/Textures/colorGradingTexture\";\r\nimport { EquiRectangularCubeTexture as BabylonjsCoreEquiRectangularCubeTexture } from \"@babylonjs/core/Materials/Textures/equiRectangularCubeTexture\";\r\nimport { HDRCubeTexture as BabylonjsCoreHDRCubeTexture } from \"@babylonjs/core/Materials/Textures/hdrCubeTexture\";\r\nimport { HtmlElementTexture as BabylonjsCoreHtmlElementTexture, IHtmlElementTextureOptions as BabylonjsCoreIHtmlElementTextureOptions } from \"@babylonjs/core/Materials/Textures/htmlElementTexture\";\r\nimport { PhysicsJoint as BabylonjsCorePhysicsJoint } from \"@babylonjs/core/Physics/physicsJoint\";\r\nimport { PickingInfo as BabylonjsCorePickingInfo } from \"@babylonjs/core/Collisions/pickingInfo\";\r\nimport { WebXRDefaultExperience as BabylonjsCoreWebXRDefaultExperience } from \"@babylonjs/core/XR/webXRDefaultExperience\";\r\nimport { SolidParticleSystem as BabylonjsCoreSolidParticleSystem } from \"@babylonjs/core/Particles/solidParticleSystem\";\r\nimport { Collider as BabylonjsCoreCollider } from \"@babylonjs/core/Collisions/collider\";\r\nimport { Ray as BabylonjsCoreRay } from \"@babylonjs/core/Culling/ray\";\r\nimport { IOfflineProvider as BabylonjsCoreIOfflineProvider } from \"@babylonjs/core/Offline/IOfflineProvider\";\r\nimport { RenderingGroupInfo as BabylonjsCoreRenderingGroupInfo } from \"@babylonjs/core/Rendering/renderingManager\";\r\nimport { Geometry as BabylonjsCoreGeometry } from \"@babylonjs/core/Meshes/geometry\";\r\nimport { KeyboardInfo as BabylonjsCoreKeyboardInfo, KeyboardInfoPre as BabylonjsCoreKeyboardInfoPre } from \"@babylonjs/core/Events/keyboardEvents\";\r\nimport { PointerEventTypes as BabylonjsCorePointerEventTypes, PointerInfo as BabylonjsCorePointerInfo, PointerInfoPre as BabylonjsCorePointerInfoPre } from \"@babylonjs/core/Events/pointerEvents\";\r\nimport { PostProcessManager as BabylonjsCorePostProcessManager } from \"@babylonjs/core/PostProcesses/postProcessManager\";\r\nimport { AnimationGroup as BabylonjsCoreAnimationGroup } from \"@babylonjs/core/Animations/animationGroup\";\r\nimport { IParticleSystem as BabylonjsCoreIParticleSystem } from \"@babylonjs/core/Particles/IParticleSystem\";\r\nimport { IPhysicsEnginePlugin as BabylonjsCoreIPhysicsEnginePlugin } from \"@babylonjs/core/Physics/IPhysicsEngine\";\r\n\r\nexport class FiberNodePropsHandler implements PropsHandler<FiberNodeProps> {\r\n    getPropertyUpdates(oldProps: FiberNodeProps, newProps: FiberNodeProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        // type: 'BabylonjsCoreAnimationPropertiesOverride' property (not coded) BabylonjsCoreNode.animationPropertiesOverride.\r\n        // type: 'BabylonjsCoreAnimation[]' property (not coded) BabylonjsCoreNode.animations.\r\n        checkPrimitiveDiff(oldProps.doNotSerialize, newProps.doNotSerialize, 'doNotSerialize', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.id, newProps.id, 'id', 'string', changedProps)\r\n        // type: 'BabylonjsCoreIInspectable[]' property (not coded) BabylonjsCoreNode.inspectableCustomProperties.\r\n        // type: 'any' property (not coded) BabylonjsCoreNode.metadata.\r\n        checkPrimitiveDiff(oldProps.name, newProps.name, 'name', 'string', changedProps)\r\n        checkLambdaDiff(oldProps.onDispose, newProps.onDispose, 'onDispose', '() => void', changedProps)\r\n        checkObservableDiff(oldProps.onDisposeObservable, newProps.onDisposeObservable, 'onDisposeObservable', 'BabylonjsCoreObservable<BabylonjsCoreNode>', changedProps)\r\n        checkLambdaDiff(oldProps.onReady, newProps.onReady, 'onReady', '(node: BabylonjsCoreNode) => void', changedProps)\r\n        // type: 'BabylonjsCoreNode' property (not coded) BabylonjsCoreNode.parent.\r\n        // type: 'any' property (not coded) BabylonjsCoreNode.reservedDataStore.\r\n        checkPrimitiveDiff(oldProps.state, newProps.state, 'state', 'string', changedProps)\r\n        checkPrimitiveDiff(oldProps.uniqueId, newProps.uniqueId, 'uniqueId', 'number', changedProps)\r\n        checkMethodDiff(oldProps.addBehavior, newProps.addBehavior, 'addBehavior', '(behavior?: BabylonjsCoreBehavior<BabylonjsCoreNode>, attachImmediately?: boolean) => BabylonjsCoreNode', changedProps)\r\n        checkMethodDiff(oldProps.setEnabled, newProps.setEnabled, 'setEnabled', '(value?: boolean) => void', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * Node is the basic class for all scene objects (Mesh, Light, Camera.)\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberNode implements HasPropsHandlers<FiberNodeProps> {\r\n    private propsHandlers: PropsHandler<FiberNodeProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberNodePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberNodeProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberNodeProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"Node\",\r\n        \"namespace\": \"@babylonjs/core/Meshes/mesh\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isNode\": true,\r\n        \"className\": \"FiberNode\"\r\n    };\r\n}\r\n\r\nexport class FiberTransformNodePropsHandler implements PropsHandler<FiberTransformNodeProps> {\r\n    getPropertyUpdates(oldProps: FiberTransformNodeProps, newProps: FiberTransformNodeProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.billboardMode, newProps.billboardMode, 'billboardMode', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.ignoreNonUniformScaling, newProps.ignoreNonUniformScaling, 'ignoreNonUniformScaling', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.infiniteDistance, newProps.infiniteDistance, 'infiniteDistance', 'boolean', changedProps)\r\n        checkObservableDiff(oldProps.onAfterWorldMatrixUpdateObservable, newProps.onAfterWorldMatrixUpdateObservable, 'onAfterWorldMatrixUpdateObservable', 'BabylonjsCoreObservable<BabylonjsCoreTransformNode>', changedProps)\r\n        checkVector3Diff(oldProps.position, newProps.position, 'position', 'BabylonjsCoreVector3', changedProps)\r\n        checkPrimitiveDiff(oldProps.preserveParentRotationForBillboard, newProps.preserveParentRotationForBillboard, 'preserveParentRotationForBillboard', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.reIntegrateRotationIntoRotationQuaternion, newProps.reIntegrateRotationIntoRotationQuaternion, 'reIntegrateRotationIntoRotationQuaternion', 'boolean', changedProps)\r\n        checkVector3Diff(oldProps.rotation, newProps.rotation, 'rotation', 'BabylonjsCoreVector3', changedProps)\r\n        // type: 'BabylonjsCoreQuaternion' property (not coded) BabylonjsCoreTransformNode.rotationQuaternion.\r\n        checkVector3Diff(oldProps.scaling, newProps.scaling, 'scaling', 'BabylonjsCoreVector3', changedProps)\r\n        checkPrimitiveDiff(oldProps.scalingDeterminant, newProps.scalingDeterminant, 'scalingDeterminant', 'number', changedProps)\r\n        checkMethodDiff(oldProps.addRotation, newProps.addRotation, 'addRotation', '(x?: number, y?: number, z?: number) => BabylonjsCoreTransformNode', changedProps)\r\n        checkMethodDiff(oldProps.setAbsolutePosition, newProps.setAbsolutePosition, 'setAbsolutePosition', '(absolutePosition?: BabylonjsCoreVector3) => BabylonjsCoreTransformNode', changedProps)\r\n        checkMethodDiff(oldProps.setDirection, newProps.setDirection, 'setDirection', '(localAxis?: BabylonjsCoreVector3, yawCor?: number, pitchCor?: number, rollCor?: number) => BabylonjsCoreTransformNode', changedProps)\r\n        checkMethodDiff(oldProps.setParent, newProps.setParent, 'setParent', '(node?: BabylonjsCoreNode) => BabylonjsCoreTransformNode', changedProps)\r\n        checkMethodDiff(oldProps.setPivotMatrix, newProps.setPivotMatrix, 'setPivotMatrix', '(matrix?: BabylonjsCoreDeepImmutableObject<BabylonjsCoreMatrix>, postMultiplyPivotMatrix?: boolean) => BabylonjsCoreTransformNode', changedProps)\r\n        checkMethodDiff(oldProps.setPivotPoint, newProps.setPivotPoint, 'setPivotPoint', '(point?: BabylonjsCoreVector3, space?: BabylonjsCoreSpace) => BabylonjsCoreTransformNode', changedProps)\r\n        checkMethodDiff(oldProps.setPositionWithLocalVector, newProps.setPositionWithLocalVector, 'setPositionWithLocalVector', '(vector3?: BabylonjsCoreVector3) => BabylonjsCoreTransformNode', changedProps)\r\n        checkMethodDiff(oldProps.setPreTransformMatrix, newProps.setPreTransformMatrix, 'setPreTransformMatrix', '(matrix?: BabylonjsCoreMatrix) => BabylonjsCoreTransformNode', changedProps)\r\n        checkMethodDiff(oldProps.translate, newProps.translate, 'translate', '(axis?: BabylonjsCoreVector3, distance?: number, space?: BabylonjsCoreSpace) => BabylonjsCoreTransformNode', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * A TransformNode is an object that is not rendered but can be used as a center of transformation. This can decrease memory usage and increase rendering speed compared to using an empty mesh as a parent and is less complicated than using a pivot matrix.\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberTransformNode implements HasPropsHandlers<FiberNodeProps> {\r\n    private propsHandlers: PropsHandler<FiberNodeProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberTransformNodePropsHandler(),\r\n            new FiberNodePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberNodeProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberNodeProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"TransformNode\",\r\n        \"namespace\": \"@babylonjs/core/Meshes/mesh\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"isPure\",\r\n                \"type\": \"boolean\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isNode\": true,\r\n        \"className\": \"FiberTransformNode\"\r\n    };\r\n}\r\n\r\nexport class FiberAbstractMeshPropsHandler implements PropsHandler<FiberAbstractMeshProps> {\r\n    getPropertyUpdates(oldProps: FiberAbstractMeshProps, newProps: FiberAbstractMeshProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        // type: 'BabylonjsCoreAbstractActionManager' property (not coded) BabylonjsCoreAbstractMesh.actionManager.\r\n        checkPrimitiveDiff(oldProps.alphaIndex, newProps.alphaIndex, 'alphaIndex', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.alwaysSelectAsActiveMesh, newProps.alwaysSelectAsActiveMesh, 'alwaysSelectAsActiveMesh', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.applyFog, newProps.applyFog, 'applyFog', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.checkCollisions, newProps.checkCollisions, 'checkCollisions', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.collisionGroup, newProps.collisionGroup, 'collisionGroup', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.collisionMask, newProps.collisionMask, 'collisionMask', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.computeBonesUsingShaders, newProps.computeBonesUsingShaders, 'computeBonesUsingShaders', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.cullingStrategy, newProps.cullingStrategy, 'cullingStrategy', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.definedFacingForward, newProps.definedFacingForward, 'definedFacingForward', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.doNotSyncBoundingInfo, newProps.doNotSyncBoundingInfo, 'doNotSyncBoundingInfo', 'boolean', changedProps)\r\n        checkColor4Diff(oldProps.edgesColor, newProps.edgesColor, 'edgesColor', 'BabylonjsCoreColor4', changedProps)\r\n        checkPrimitiveDiff(oldProps.edgesWidth, newProps.edgesWidth, 'edgesWidth', 'number', changedProps)\r\n        checkVector3Diff(oldProps.ellipsoid, newProps.ellipsoid, 'ellipsoid', 'BabylonjsCoreVector3', changedProps)\r\n        checkVector3Diff(oldProps.ellipsoidOffset, newProps.ellipsoidOffset, 'ellipsoidOffset', 'BabylonjsCoreVector3', changedProps)\r\n        checkPrimitiveDiff(oldProps.enablePointerMoveEvents, newProps.enablePointerMoveEvents, 'enablePointerMoveEvents', 'boolean', changedProps)\r\n        checkVector3Diff(oldProps.facetDepthSortFrom, newProps.facetDepthSortFrom, 'facetDepthSortFrom', 'BabylonjsCoreVector3', changedProps)\r\n        checkPrimitiveDiff(oldProps.hasVertexAlpha, newProps.hasVertexAlpha, 'hasVertexAlpha', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.isBlocker, newProps.isBlocker, 'isBlocker', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.isPickable, newProps.isPickable, 'isPickable', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.isVisible, newProps.isVisible, 'isVisible', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.layerMask, newProps.layerMask, 'layerMask', 'number', changedProps)\r\n        // type: 'BabylonjsCoreMaterial' property (not coded) BabylonjsCoreAbstractMesh.material.\r\n        checkPrimitiveDiff(oldProps.mustDepthSortFacets, newProps.mustDepthSortFacets, 'mustDepthSortFacets', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.numBoneInfluencers, newProps.numBoneInfluencers, 'numBoneInfluencers', 'number', changedProps)\r\n        checkLambdaDiff(oldProps.onCollide, newProps.onCollide, 'onCollide', '() => void', changedProps)\r\n        checkObservableDiff(oldProps.onCollideObservable, newProps.onCollideObservable, 'onCollideObservable', 'BabylonjsCoreObservable<BabylonjsCoreAbstractMesh>', changedProps)\r\n        checkLambdaDiff(oldProps.onCollisionPositionChange, newProps.onCollisionPositionChange, 'onCollisionPositionChange', '() => void', changedProps)\r\n        checkObservableDiff(oldProps.onCollisionPositionChangeObservable, newProps.onCollisionPositionChangeObservable, 'onCollisionPositionChangeObservable', 'BabylonjsCoreObservable<BabylonjsCoreVector3>', changedProps)\r\n        checkObservableDiff(oldProps.onMaterialChangedObservable, newProps.onMaterialChangedObservable, 'onMaterialChangedObservable', 'BabylonjsCoreObservable<BabylonjsCoreAbstractMesh>', changedProps)\r\n        checkObservableDiff(oldProps.onRebuildObservable, newProps.onRebuildObservable, 'onRebuildObservable', 'BabylonjsCoreObservable<BabylonjsCoreAbstractMesh>', changedProps)\r\n        checkColor3Diff(oldProps.outlineColor, newProps.outlineColor, 'outlineColor', 'BabylonjsCoreColor3', changedProps)\r\n        checkPrimitiveDiff(oldProps.outlineWidth, newProps.outlineWidth, 'outlineWidth', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.overlayAlpha, newProps.overlayAlpha, 'overlayAlpha', 'number', changedProps)\r\n        checkColor3Diff(oldProps.overlayColor, newProps.overlayColor, 'overlayColor', 'BabylonjsCoreColor3', changedProps)\r\n        checkPrimitiveDiff(oldProps.partitioningBBoxRatio, newProps.partitioningBBoxRatio, 'partitioningBBoxRatio', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.partitioningSubdivisions, newProps.partitioningSubdivisions, 'partitioningSubdivisions', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.receiveShadows, newProps.receiveShadows, 'receiveShadows', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.renderingGroupId, newProps.renderingGroupId, 'renderingGroupId', 'number', changedProps)\r\n        checkVector3Diff(oldProps.scaling, newProps.scaling, 'scaling', 'BabylonjsCoreVector3', changedProps)\r\n        checkPrimitiveDiff(oldProps.showSubMeshesBoundingBox, newProps.showSubMeshesBoundingBox, 'showSubMeshesBoundingBox', 'boolean', changedProps)\r\n        // type: 'BabylonjsCoreSkeleton' property (not coded) BabylonjsCoreAbstractMesh.skeleton.\r\n        // type: 'BabylonjsCoreSubMesh[]' property (not coded) BabylonjsCoreAbstractMesh.subMeshes.\r\n        checkPrimitiveDiff(oldProps.useOctreeForCollisions, newProps.useOctreeForCollisions, 'useOctreeForCollisions', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.useOctreeForPicking, newProps.useOctreeForPicking, 'useOctreeForPicking', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.useOctreeForRenderingSelection, newProps.useOctreeForRenderingSelection, 'useOctreeForRenderingSelection', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.useVertexColors, newProps.useVertexColors, 'useVertexColors', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.visibility, newProps.visibility, 'visibility', 'number', changedProps)\r\n        checkMethodDiff(oldProps.addChild, newProps.addChild, 'addChild', '(mesh?: BabylonjsCoreAbstractMesh) => BabylonjsCoreAbstractMesh', changedProps)\r\n        checkMethodDiff(oldProps.setBoundingInfo, newProps.setBoundingInfo, 'setBoundingInfo', '(boundingInfo?: BabylonjsCoreBoundingInfo) => BabylonjsCoreAbstractMesh', changedProps)\r\n        checkMethodDiff(oldProps.setIndices, newProps.setIndices, 'setIndices', '(indices?: BabylonjsCoreIndicesArray, totalVertices?: number) => BabylonjsCoreAbstractMesh', changedProps)\r\n        checkMethodDiff(oldProps.setVerticesData, newProps.setVerticesData, 'setVerticesData', '(kind?: string, data?: BabylonjsCoreFloatArray, updatable?: boolean, stride?: number) => BabylonjsCoreAbstractMesh', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to store all common mesh properties\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberAbstractMesh implements HasPropsHandlers<FiberTransformNodeProps> {\r\n    private propsHandlers: PropsHandler<FiberTransformNodeProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberAbstractMeshPropsHandler(),\r\n            new FiberTransformNodePropsHandler(),\r\n            new FiberNodePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberTransformNodeProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberTransformNodeProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"AbstractMesh\",\r\n        \"namespace\": \"@babylonjs/core/Meshes/mesh\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isNode\": true,\r\n        \"className\": \"FiberAbstractMesh\"\r\n    };\r\n}\r\n\r\nexport class FiberMeshPropsHandler implements PropsHandler<FiberMeshProps> {\r\n    getPropertyUpdates(oldProps: FiberMeshProps, newProps: FiberMeshProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.delayLoadingFile, newProps.delayLoadingFile, 'delayLoadingFile', 'string', changedProps)\r\n        checkPrimitiveDiff(oldProps.delayLoadState, newProps.delayLoadState, 'delayLoadState', 'number', changedProps)\r\n        // type: 'BabylonjsCoreInstancedMesh[]' property (not coded) BabylonjsCoreMesh.instances.\r\n        checkPrimitiveDiff(oldProps.isUnIndexed, newProps.isUnIndexed, 'isUnIndexed', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.manualUpdateOfWorldMatrixInstancedBuffer, newProps.manualUpdateOfWorldMatrixInstancedBuffer, 'manualUpdateOfWorldMatrixInstancedBuffer', 'boolean', changedProps)\r\n        // type: 'BabylonjsCoreMorphTargetManager' property (not coded) BabylonjsCoreMesh.morphTargetManager.\r\n        // type: 'any' property (not coded) BabylonjsCoreMesh.normalizeSkinFourWeights.\r\n        // type: 'any' property (not coded) BabylonjsCoreMesh.normalizeSkinWeightsAndExtra.\r\n        checkLambdaDiff(oldProps.onBeforeDraw, newProps.onBeforeDraw, 'onBeforeDraw', '() => void', changedProps)\r\n        checkLambdaDiff(oldProps.onLODLevelSelection, newProps.onLODLevelSelection, 'onLODLevelSelection', '(distance: number, mesh: BabylonjsCoreMesh, selectedLevel: BabylonjsCoreMesh) => void', changedProps)\r\n        checkPrimitiveDiff(oldProps.overrideMaterialSideOrientation, newProps.overrideMaterialSideOrientation, 'overrideMaterialSideOrientation', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.overridenInstanceCount, newProps.overridenInstanceCount, 'overridenInstanceCount', 'number', changedProps)\r\n        checkMethodDiff(oldProps.addInstance, newProps.addInstance, 'addInstance', '(instance?: BabylonjsCoreInstancedMesh) => void', changedProps)\r\n        checkMethodDiff(oldProps.addLODLevel, newProps.addLODLevel, 'addLODLevel', '(distance?: number, mesh?: BabylonjsCoreMesh) => BabylonjsCoreMesh', changedProps)\r\n        checkMethodDiff(oldProps.setIndices, newProps.setIndices, 'setIndices', '(indices?: BabylonjsCoreIndicesArray, totalVertices?: number, updatable?: boolean) => BabylonjsCoreAbstractMesh', changedProps)\r\n        checkMethodDiff(oldProps.setMaterialByID, newProps.setMaterialByID, 'setMaterialByID', '(id?: string) => BabylonjsCoreMesh', changedProps)\r\n        checkMethodDiff(oldProps.setVerticesBuffer, newProps.setVerticesBuffer, 'setVerticesBuffer', '(buffer?: BabylonjsCoreVertexBuffer) => BabylonjsCoreMesh', changedProps)\r\n        checkMethodDiff(oldProps.setVerticesData, newProps.setVerticesData, 'setVerticesData', '(kind?: string, data?: BabylonjsCoreFloatArray, updatable?: boolean, stride?: number) => BabylonjsCoreAbstractMesh', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to represent renderable models\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberMesh implements HasPropsHandlers<FiberAbstractMeshProps> {\r\n    private propsHandlers: PropsHandler<FiberAbstractMeshProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberMeshPropsHandler(),\r\n            new FiberAbstractMeshPropsHandler(),\r\n            new FiberTransformNodePropsHandler(),\r\n            new FiberNodePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberAbstractMeshProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberAbstractMeshProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"Mesh\",\r\n        \"namespace\": \"@babylonjs/core/Meshes/mesh\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"parent\",\r\n                \"type\": \"BabylonjsCoreNode\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"source\",\r\n                \"type\": \"BabylonjsCoreMesh\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"doNotCloneChildren\",\r\n                \"type\": \"boolean\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"clonePhysicsImpostor\",\r\n                \"type\": \"boolean\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isNode\": true,\r\n        \"className\": \"FiberMesh\"\r\n    };\r\n}\r\n\r\nexport class FiberCameraPropsHandler implements PropsHandler<FiberCameraProps> {\r\n    getPropertyUpdates(oldProps: FiberCameraProps, newProps: FiberCameraProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.cameraRigMode, newProps.cameraRigMode, 'cameraRigMode', 'number', changedProps)\r\n        // type: 'BabylonjsCoreRenderTargetTexture[]' property (not coded) BabylonjsCoreCamera.customRenderTargets.\r\n        checkPrimitiveDiff(oldProps.fov, newProps.fov, 'fov', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.fovMode, newProps.fovMode, 'fovMode', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.inertia, newProps.inertia, 'inertia', 'number', changedProps)\r\n        // type: 'BabylonjsCoreCameraInputsManager<BabylonjsCoreCamera>' property (not coded) BabylonjsCoreCamera.inputs.\r\n        checkPrimitiveDiff(oldProps.interaxialDistance, newProps.interaxialDistance, 'interaxialDistance', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.isIntermediate, newProps.isIntermediate, 'isIntermediate', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.isRigCamera, newProps.isRigCamera, 'isRigCamera', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.isStereoscopicSideBySide, newProps.isStereoscopicSideBySide, 'isStereoscopicSideBySide', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.layerMask, newProps.layerMask, 'layerMask', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.maxZ, newProps.maxZ, 'maxZ', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.minZ, newProps.minZ, 'minZ', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.mode, newProps.mode, 'mode', 'number', changedProps)\r\n        checkObservableDiff(oldProps.onAfterCheckInputsObservable, newProps.onAfterCheckInputsObservable, 'onAfterCheckInputsObservable', 'BabylonjsCoreObservable<BabylonjsCoreCamera>', changedProps)\r\n        checkObservableDiff(oldProps.onProjectionMatrixChangedObservable, newProps.onProjectionMatrixChangedObservable, 'onProjectionMatrixChangedObservable', 'BabylonjsCoreObservable<BabylonjsCoreCamera>', changedProps)\r\n        checkObservableDiff(oldProps.onRestoreStateObservable, newProps.onRestoreStateObservable, 'onRestoreStateObservable', 'BabylonjsCoreObservable<BabylonjsCoreCamera>', changedProps)\r\n        checkObservableDiff(oldProps.onViewMatrixChangedObservable, newProps.onViewMatrixChangedObservable, 'onViewMatrixChangedObservable', 'BabylonjsCoreObservable<BabylonjsCoreCamera>', changedProps)\r\n        checkPrimitiveDiff(oldProps.orthoBottom, newProps.orthoBottom, 'orthoBottom', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.orthoLeft, newProps.orthoLeft, 'orthoLeft', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.orthoRight, newProps.orthoRight, 'orthoRight', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.orthoTop, newProps.orthoTop, 'orthoTop', 'number', changedProps)\r\n        // type: 'BabylonjsCoreRenderTargetTexture' property (not coded) BabylonjsCoreCamera.outputRenderTarget.\r\n        checkVector3Diff(oldProps.position, newProps.position, 'position', 'BabylonjsCoreVector3', changedProps)\r\n        // type: 'BabylonjsCoreCamera' property (not coded) BabylonjsCoreCamera.rigParent.\r\n        checkVector3Diff(oldProps.upVector, newProps.upVector, 'upVector', 'BabylonjsCoreVector3', changedProps)\r\n        // type: 'BabylonjsCoreViewport' property (not coded) BabylonjsCoreCamera.viewport.\r\n        checkMethodDiff(oldProps.setCameraRigMode, newProps.setCameraRigMode, 'setCameraRigMode', '(mode?: number, rigParams?: any) => void', changedProps)\r\n        checkMethodDiff(oldProps.setCameraRigParameter, newProps.setCameraRigParameter, 'setCameraRigParameter', '(name?: string, value?: any) => void', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * This is the base class of all the camera used in the application.\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberCamera implements HasPropsHandlers<FiberCameraProps> {\r\n    public readonly isTargetable = false;\r\n    private propsHandlers: PropsHandler<FiberCameraProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberCameraPropsHandler(),\r\n            new FiberNodePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberCameraProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberCameraProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"Camera\",\r\n        \"namespace\": \"@babylonjs/core/Cameras/camera\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"position\",\r\n                \"type\": \"BabylonjsCoreVector3\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"setActiveOnSceneIfNoneActive\",\r\n                \"type\": \"boolean\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isCamera\": true,\r\n        \"isNode\": true,\r\n        \"className\": \"FiberCamera\"\r\n    };\r\n}\r\n\r\nexport class FiberTargetCameraPropsHandler implements PropsHandler<FiberTargetCameraProps> {\r\n    getPropertyUpdates(oldProps: FiberTargetCameraProps, newProps: FiberTargetCameraProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkVector3Diff(oldProps.cameraDirection, newProps.cameraDirection, 'cameraDirection', 'BabylonjsCoreVector3', changedProps)\r\n        // type: 'BabylonjsCoreVector2' property (not coded) BabylonjsCoreTargetCamera.cameraRotation.\r\n        // type: 'any' property (not coded) BabylonjsCoreTargetCamera.lockedTarget.\r\n        checkPrimitiveDiff(oldProps.noRotationConstraint, newProps.noRotationConstraint, 'noRotationConstraint', 'boolean', changedProps)\r\n        checkVector3Diff(oldProps.rotation, newProps.rotation, 'rotation', 'BabylonjsCoreVector3', changedProps)\r\n        // type: 'BabylonjsCoreQuaternion' property (not coded) BabylonjsCoreTargetCamera.rotationQuaternion.\r\n        checkPrimitiveDiff(oldProps.speed, newProps.speed, 'speed', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.updateUpVectorFromRotation, newProps.updateUpVectorFromRotation, 'updateUpVectorFromRotation', 'boolean', changedProps)\r\n        checkMethodDiff(oldProps.setTarget, newProps.setTarget, 'setTarget', '(target?: BabylonjsCoreVector3) => void', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * A target camera takes a mesh or position as a target and continues to look at it while it moves.\r\n * This is the base of the follow, arc rotate cameras and Free camera\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberTargetCamera implements HasPropsHandlers<FiberCameraProps> {\r\n    public readonly isTargetable = true;\r\n    private propsHandlers: PropsHandler<FiberCameraProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberTargetCameraPropsHandler(),\r\n            new FiberCameraPropsHandler(),\r\n            new FiberNodePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberCameraProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberCameraProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"TargetCamera\",\r\n        \"namespace\": \"@babylonjs/core/Cameras/camera\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"position\",\r\n                \"type\": \"BabylonjsCoreVector3\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"setActiveOnSceneIfNoneActive\",\r\n                \"type\": \"boolean\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isCamera\": true,\r\n        \"isNode\": true,\r\n        \"className\": \"FiberTargetCamera\"\r\n    };\r\n}\r\n\r\nexport class FiberFreeCameraPropsHandler implements PropsHandler<FiberFreeCameraProps> {\r\n    getPropertyUpdates(oldProps: FiberFreeCameraProps, newProps: FiberFreeCameraProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.angularSensibility, newProps.angularSensibility, 'angularSensibility', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.applyGravity, newProps.applyGravity, 'applyGravity', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.checkCollisions, newProps.checkCollisions, 'checkCollisions', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.collisionMask, newProps.collisionMask, 'collisionMask', 'number', changedProps)\r\n        checkVector3Diff(oldProps.ellipsoid, newProps.ellipsoid, 'ellipsoid', 'BabylonjsCoreVector3', changedProps)\r\n        checkVector3Diff(oldProps.ellipsoidOffset, newProps.ellipsoidOffset, 'ellipsoidOffset', 'BabylonjsCoreVector3', changedProps)\r\n        // type: 'BabylonjsCoreFreeCameraInputsManager' property (not coded) BabylonjsCoreFreeCamera.inputs.\r\n        checkNumericArrayDiff(oldProps.keysDown, newProps.keysDown, 'keysDown', 'number[]', changedProps)\r\n        checkNumericArrayDiff(oldProps.keysLeft, newProps.keysLeft, 'keysLeft', 'number[]', changedProps)\r\n        checkNumericArrayDiff(oldProps.keysRight, newProps.keysRight, 'keysRight', 'number[]', changedProps)\r\n        checkNumericArrayDiff(oldProps.keysUp, newProps.keysUp, 'keysUp', 'number[]', changedProps)\r\n        checkLambdaDiff(oldProps.onCollide, newProps.onCollide, 'onCollide', '(collidedMesh: BabylonjsCoreAbstractMesh) => void', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * This represents a free type of camera. It can be useful in First Person Shooter game for instance.\r\n * Please consider using the new UniversalCamera instead as it adds more functionality like the gamepad.\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberFreeCamera implements HasPropsHandlers<FiberCameraProps> {\r\n    public readonly isTargetable = true;\r\n    private propsHandlers: PropsHandler<FiberCameraProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberFreeCameraPropsHandler(),\r\n            new FiberTargetCameraPropsHandler(),\r\n            new FiberCameraPropsHandler(),\r\n            new FiberNodePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberCameraProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberCameraProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"FreeCamera\",\r\n        \"namespace\": \"@babylonjs/core/Cameras/camera\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"position\",\r\n                \"type\": \"BabylonjsCoreVector3\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"setActiveOnSceneIfNoneActive\",\r\n                \"type\": \"boolean\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isCamera\": true,\r\n        \"isNode\": true,\r\n        \"className\": \"FiberFreeCamera\"\r\n    };\r\n}\r\n\r\nexport class FiberTouchCameraPropsHandler implements PropsHandler<FiberTouchCameraProps> {\r\n    getPropertyUpdates(oldProps: FiberTouchCameraProps, newProps: FiberTouchCameraProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.touchAngularSensibility, newProps.touchAngularSensibility, 'touchAngularSensibility', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.touchMoveSensibility, newProps.touchMoveSensibility, 'touchMoveSensibility', 'number', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * This represents a FPS type of camera controlled by touch.\r\n * This is like a universal camera minus the Gamepad controls.\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberTouchCamera implements HasPropsHandlers<FiberCameraProps> {\r\n    public readonly isTargetable = true;\r\n    private propsHandlers: PropsHandler<FiberCameraProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberTouchCameraPropsHandler(),\r\n            new FiberFreeCameraPropsHandler(),\r\n            new FiberTargetCameraPropsHandler(),\r\n            new FiberCameraPropsHandler(),\r\n            new FiberNodePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberCameraProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberCameraProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"TouchCamera\",\r\n        \"namespace\": \"@babylonjs/core/Cameras/camera\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"position\",\r\n                \"type\": \"BabylonjsCoreVector3\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isCamera\": true,\r\n        \"isNode\": true,\r\n        \"className\": \"FiberTouchCamera\"\r\n    };\r\n}\r\n\r\nexport class FiberUniversalCameraPropsHandler implements PropsHandler<FiberUniversalCameraProps> {\r\n    getPropertyUpdates(oldProps: FiberUniversalCameraProps, newProps: FiberUniversalCameraProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.gamepadAngularSensibility, newProps.gamepadAngularSensibility, 'gamepadAngularSensibility', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.gamepadMoveSensibility, newProps.gamepadMoveSensibility, 'gamepadMoveSensibility', 'number', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * The Universal Camera is the one to choose for first person shooter type games, and works with all the keyboard, mouse, touch and gamepads. This replaces the earlier Free Camera,\r\n * which still works and will still be found in many Playgrounds.\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberUniversalCamera implements HasPropsHandlers<FiberCameraProps> {\r\n    public readonly isTargetable = true;\r\n    private propsHandlers: PropsHandler<FiberCameraProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberUniversalCameraPropsHandler(),\r\n            new FiberTouchCameraPropsHandler(),\r\n            new FiberFreeCameraPropsHandler(),\r\n            new FiberTargetCameraPropsHandler(),\r\n            new FiberCameraPropsHandler(),\r\n            new FiberNodePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberCameraProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberCameraProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"UniversalCamera\",\r\n        \"namespace\": \"@babylonjs/core/Cameras/camera\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"position\",\r\n                \"type\": \"BabylonjsCoreVector3\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isCamera\": true,\r\n        \"isNode\": true,\r\n        \"className\": \"FiberUniversalCamera\"\r\n    };\r\n}\r\n\r\nexport class FiberGamepadCameraPropsHandler implements PropsHandler<FiberGamepadCameraProps> {\r\n    getPropertyUpdates(oldProps: FiberGamepadCameraProps, newProps: FiberGamepadCameraProps): PropertyUpdate[] | null {\r\n        return null; // no props to check\r\n    }\r\n}\r\n\r\n/**\r\n * This represents a FPS type of camera. This is only here for back compat purpose.\r\n * Please use the UniversalCamera instead as both are identical.\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberGamepadCamera implements HasPropsHandlers<FiberCameraProps> {\r\n    public readonly isTargetable = true;\r\n    private propsHandlers: PropsHandler<FiberCameraProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberGamepadCameraPropsHandler(),\r\n            new FiberUniversalCameraPropsHandler(),\r\n            new FiberTouchCameraPropsHandler(),\r\n            new FiberFreeCameraPropsHandler(),\r\n            new FiberTargetCameraPropsHandler(),\r\n            new FiberCameraPropsHandler(),\r\n            new FiberNodePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberCameraProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberCameraProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"GamepadCamera\",\r\n        \"namespace\": \"@babylonjs/core/Cameras/camera\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"position\",\r\n                \"type\": \"BabylonjsCoreVector3\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isCamera\": true,\r\n        \"isNode\": true,\r\n        \"className\": \"FiberGamepadCamera\"\r\n    };\r\n}\r\n\r\nexport class FiberAnaglyphGamepadCameraPropsHandler implements PropsHandler<FiberAnaglyphGamepadCameraProps> {\r\n    getPropertyUpdates(oldProps: FiberAnaglyphGamepadCameraProps, newProps: FiberAnaglyphGamepadCameraProps): PropertyUpdate[] | null {\r\n        return null; // no props to check\r\n    }\r\n}\r\n\r\n/**\r\n * Camera used to simulate anaglyphic rendering (based on GamepadCamera)\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberAnaglyphGamepadCamera implements HasPropsHandlers<FiberCameraProps> {\r\n    public readonly isTargetable = true;\r\n    private propsHandlers: PropsHandler<FiberCameraProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberAnaglyphGamepadCameraPropsHandler(),\r\n            new FiberGamepadCameraPropsHandler(),\r\n            new FiberUniversalCameraPropsHandler(),\r\n            new FiberTouchCameraPropsHandler(),\r\n            new FiberFreeCameraPropsHandler(),\r\n            new FiberTargetCameraPropsHandler(),\r\n            new FiberCameraPropsHandler(),\r\n            new FiberNodePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberCameraProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberCameraProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"AnaglyphGamepadCamera\",\r\n        \"namespace\": \"@babylonjs/core/Cameras/camera\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"position\",\r\n                \"type\": \"BabylonjsCoreVector3\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"interaxialDistance\",\r\n                \"type\": \"number\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isCamera\": true,\r\n        \"isNode\": true,\r\n        \"className\": \"FiberAnaglyphGamepadCamera\"\r\n    };\r\n}\r\n\r\nexport class FiberStereoscopicGamepadCameraPropsHandler implements PropsHandler<FiberStereoscopicGamepadCameraProps> {\r\n    getPropertyUpdates(oldProps: FiberStereoscopicGamepadCameraProps, newProps: FiberStereoscopicGamepadCameraProps): PropertyUpdate[] | null {\r\n        return null; // no props to check\r\n    }\r\n}\r\n\r\n/**\r\n * Camera used to simulate stereoscopic rendering (based on GamepadCamera)\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberStereoscopicGamepadCamera implements HasPropsHandlers<FiberCameraProps> {\r\n    public readonly isTargetable = true;\r\n    private propsHandlers: PropsHandler<FiberCameraProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberStereoscopicGamepadCameraPropsHandler(),\r\n            new FiberGamepadCameraPropsHandler(),\r\n            new FiberUniversalCameraPropsHandler(),\r\n            new FiberTouchCameraPropsHandler(),\r\n            new FiberFreeCameraPropsHandler(),\r\n            new FiberTargetCameraPropsHandler(),\r\n            new FiberCameraPropsHandler(),\r\n            new FiberNodePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberCameraProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberCameraProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"StereoscopicGamepadCamera\",\r\n        \"namespace\": \"@babylonjs/core/Cameras/camera\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"position\",\r\n                \"type\": \"BabylonjsCoreVector3\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"interaxialDistance\",\r\n                \"type\": \"number\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"isStereoscopicSideBySide\",\r\n                \"type\": \"boolean\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isCamera\": true,\r\n        \"isNode\": true,\r\n        \"className\": \"FiberStereoscopicGamepadCamera\"\r\n    };\r\n}\r\n\r\nexport class FiberAnaglyphUniversalCameraPropsHandler implements PropsHandler<FiberAnaglyphUniversalCameraProps> {\r\n    getPropertyUpdates(oldProps: FiberAnaglyphUniversalCameraProps, newProps: FiberAnaglyphUniversalCameraProps): PropertyUpdate[] | null {\r\n        return null; // no props to check\r\n    }\r\n}\r\n\r\n/**\r\n * Camera used to simulate anaglyphic rendering (based on UniversalCamera)\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberAnaglyphUniversalCamera implements HasPropsHandlers<FiberCameraProps> {\r\n    public readonly isTargetable = true;\r\n    private propsHandlers: PropsHandler<FiberCameraProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberAnaglyphUniversalCameraPropsHandler(),\r\n            new FiberUniversalCameraPropsHandler(),\r\n            new FiberTouchCameraPropsHandler(),\r\n            new FiberFreeCameraPropsHandler(),\r\n            new FiberTargetCameraPropsHandler(),\r\n            new FiberCameraPropsHandler(),\r\n            new FiberNodePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberCameraProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberCameraProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"AnaglyphUniversalCamera\",\r\n        \"namespace\": \"@babylonjs/core/Cameras/camera\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"position\",\r\n                \"type\": \"BabylonjsCoreVector3\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"interaxialDistance\",\r\n                \"type\": \"number\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isCamera\": true,\r\n        \"isNode\": true,\r\n        \"className\": \"FiberAnaglyphUniversalCamera\"\r\n    };\r\n}\r\n\r\nexport class FiberStereoscopicUniversalCameraPropsHandler implements PropsHandler<FiberStereoscopicUniversalCameraProps> {\r\n    getPropertyUpdates(oldProps: FiberStereoscopicUniversalCameraProps, newProps: FiberStereoscopicUniversalCameraProps): PropertyUpdate[] | null {\r\n        return null; // no props to check\r\n    }\r\n}\r\n\r\n/**\r\n * Camera used to simulate stereoscopic rendering (based on UniversalCamera)\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberStereoscopicUniversalCamera implements HasPropsHandlers<FiberCameraProps> {\r\n    public readonly isTargetable = true;\r\n    private propsHandlers: PropsHandler<FiberCameraProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberStereoscopicUniversalCameraPropsHandler(),\r\n            new FiberUniversalCameraPropsHandler(),\r\n            new FiberTouchCameraPropsHandler(),\r\n            new FiberFreeCameraPropsHandler(),\r\n            new FiberTargetCameraPropsHandler(),\r\n            new FiberCameraPropsHandler(),\r\n            new FiberNodePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberCameraProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberCameraProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"StereoscopicUniversalCamera\",\r\n        \"namespace\": \"@babylonjs/core/Cameras/camera\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"position\",\r\n                \"type\": \"BabylonjsCoreVector3\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"interaxialDistance\",\r\n                \"type\": \"number\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"isStereoscopicSideBySide\",\r\n                \"type\": \"boolean\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isCamera\": true,\r\n        \"isNode\": true,\r\n        \"className\": \"FiberStereoscopicUniversalCamera\"\r\n    };\r\n}\r\n\r\nexport class FiberDeviceOrientationCameraPropsHandler implements PropsHandler<FiberDeviceOrientationCameraProps> {\r\n    getPropertyUpdates(oldProps: FiberDeviceOrientationCameraProps, newProps: FiberDeviceOrientationCameraProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.disablePointerInputWhenUsingDeviceOrientation, newProps.disablePointerInputWhenUsingDeviceOrientation, 'disablePointerInputWhenUsingDeviceOrientation', 'boolean', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * This is a camera specifically designed to react to device orientation events such as a modern mobile device\r\n * being tilted forward or back and left or right.\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberDeviceOrientationCamera implements HasPropsHandlers<FiberCameraProps> {\r\n    public readonly isTargetable = true;\r\n    private propsHandlers: PropsHandler<FiberCameraProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberDeviceOrientationCameraPropsHandler(),\r\n            new FiberFreeCameraPropsHandler(),\r\n            new FiberTargetCameraPropsHandler(),\r\n            new FiberCameraPropsHandler(),\r\n            new FiberNodePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberCameraProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberCameraProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"DeviceOrientationCamera\",\r\n        \"namespace\": \"@babylonjs/core/Cameras/camera\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"position\",\r\n                \"type\": \"BabylonjsCoreVector3\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isCamera\": true,\r\n        \"isNode\": true,\r\n        \"className\": \"FiberDeviceOrientationCamera\"\r\n    };\r\n}\r\n\r\nexport class FiberVRDeviceOrientationFreeCameraPropsHandler implements PropsHandler<FiberVRDeviceOrientationFreeCameraProps> {\r\n    getPropertyUpdates(oldProps: FiberVRDeviceOrientationFreeCameraProps, newProps: FiberVRDeviceOrientationFreeCameraProps): PropertyUpdate[] | null {\r\n        return null; // no props to check\r\n    }\r\n}\r\n\r\n/**\r\n * Camera used to simulate VR rendering (based on FreeCamera)\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberVRDeviceOrientationFreeCamera implements HasPropsHandlers<FiberCameraProps> {\r\n    public readonly isTargetable = true;\r\n    private propsHandlers: PropsHandler<FiberCameraProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberVRDeviceOrientationFreeCameraPropsHandler(),\r\n            new FiberDeviceOrientationCameraPropsHandler(),\r\n            new FiberFreeCameraPropsHandler(),\r\n            new FiberTargetCameraPropsHandler(),\r\n            new FiberCameraPropsHandler(),\r\n            new FiberNodePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberCameraProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberCameraProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"VRDeviceOrientationFreeCamera\",\r\n        \"namespace\": \"@babylonjs/core/Cameras/camera\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"position\",\r\n                \"type\": \"BabylonjsCoreVector3\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"compensateDistortion\",\r\n                \"type\": \"boolean\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"vrCameraMetrics\",\r\n                \"type\": \"BabylonjsCoreVRCameraMetrics\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isCamera\": true,\r\n        \"isNode\": true,\r\n        \"className\": \"FiberVRDeviceOrientationFreeCamera\"\r\n    };\r\n}\r\n\r\nexport class FiberVRDeviceOrientationGamepadCameraPropsHandler implements PropsHandler<FiberVRDeviceOrientationGamepadCameraProps> {\r\n    getPropertyUpdates(oldProps: FiberVRDeviceOrientationGamepadCameraProps, newProps: FiberVRDeviceOrientationGamepadCameraProps): PropertyUpdate[] | null {\r\n        return null; // no props to check\r\n    }\r\n}\r\n\r\n/**\r\n * Camera used to simulate VR rendering (based on VRDeviceOrientationFreeCamera)\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberVRDeviceOrientationGamepadCamera implements HasPropsHandlers<FiberCameraProps> {\r\n    public readonly isTargetable = true;\r\n    private propsHandlers: PropsHandler<FiberCameraProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberVRDeviceOrientationGamepadCameraPropsHandler(),\r\n            new FiberVRDeviceOrientationFreeCameraPropsHandler(),\r\n            new FiberDeviceOrientationCameraPropsHandler(),\r\n            new FiberFreeCameraPropsHandler(),\r\n            new FiberTargetCameraPropsHandler(),\r\n            new FiberCameraPropsHandler(),\r\n            new FiberNodePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberCameraProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberCameraProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"VRDeviceOrientationGamepadCamera\",\r\n        \"namespace\": \"@babylonjs/core/Cameras/camera\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"position\",\r\n                \"type\": \"BabylonjsCoreVector3\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"compensateDistortion\",\r\n                \"type\": \"boolean\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"vrCameraMetrics\",\r\n                \"type\": \"BabylonjsCoreVRCameraMetrics\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isCamera\": true,\r\n        \"isNode\": true,\r\n        \"className\": \"FiberVRDeviceOrientationGamepadCamera\"\r\n    };\r\n}\r\n\r\nexport class FiberAnaglyphFreeCameraPropsHandler implements PropsHandler<FiberAnaglyphFreeCameraProps> {\r\n    getPropertyUpdates(oldProps: FiberAnaglyphFreeCameraProps, newProps: FiberAnaglyphFreeCameraProps): PropertyUpdate[] | null {\r\n        return null; // no props to check\r\n    }\r\n}\r\n\r\n/**\r\n * Camera used to simulate anaglyphic rendering (based on FreeCamera)\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberAnaglyphFreeCamera implements HasPropsHandlers<FiberCameraProps> {\r\n    public readonly isTargetable = true;\r\n    private propsHandlers: PropsHandler<FiberCameraProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberAnaglyphFreeCameraPropsHandler(),\r\n            new FiberFreeCameraPropsHandler(),\r\n            new FiberTargetCameraPropsHandler(),\r\n            new FiberCameraPropsHandler(),\r\n            new FiberNodePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberCameraProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberCameraProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"AnaglyphFreeCamera\",\r\n        \"namespace\": \"@babylonjs/core/Cameras/camera\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"position\",\r\n                \"type\": \"BabylonjsCoreVector3\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"interaxialDistance\",\r\n                \"type\": \"number\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isCamera\": true,\r\n        \"isNode\": true,\r\n        \"className\": \"FiberAnaglyphFreeCamera\"\r\n    };\r\n}\r\n\r\nexport class FiberStereoscopicFreeCameraPropsHandler implements PropsHandler<FiberStereoscopicFreeCameraProps> {\r\n    getPropertyUpdates(oldProps: FiberStereoscopicFreeCameraProps, newProps: FiberStereoscopicFreeCameraProps): PropertyUpdate[] | null {\r\n        return null; // no props to check\r\n    }\r\n}\r\n\r\n/**\r\n * Camera used to simulate stereoscopic rendering (based on FreeCamera)\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberStereoscopicFreeCamera implements HasPropsHandlers<FiberCameraProps> {\r\n    public readonly isTargetable = true;\r\n    private propsHandlers: PropsHandler<FiberCameraProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberStereoscopicFreeCameraPropsHandler(),\r\n            new FiberFreeCameraPropsHandler(),\r\n            new FiberTargetCameraPropsHandler(),\r\n            new FiberCameraPropsHandler(),\r\n            new FiberNodePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberCameraProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberCameraProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"StereoscopicFreeCamera\",\r\n        \"namespace\": \"@babylonjs/core/Cameras/camera\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"position\",\r\n                \"type\": \"BabylonjsCoreVector3\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"interaxialDistance\",\r\n                \"type\": \"number\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"isStereoscopicSideBySide\",\r\n                \"type\": \"boolean\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isCamera\": true,\r\n        \"isNode\": true,\r\n        \"className\": \"FiberStereoscopicFreeCamera\"\r\n    };\r\n}\r\n\r\nexport class FiberVirtualJoysticksCameraPropsHandler implements PropsHandler<FiberVirtualJoysticksCameraProps> {\r\n    getPropertyUpdates(oldProps: FiberVirtualJoysticksCameraProps, newProps: FiberVirtualJoysticksCameraProps): PropertyUpdate[] | null {\r\n        return null; // no props to check\r\n    }\r\n}\r\n\r\n/**\r\n * This represents a free type of camera. It can be useful in First Person Shooter game for instance.\r\n * It is identical to the Free Camera and simply adds by default a virtual joystick.\r\n * Virtual Joysticks are on-screen 2D graphics that are used to control the camera or other scene items.\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberVirtualJoysticksCamera implements HasPropsHandlers<FiberCameraProps> {\r\n    public readonly isTargetable = true;\r\n    private propsHandlers: PropsHandler<FiberCameraProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberVirtualJoysticksCameraPropsHandler(),\r\n            new FiberFreeCameraPropsHandler(),\r\n            new FiberTargetCameraPropsHandler(),\r\n            new FiberCameraPropsHandler(),\r\n            new FiberNodePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberCameraProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberCameraProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"VirtualJoysticksCamera\",\r\n        \"namespace\": \"@babylonjs/core/Cameras/camera\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"position\",\r\n                \"type\": \"BabylonjsCoreVector3\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isCamera\": true,\r\n        \"isNode\": true,\r\n        \"className\": \"FiberVirtualJoysticksCamera\"\r\n    };\r\n}\r\n\r\nexport class FiberWebVRFreeCameraPropsHandler implements PropsHandler<FiberWebVRFreeCameraProps> {\r\n    getPropertyUpdates(oldProps: FiberWebVRFreeCameraProps, newProps: FiberWebVRFreeCameraProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        // type: 'BabylonjsCoreWebVRController[]' property (not coded) BabylonjsCoreWebVRFreeCamera.controllers.\r\n        checkVector3Diff(oldProps.devicePosition, newProps.devicePosition, 'devicePosition', 'BabylonjsCoreVector3', changedProps)\r\n        // type: 'BabylonjsCoreQuaternion' property (not coded) BabylonjsCoreWebVRFreeCamera.deviceRotationQuaternion.\r\n        checkPrimitiveDiff(oldProps.deviceScaleFactor, newProps.deviceScaleFactor, 'deviceScaleFactor', 'number', changedProps)\r\n        checkObservableDiff(oldProps.onControllerMeshLoadedObservable, newProps.onControllerMeshLoadedObservable, 'onControllerMeshLoadedObservable', 'BabylonjsCoreObservable<BabylonjsCoreWebVRController>', changedProps)\r\n        checkObservableDiff(oldProps.onControllersAttachedObservable, newProps.onControllersAttachedObservable, 'onControllersAttachedObservable', 'BabylonjsCoreObservable<BabylonjsCoreWebVRController[]>', changedProps)\r\n        checkObservableDiff(oldProps.onPoseUpdatedFromDeviceObservable, newProps.onPoseUpdatedFromDeviceObservable, 'onPoseUpdatedFromDeviceObservable', 'BabylonjsCoreObservable<any>', changedProps)\r\n        // type: 'BabylonjsCoreDevicePose' property (not coded) BabylonjsCoreWebVRFreeCamera.rawPose.\r\n        checkPrimitiveDiff(oldProps.rigParenting, newProps.rigParenting, 'rigParenting', 'boolean', changedProps)\r\n        // type: 'any' property (not coded) BabylonjsCoreWebVRFreeCamera.updateCacheCalled.\r\n        // type: 'any' property (not coded) BabylonjsCoreWebVRFreeCamera.webVROptions.\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * This represents a WebVR camera.\r\n * The WebVR camera is Babylon's simple interface to interaction with Windows Mixed Reality, HTC Vive and Oculus Rift.\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberWebVRFreeCamera implements HasPropsHandlers<FiberCameraProps> {\r\n    public readonly isTargetable = true;\r\n    private propsHandlers: PropsHandler<FiberCameraProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberWebVRFreeCameraPropsHandler(),\r\n            new FiberFreeCameraPropsHandler(),\r\n            new FiberTargetCameraPropsHandler(),\r\n            new FiberCameraPropsHandler(),\r\n            new FiberNodePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberCameraProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberCameraProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"WebVRFreeCamera\",\r\n        \"namespace\": \"@babylonjs/core/Cameras/camera\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"position\",\r\n                \"type\": \"BabylonjsCoreVector3\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"webVROptions\",\r\n                \"type\": \"BabylonjsCoreWebVROptions\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isCamera\": true,\r\n        \"isNode\": true,\r\n        \"className\": \"FiberWebVRFreeCamera\"\r\n    };\r\n}\r\n\r\nexport class FiberWebXRCameraPropsHandler implements PropsHandler<FiberWebXRCameraProps> {\r\n    getPropertyUpdates(oldProps: FiberWebXRCameraProps, newProps: FiberWebXRCameraProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.compensateOnFirstFrame, newProps.compensateOnFirstFrame, 'compensateOnFirstFrame', 'boolean', changedProps)\r\n        checkMethodDiff(oldProps.setTransformationFromNonVRCamera, newProps.setTransformationFromNonVRCamera, 'setTransformationFromNonVRCamera', '(otherCamera?: BabylonjsCoreCamera, resetToBaseReferenceSpace?: boolean) => void', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * WebXR Camera which holds the views for the xrSession\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberWebXRCamera implements HasPropsHandlers<FiberCameraProps> {\r\n    public readonly isTargetable = true;\r\n    private propsHandlers: PropsHandler<FiberCameraProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberWebXRCameraPropsHandler(),\r\n            new FiberFreeCameraPropsHandler(),\r\n            new FiberTargetCameraPropsHandler(),\r\n            new FiberCameraPropsHandler(),\r\n            new FiberNodePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberCameraProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberCameraProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"WebXRCamera\",\r\n        \"namespace\": \"@babylonjs/core/Cameras/camera\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"_xrSessionManager\",\r\n                \"type\": \"BabylonjsCoreWebXRSessionManager\",\r\n                \"optional\": false\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isCamera\": true,\r\n        \"isNode\": true,\r\n        \"className\": \"FiberWebXRCamera\"\r\n    };\r\n}\r\n\r\nexport class FiberArcRotateCameraPropsHandler implements PropsHandler<FiberArcRotateCameraProps> {\r\n    getPropertyUpdates(oldProps: FiberArcRotateCameraProps, newProps: FiberArcRotateCameraProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.allowUpsideDown, newProps.allowUpsideDown, 'allowUpsideDown', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.alpha, newProps.alpha, 'alpha', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.angularSensibilityX, newProps.angularSensibilityX, 'angularSensibilityX', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.angularSensibilityY, newProps.angularSensibilityY, 'angularSensibilityY', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.beta, newProps.beta, 'beta', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.checkCollisions, newProps.checkCollisions, 'checkCollisions', 'boolean', changedProps)\r\n        checkVector3Diff(oldProps.collisionRadius, newProps.collisionRadius, 'collisionRadius', 'BabylonjsCoreVector3', changedProps)\r\n        checkPrimitiveDiff(oldProps.inertialAlphaOffset, newProps.inertialAlphaOffset, 'inertialAlphaOffset', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.inertialBetaOffset, newProps.inertialBetaOffset, 'inertialBetaOffset', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.inertialPanningX, newProps.inertialPanningX, 'inertialPanningX', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.inertialPanningY, newProps.inertialPanningY, 'inertialPanningY', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.inertialRadiusOffset, newProps.inertialRadiusOffset, 'inertialRadiusOffset', 'number', changedProps)\r\n        // type: 'BabylonjsCoreArcRotateCameraInputsManager' property (not coded) BabylonjsCoreArcRotateCamera.inputs.\r\n        checkNumericArrayDiff(oldProps.keysDown, newProps.keysDown, 'keysDown', 'number[]', changedProps)\r\n        checkNumericArrayDiff(oldProps.keysLeft, newProps.keysLeft, 'keysLeft', 'number[]', changedProps)\r\n        checkNumericArrayDiff(oldProps.keysRight, newProps.keysRight, 'keysRight', 'number[]', changedProps)\r\n        checkNumericArrayDiff(oldProps.keysUp, newProps.keysUp, 'keysUp', 'number[]', changedProps)\r\n        checkPrimitiveDiff(oldProps.lowerAlphaLimit, newProps.lowerAlphaLimit, 'lowerAlphaLimit', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.lowerBetaLimit, newProps.lowerBetaLimit, 'lowerBetaLimit', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.lowerRadiusLimit, newProps.lowerRadiusLimit, 'lowerRadiusLimit', 'number', changedProps)\r\n        checkLambdaDiff(oldProps.onCollide, newProps.onCollide, 'onCollide', '(collidedMesh: BabylonjsCoreAbstractMesh) => void', changedProps)\r\n        checkObservableDiff(oldProps.onMeshTargetChangedObservable, newProps.onMeshTargetChangedObservable, 'onMeshTargetChangedObservable', 'BabylonjsCoreObservable<BabylonjsCoreAbstractMesh>', changedProps)\r\n        checkVector3Diff(oldProps.panningAxis, newProps.panningAxis, 'panningAxis', 'BabylonjsCoreVector3', changedProps)\r\n        checkPrimitiveDiff(oldProps.panningDistanceLimit, newProps.panningDistanceLimit, 'panningDistanceLimit', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.panningInertia, newProps.panningInertia, 'panningInertia', 'number', changedProps)\r\n        checkVector3Diff(oldProps.panningOriginTarget, newProps.panningOriginTarget, 'panningOriginTarget', 'BabylonjsCoreVector3', changedProps)\r\n        checkPrimitiveDiff(oldProps.panningSensibility, newProps.panningSensibility, 'panningSensibility', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.pinchDeltaPercentage, newProps.pinchDeltaPercentage, 'pinchDeltaPercentage', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.pinchPrecision, newProps.pinchPrecision, 'pinchPrecision', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.pinchToPanMaxDistance, newProps.pinchToPanMaxDistance, 'pinchToPanMaxDistance', 'number', changedProps)\r\n        checkVector3Diff(oldProps.position, newProps.position, 'position', 'BabylonjsCoreVector3', changedProps)\r\n        checkPrimitiveDiff(oldProps.radius, newProps.radius, 'radius', 'number', changedProps)\r\n        checkVector3Diff(oldProps.target, newProps.target, 'target', 'BabylonjsCoreVector3', changedProps)\r\n        // type: 'BabylonjsCoreVector2' property (not coded) BabylonjsCoreArcRotateCamera.targetScreenOffset.\r\n        checkPrimitiveDiff(oldProps.upperAlphaLimit, newProps.upperAlphaLimit, 'upperAlphaLimit', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.upperBetaLimit, newProps.upperBetaLimit, 'upperBetaLimit', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.upperRadiusLimit, newProps.upperRadiusLimit, 'upperRadiusLimit', 'number', changedProps)\r\n        checkVector3Diff(oldProps.upVector, newProps.upVector, 'upVector', 'BabylonjsCoreVector3', changedProps)\r\n        checkPrimitiveDiff(oldProps.useAutoRotationBehavior, newProps.useAutoRotationBehavior, 'useAutoRotationBehavior', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.useBouncingBehavior, newProps.useBouncingBehavior, 'useBouncingBehavior', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.useFramingBehavior, newProps.useFramingBehavior, 'useFramingBehavior', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.useInputToRestoreState, newProps.useInputToRestoreState, 'useInputToRestoreState', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.useNaturalPinchZoom, newProps.useNaturalPinchZoom, 'useNaturalPinchZoom', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.wheelDeltaPercentage, newProps.wheelDeltaPercentage, 'wheelDeltaPercentage', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.wheelPrecision, newProps.wheelPrecision, 'wheelPrecision', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.zoomOnFactor, newProps.zoomOnFactor, 'zoomOnFactor', 'number', changedProps)\r\n        checkMethodDiff(oldProps.setPosition, newProps.setPosition, 'setPosition', '(position?: BabylonjsCoreVector3) => void', changedProps)\r\n        checkMethodDiff(oldProps.setTarget, newProps.setTarget, 'setTarget', '(target?: BabylonjsCoreAbstractMesh | BabylonjsCoreVector3, toBoundingCenter?: boolean, allowSamePosition?: boolean) => void', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * This represents an orbital type of camera.\r\n *\r\n * This camera always points towards a given target position and can be rotated around that target with the target as the centre of rotation. It can be controlled with cursors and mouse, or with touch events.\r\n * Think of this camera as one orbiting its target position, or more imaginatively as a spy satellite orbiting the earth. Its position relative to the target (earth) can be set by three parameters, alpha (radians) the longitudinal rotation, beta (radians) the latitudinal rotation and radius the distance from the target position.\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberArcRotateCamera implements HasPropsHandlers<FiberCameraProps> {\r\n    public readonly isTargetable = true;\r\n    private propsHandlers: PropsHandler<FiberCameraProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberArcRotateCameraPropsHandler(),\r\n            new FiberTargetCameraPropsHandler(),\r\n            new FiberCameraPropsHandler(),\r\n            new FiberNodePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberCameraProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberCameraProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"ArcRotateCamera\",\r\n        \"namespace\": \"@babylonjs/core/Cameras/camera\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"alpha\",\r\n                \"type\": \"number\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"beta\",\r\n                \"type\": \"number\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"radius\",\r\n                \"type\": \"number\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"target\",\r\n                \"type\": \"BabylonjsCoreVector3\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"setActiveOnSceneIfNoneActive\",\r\n                \"type\": \"boolean\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isCamera\": true,\r\n        \"isNode\": true,\r\n        \"className\": \"FiberArcRotateCamera\"\r\n    };\r\n}\r\n\r\nexport class FiberAnaglyphArcRotateCameraPropsHandler implements PropsHandler<FiberAnaglyphArcRotateCameraProps> {\r\n    getPropertyUpdates(oldProps: FiberAnaglyphArcRotateCameraProps, newProps: FiberAnaglyphArcRotateCameraProps): PropertyUpdate[] | null {\r\n        return null; // no props to check\r\n    }\r\n}\r\n\r\n/**\r\n * Camera used to simulate anaglyphic rendering (based on ArcRotateCamera)\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberAnaglyphArcRotateCamera implements HasPropsHandlers<FiberCameraProps> {\r\n    public readonly isTargetable = true;\r\n    private propsHandlers: PropsHandler<FiberCameraProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberAnaglyphArcRotateCameraPropsHandler(),\r\n            new FiberArcRotateCameraPropsHandler(),\r\n            new FiberTargetCameraPropsHandler(),\r\n            new FiberCameraPropsHandler(),\r\n            new FiberNodePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberCameraProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberCameraProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"AnaglyphArcRotateCamera\",\r\n        \"namespace\": \"@babylonjs/core/Cameras/camera\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"alpha\",\r\n                \"type\": \"number\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"beta\",\r\n                \"type\": \"number\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"radius\",\r\n                \"type\": \"number\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"target\",\r\n                \"type\": \"BabylonjsCoreVector3\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"interaxialDistance\",\r\n                \"type\": \"number\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isCamera\": true,\r\n        \"isNode\": true,\r\n        \"className\": \"FiberAnaglyphArcRotateCamera\"\r\n    };\r\n}\r\n\r\nexport class FiberStereoscopicArcRotateCameraPropsHandler implements PropsHandler<FiberStereoscopicArcRotateCameraProps> {\r\n    getPropertyUpdates(oldProps: FiberStereoscopicArcRotateCameraProps, newProps: FiberStereoscopicArcRotateCameraProps): PropertyUpdate[] | null {\r\n        return null; // no props to check\r\n    }\r\n}\r\n\r\n/**\r\n * Camera used to simulate stereoscopic rendering (based on ArcRotateCamera)\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberStereoscopicArcRotateCamera implements HasPropsHandlers<FiberCameraProps> {\r\n    public readonly isTargetable = true;\r\n    private propsHandlers: PropsHandler<FiberCameraProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberStereoscopicArcRotateCameraPropsHandler(),\r\n            new FiberArcRotateCameraPropsHandler(),\r\n            new FiberTargetCameraPropsHandler(),\r\n            new FiberCameraPropsHandler(),\r\n            new FiberNodePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberCameraProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberCameraProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"StereoscopicArcRotateCamera\",\r\n        \"namespace\": \"@babylonjs/core/Cameras/camera\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"alpha\",\r\n                \"type\": \"number\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"beta\",\r\n                \"type\": \"number\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"radius\",\r\n                \"type\": \"number\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"target\",\r\n                \"type\": \"BabylonjsCoreVector3\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"interaxialDistance\",\r\n                \"type\": \"number\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"isStereoscopicSideBySide\",\r\n                \"type\": \"boolean\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isCamera\": true,\r\n        \"isNode\": true,\r\n        \"className\": \"FiberStereoscopicArcRotateCamera\"\r\n    };\r\n}\r\n\r\nexport class FiberVRDeviceOrientationArcRotateCameraPropsHandler implements PropsHandler<FiberVRDeviceOrientationArcRotateCameraProps> {\r\n    getPropertyUpdates(oldProps: FiberVRDeviceOrientationArcRotateCameraProps, newProps: FiberVRDeviceOrientationArcRotateCameraProps): PropertyUpdate[] | null {\r\n        return null; // no props to check\r\n    }\r\n}\r\n\r\n/**\r\n * Camera used to simulate VR rendering (based on ArcRotateCamera)\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberVRDeviceOrientationArcRotateCamera implements HasPropsHandlers<FiberCameraProps> {\r\n    public readonly isTargetable = true;\r\n    private propsHandlers: PropsHandler<FiberCameraProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberVRDeviceOrientationArcRotateCameraPropsHandler(),\r\n            new FiberArcRotateCameraPropsHandler(),\r\n            new FiberTargetCameraPropsHandler(),\r\n            new FiberCameraPropsHandler(),\r\n            new FiberNodePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberCameraProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberCameraProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"VRDeviceOrientationArcRotateCamera\",\r\n        \"namespace\": \"@babylonjs/core/Cameras/camera\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"alpha\",\r\n                \"type\": \"number\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"beta\",\r\n                \"type\": \"number\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"radius\",\r\n                \"type\": \"number\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"target\",\r\n                \"type\": \"BabylonjsCoreVector3\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"compensateDistortion\",\r\n                \"type\": \"boolean\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"vrCameraMetrics\",\r\n                \"type\": \"BabylonjsCoreVRCameraMetrics\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isCamera\": true,\r\n        \"isNode\": true,\r\n        \"className\": \"FiberVRDeviceOrientationArcRotateCamera\"\r\n    };\r\n}\r\n\r\nexport class FiberFlyCameraPropsHandler implements PropsHandler<FiberFlyCameraProps> {\r\n    getPropertyUpdates(oldProps: FiberFlyCameraProps, newProps: FiberFlyCameraProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.angularSensibility, newProps.angularSensibility, 'angularSensibility', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.applyGravity, newProps.applyGravity, 'applyGravity', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.bankedTurn, newProps.bankedTurn, 'bankedTurn', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.bankedTurnLimit, newProps.bankedTurnLimit, 'bankedTurnLimit', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.bankedTurnMultiplier, newProps.bankedTurnMultiplier, 'bankedTurnMultiplier', 'number', changedProps)\r\n        checkVector3Diff(oldProps.cameraDirection, newProps.cameraDirection, 'cameraDirection', 'BabylonjsCoreVector3', changedProps)\r\n        checkPrimitiveDiff(oldProps.checkCollisions, newProps.checkCollisions, 'checkCollisions', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.collisionMask, newProps.collisionMask, 'collisionMask', 'number', changedProps)\r\n        checkVector3Diff(oldProps.ellipsoid, newProps.ellipsoid, 'ellipsoid', 'BabylonjsCoreVector3', changedProps)\r\n        checkVector3Diff(oldProps.ellipsoidOffset, newProps.ellipsoidOffset, 'ellipsoidOffset', 'BabylonjsCoreVector3', changedProps)\r\n        // type: 'BabylonjsCoreFlyCameraInputsManager' property (not coded) BabylonjsCoreFlyCamera.inputs.\r\n        checkNumericArrayDiff(oldProps.keysBackward, newProps.keysBackward, 'keysBackward', 'number[]', changedProps)\r\n        checkNumericArrayDiff(oldProps.keysDown, newProps.keysDown, 'keysDown', 'number[]', changedProps)\r\n        checkNumericArrayDiff(oldProps.keysForward, newProps.keysForward, 'keysForward', 'number[]', changedProps)\r\n        checkNumericArrayDiff(oldProps.keysLeft, newProps.keysLeft, 'keysLeft', 'number[]', changedProps)\r\n        checkNumericArrayDiff(oldProps.keysRight, newProps.keysRight, 'keysRight', 'number[]', changedProps)\r\n        checkNumericArrayDiff(oldProps.keysUp, newProps.keysUp, 'keysUp', 'number[]', changedProps)\r\n        checkLambdaDiff(oldProps.onCollide, newProps.onCollide, 'onCollide', '(collidedMesh: BabylonjsCoreAbstractMesh) => void', changedProps)\r\n        checkPrimitiveDiff(oldProps.rollCorrect, newProps.rollCorrect, 'rollCorrect', 'number', changedProps)\r\n        // type: 'BabylonjsCoreQuaternion' property (not coded) BabylonjsCoreFlyCamera.rotationQuaternion.\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * This is a flying camera, designed for 3D movement and rotation in all directions,\r\n * such as in a 3D Space Shooter or a Flight Simulator.\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberFlyCamera implements HasPropsHandlers<FiberCameraProps> {\r\n    public readonly isTargetable = true;\r\n    private propsHandlers: PropsHandler<FiberCameraProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberFlyCameraPropsHandler(),\r\n            new FiberTargetCameraPropsHandler(),\r\n            new FiberCameraPropsHandler(),\r\n            new FiberNodePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberCameraProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberCameraProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"FlyCamera\",\r\n        \"namespace\": \"@babylonjs/core/Cameras/camera\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"position\",\r\n                \"type\": \"BabylonjsCoreVector3\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"setActiveOnSceneIfNoneActive\",\r\n                \"type\": \"boolean\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isCamera\": true,\r\n        \"isNode\": true,\r\n        \"className\": \"FiberFlyCamera\"\r\n    };\r\n}\r\n\r\nexport class FiberFollowCameraPropsHandler implements PropsHandler<FiberFollowCameraProps> {\r\n    getPropertyUpdates(oldProps: FiberFollowCameraProps, newProps: FiberFollowCameraProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.cameraAcceleration, newProps.cameraAcceleration, 'cameraAcceleration', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.heightOffset, newProps.heightOffset, 'heightOffset', 'number', changedProps)\r\n        // type: 'BabylonjsCoreFollowCameraInputsManager' property (not coded) BabylonjsCoreFollowCamera.inputs.\r\n        // type: 'BabylonjsCoreAbstractMesh' property (not coded) BabylonjsCoreFollowCamera.lockedTarget.\r\n        checkPrimitiveDiff(oldProps.lowerHeightOffsetLimit, newProps.lowerHeightOffsetLimit, 'lowerHeightOffsetLimit', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.lowerRadiusLimit, newProps.lowerRadiusLimit, 'lowerRadiusLimit', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.lowerRotationOffsetLimit, newProps.lowerRotationOffsetLimit, 'lowerRotationOffsetLimit', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.maxCameraSpeed, newProps.maxCameraSpeed, 'maxCameraSpeed', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.radius, newProps.radius, 'radius', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.rotationOffset, newProps.rotationOffset, 'rotationOffset', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.upperHeightOffsetLimit, newProps.upperHeightOffsetLimit, 'upperHeightOffsetLimit', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.upperRadiusLimit, newProps.upperRadiusLimit, 'upperRadiusLimit', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.upperRotationOffsetLimit, newProps.upperRotationOffsetLimit, 'upperRotationOffsetLimit', 'number', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * A follow camera takes a mesh as a target and follows it as it moves. Both a free camera version followCamera and\r\n * an arc rotate version arcFollowCamera are available.\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberFollowCamera implements HasPropsHandlers<FiberCameraProps> {\r\n    public readonly isTargetable = true;\r\n    private propsHandlers: PropsHandler<FiberCameraProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberFollowCameraPropsHandler(),\r\n            new FiberTargetCameraPropsHandler(),\r\n            new FiberCameraPropsHandler(),\r\n            new FiberNodePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberCameraProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberCameraProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"FollowCamera\",\r\n        \"namespace\": \"@babylonjs/core/Cameras/camera\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"position\",\r\n                \"type\": \"BabylonjsCoreVector3\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"lockedTarget\",\r\n                \"type\": \"BabylonjsCoreAbstractMesh\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isCamera\": true,\r\n        \"isNode\": true,\r\n        \"className\": \"FiberFollowCamera\"\r\n    };\r\n}\r\n\r\nexport class FiberArcFollowCameraPropsHandler implements PropsHandler<FiberArcFollowCameraProps> {\r\n    getPropertyUpdates(oldProps: FiberArcFollowCameraProps, newProps: FiberArcFollowCameraProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.alpha, newProps.alpha, 'alpha', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.beta, newProps.beta, 'beta', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.radius, newProps.radius, 'radius', 'number', changedProps)\r\n        // type: 'BabylonjsCoreAbstractMesh' property (not coded) BabylonjsCoreArcFollowCamera.target.\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * Arc Rotate version of the follow camera.\r\n * It still follows a Defined mesh but in an Arc Rotate Camera fashion.\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberArcFollowCamera implements HasPropsHandlers<FiberCameraProps> {\r\n    public readonly isTargetable = true;\r\n    private propsHandlers: PropsHandler<FiberCameraProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberArcFollowCameraPropsHandler(),\r\n            new FiberTargetCameraPropsHandler(),\r\n            new FiberCameraPropsHandler(),\r\n            new FiberNodePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberCameraProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberCameraProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"ArcFollowCamera\",\r\n        \"namespace\": \"@babylonjs/core/Cameras/camera\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"alpha\",\r\n                \"type\": \"number\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"beta\",\r\n                \"type\": \"number\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"radius\",\r\n                \"type\": \"number\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"target\",\r\n                \"type\": \"BabylonjsCoreAbstractMesh\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isCamera\": true,\r\n        \"isNode\": true,\r\n        \"className\": \"FiberArcFollowCamera\"\r\n    };\r\n}\r\n\r\n/**\r\n * Creates a box mesh\r\n * * The parameter `size` sets the size (float) of each box side (default 1)\r\n * * You can set some different box dimensions by using the parameters `width`, `height` and `depth` (all by default have the same value of `size`)\r\n * * You can set different colors and different images to each box side by using the parameters `faceColors` (an array of 6 Color3 elements) and `faceUV` (an array of 6 Vector4 elements)\r\n * * Please read this tutorial : https://doc.babylonjs.com/how_to/createbox_per_face_textures_and_colors\r\n * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\r\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/babylon101/discover_basic_elements#side-orientation\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberBox implements HasPropsHandlers<FiberMeshProps> {\r\n    private propsHandlers: PropsHandler<FiberMeshProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberMeshPropsHandler()\r\n            , new FiberAbstractMeshPropsHandler()\r\n            , new FiberTransformNodePropsHandler()\r\n            , new FiberNodePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberMeshProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberMeshProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"FactoryMethod\",\r\n        \"libraryLocation\": \"meshBuilder\",\r\n        \"namespace\": \"@babylonjs/core\",\r\n        \"factoryMethod\": \"CreateBox\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"options\",\r\n                \"type\": [\r\n                    {\r\n                        \"name\": \"size\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"width\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"height\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"depth\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"faceUV\",\r\n                        \"type\": \"BabylonjsCoreVector4[]\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"faceColors\",\r\n                        \"type\": \"BabylonjsCoreColor4[]\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"sideOrientation\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"frontUVs\",\r\n                        \"type\": \"BabylonjsCoreVector4\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"backUVs\",\r\n                        \"type\": \"BabylonjsCoreVector4\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"updatable\",\r\n                        \"type\": \"boolean\",\r\n                        \"optional\": true\r\n                    }\r\n                ],\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"acceptsMaterials\": true,\r\n        \"isNode\": true,\r\n        \"isMesh\": true,\r\n        \"className\": \"FiberBox\"\r\n    };\r\n}\r\n\r\n/**\r\n * Creates a tiled box mesh\r\n * * faceTiles sets the pattern, tile size and number of tiles for a face\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberTiledBox implements HasPropsHandlers<FiberMeshProps> {\r\n    private propsHandlers: PropsHandler<FiberMeshProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberMeshPropsHandler()\r\n            , new FiberAbstractMeshPropsHandler()\r\n            , new FiberTransformNodePropsHandler()\r\n            , new FiberNodePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberMeshProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberMeshProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"FactoryMethod\",\r\n        \"libraryLocation\": \"meshBuilder\",\r\n        \"namespace\": \"@babylonjs/core\",\r\n        \"factoryMethod\": \"CreateTiledBox\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"options\",\r\n                \"type\": [\r\n                    {\r\n                        \"name\": \"pattern\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"size\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"width\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"height\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"depth\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": false\r\n                    },\r\n                    {\r\n                        \"name\": \"tileSize\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"tileWidth\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"tileHeight\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"faceUV\",\r\n                        \"type\": \"BabylonjsCoreVector4[]\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"faceColors\",\r\n                        \"type\": \"BabylonjsCoreColor4[]\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"alignHorizontal\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"alignVertical\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"sideOrientation\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"updatable\",\r\n                        \"type\": \"boolean\",\r\n                        \"optional\": true\r\n                    }\r\n                ],\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"acceptsMaterials\": true,\r\n        \"isNode\": true,\r\n        \"isMesh\": true,\r\n        \"className\": \"FiberTiledBox\"\r\n    };\r\n}\r\n\r\n/**\r\n * Creates a sphere mesh\r\n * * The parameter `diameter` sets the diameter size (float) of the sphere (default 1)\r\n * * You can set some different sphere dimensions, for instance to build an ellipsoid, by using the parameters `diameterX`, `diameterY` and `diameterZ` (all by default have the same value of `diameter`)\r\n * * The parameter `segments` sets the sphere number of horizontal stripes (positive integer, default 32)\r\n * * You can create an unclosed sphere with the parameter `arc` (positive float, default 1), valued between 0 and 1, what is the ratio of the circumference (latitude) : 2 x PI x ratio\r\n * * You can create an unclosed sphere on its height with the parameter `slice` (positive float, default1), valued between 0 and 1, what is the height ratio (longitude)\r\n * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\r\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/babylon101/discover_basic_elements#side-orientation\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberSphere implements HasPropsHandlers<FiberMeshProps> {\r\n    private propsHandlers: PropsHandler<FiberMeshProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberMeshPropsHandler()\r\n            , new FiberAbstractMeshPropsHandler()\r\n            , new FiberTransformNodePropsHandler()\r\n            , new FiberNodePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberMeshProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberMeshProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"FactoryMethod\",\r\n        \"libraryLocation\": \"meshBuilder\",\r\n        \"namespace\": \"@babylonjs/core\",\r\n        \"factoryMethod\": \"CreateSphere\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"options\",\r\n                \"type\": [\r\n                    {\r\n                        \"name\": \"segments\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"diameter\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"diameterX\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"diameterY\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"diameterZ\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"arc\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"slice\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"sideOrientation\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"frontUVs\",\r\n                        \"type\": \"BabylonjsCoreVector4\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"backUVs\",\r\n                        \"type\": \"BabylonjsCoreVector4\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"updatable\",\r\n                        \"type\": \"boolean\",\r\n                        \"optional\": true\r\n                    }\r\n                ],\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"acceptsMaterials\": true,\r\n        \"isNode\": true,\r\n        \"isMesh\": true,\r\n        \"className\": \"FiberSphere\"\r\n    };\r\n}\r\n\r\n/**\r\n * Creates a plane polygonal mesh.  By default, this is a disc\r\n * * The parameter `radius` sets the radius size (float) of the polygon (default 0.5)\r\n * * The parameter `tessellation` sets the number of polygon sides (positive integer, default 64). So a tessellation valued to 3 will build a triangle, to 4 a square, etc\r\n * * You can create an unclosed polygon with the parameter `arc` (positive float, default 1), valued between 0 and 1, what is the ratio of the circumference : 2 x PI x ratio\r\n * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\r\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/babylon101/discover_basic_elements#side-orientation\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberDisc implements HasPropsHandlers<FiberMeshProps> {\r\n    private propsHandlers: PropsHandler<FiberMeshProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberMeshPropsHandler()\r\n            , new FiberAbstractMeshPropsHandler()\r\n            , new FiberTransformNodePropsHandler()\r\n            , new FiberNodePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberMeshProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberMeshProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"FactoryMethod\",\r\n        \"libraryLocation\": \"meshBuilder\",\r\n        \"namespace\": \"@babylonjs/core\",\r\n        \"factoryMethod\": \"CreateDisc\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"options\",\r\n                \"type\": [\r\n                    {\r\n                        \"name\": \"radius\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"tessellation\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"arc\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"updatable\",\r\n                        \"type\": \"boolean\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"sideOrientation\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"frontUVs\",\r\n                        \"type\": \"BabylonjsCoreVector4\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"backUVs\",\r\n                        \"type\": \"BabylonjsCoreVector4\",\r\n                        \"optional\": true\r\n                    }\r\n                ],\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"acceptsMaterials\": true,\r\n        \"isNode\": true,\r\n        \"isMesh\": true,\r\n        \"className\": \"FiberDisc\"\r\n    };\r\n}\r\n\r\n/**\r\n * Creates a sphere based upon an icosahedron with 20 triangular faces which can be subdivided\r\n * * The parameter `radius` sets the radius size (float) of the icosphere (default 1)\r\n * * You can set some different icosphere dimensions, for instance to build an ellipsoid, by using the parameters `radiusX`, `radiusY` and `radiusZ` (all by default have the same value of `radius`)\r\n * * The parameter `subdivisions` sets the number of subdivisions (postive integer, default 4). The more subdivisions, the more faces on the icosphere whatever its size\r\n * * The parameter `flat` (boolean, default true) gives each side its own normals. Set it to false to get a smooth continuous light reflection on the surface\r\n * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\r\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/babylon101/discover_basic_elements#side-orientation\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberIcoSphere implements HasPropsHandlers<FiberMeshProps> {\r\n    private propsHandlers: PropsHandler<FiberMeshProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberMeshPropsHandler()\r\n            , new FiberAbstractMeshPropsHandler()\r\n            , new FiberTransformNodePropsHandler()\r\n            , new FiberNodePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberMeshProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberMeshProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"FactoryMethod\",\r\n        \"libraryLocation\": \"meshBuilder\",\r\n        \"namespace\": \"@babylonjs/core\",\r\n        \"factoryMethod\": \"CreateIcoSphere\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"options\",\r\n                \"type\": [\r\n                    {\r\n                        \"name\": \"radius\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"radiusX\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"radiusY\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"radiusZ\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"flat\",\r\n                        \"type\": \"boolean\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"subdivisions\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"sideOrientation\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"frontUVs\",\r\n                        \"type\": \"BabylonjsCoreVector4\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"backUVs\",\r\n                        \"type\": \"BabylonjsCoreVector4\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"updatable\",\r\n                        \"type\": \"boolean\",\r\n                        \"optional\": true\r\n                    }\r\n                ],\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"acceptsMaterials\": true,\r\n        \"isNode\": true,\r\n        \"isMesh\": true,\r\n        \"className\": \"FiberIcoSphere\"\r\n    };\r\n}\r\n\r\n/**\r\n * Creates a ribbon mesh. The ribbon is a parametric shape.  It has no predefined shape. Its final shape will depend on the input parameters\r\n * * The parameter `pathArray` is a required array of paths, what are each an array of successive Vector3. The pathArray parameter depicts the ribbon geometry\r\n * * The parameter `closeArray` (boolean, default false) creates a seam between the first and the last paths of the path array\r\n * * The parameter `closePath` (boolean, default false) creates a seam between the first and the last points of each path of the path array\r\n * * The parameter `offset` (positive integer, default : rounded half size of the pathArray length), is taken in account only if the `pathArray` is containing a single path\r\n * * It's the offset to join the points from the same path. Ex : offset = 10 means the point 1 is joined to the point 11\r\n * * The optional parameter `instance` is an instance of an existing Ribbon object to be updated with the passed `pathArray` parameter : https://doc.babylonjs.com/how_to/how_to_dynamically_morph_a_mesh#ribbon\r\n * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\r\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/babylon101/discover_basic_elements#side-orientation\r\n * * The optional parameter `invertUV` (boolean, default false) swaps in the geometry the U and V coordinates to apply a texture\r\n * * The parameter `uvs` is an optional flat array of `Vector2` to update/set each ribbon vertex with its own custom UV values instead of the computed ones\r\n * * The parameters `colors` is an optional flat array of `Color4` to set/update each ribbon vertex with its own custom color values\r\n * * Note that if you use the parameters `uvs` or `colors`, the passed arrays must be populated with the right number of elements, it is to say the number of ribbon vertices. Remember that if you set `closePath` to `true`, there's one extra vertex per path in the geometry\r\n * * Moreover, you can use the parameter `color` with `instance` (to update the ribbon), only if you previously used it at creation time\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberRibbon implements HasPropsHandlers<FiberMeshProps> {\r\n    private propsHandlers: PropsHandler<FiberMeshProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberMeshPropsHandler()\r\n            , new FiberAbstractMeshPropsHandler()\r\n            , new FiberTransformNodePropsHandler()\r\n            , new FiberNodePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberMeshProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberMeshProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"FactoryMethod\",\r\n        \"libraryLocation\": \"meshBuilder\",\r\n        \"namespace\": \"@babylonjs/core\",\r\n        \"factoryMethod\": \"CreateRibbon\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"options\",\r\n                \"type\": [\r\n                    {\r\n                        \"name\": \"pathArray\",\r\n                        \"type\": \"BabylonjsCoreVector3[][]\",\r\n                        \"optional\": false\r\n                    },\r\n                    {\r\n                        \"name\": \"closeArray\",\r\n                        \"type\": \"boolean\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"closePath\",\r\n                        \"type\": \"boolean\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"offset\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"updatable\",\r\n                        \"type\": \"boolean\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"sideOrientation\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"frontUVs\",\r\n                        \"type\": \"BabylonjsCoreVector4\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"backUVs\",\r\n                        \"type\": \"BabylonjsCoreVector4\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"instance\",\r\n                        \"type\": \"BabylonjsCoreMesh\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"invertUV\",\r\n                        \"type\": \"boolean\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"uvs\",\r\n                        \"type\": \"BabylonjsCoreVector2[]\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"colors\",\r\n                        \"type\": \"BabylonjsCoreColor4[]\",\r\n                        \"optional\": true\r\n                    }\r\n                ],\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"acceptsMaterials\": true,\r\n        \"isNode\": true,\r\n        \"isMesh\": true,\r\n        \"className\": \"FiberRibbon\"\r\n    };\r\n}\r\n\r\n/**\r\n * Creates a cylinder or a cone mesh\r\n * * The parameter `height` sets the height size (float) of the cylinder/cone (float, default 2).\r\n * * The parameter `diameter` sets the diameter of the top and bottom cap at once (float, default 1).\r\n * * The parameters `diameterTop` and `diameterBottom` overwrite the parameter `diameter` and set respectively the top cap and bottom cap diameter (floats, default 1). The parameter \"diameterBottom\" can't be zero.\r\n * * The parameter `tessellation` sets the number of cylinder sides (positive integer, default 24). Set it to 3 to get a prism for instance.\r\n * * The parameter `subdivisions` sets the number of rings along the cylinder height (positive integer, default 1).\r\n * * The parameter `hasRings` (boolean, default false) makes the subdivisions independent from each other, so they become different faces.\r\n * * The parameter `enclose`  (boolean, default false) adds two extra faces per subdivision to a sliced cylinder to close it around its height axis.\r\n * * The parameter `cap` sets the way the cylinder is capped. Possible values : BABYLON.Mesh.NO_CAP, BABYLON.Mesh.CAP_START, BABYLON.Mesh.CAP_END, BABYLON.Mesh.CAP_ALL (default).\r\n * * The parameter `arc` (float, default 1) is the ratio (max 1) to apply to the circumference to slice the cylinder.\r\n * * You can set different colors and different images to each box side by using the parameters `faceColors` (an array of n Color3 elements) and `faceUV` (an array of n Vector4 elements).\r\n * * The value of n is the number of cylinder faces. If the cylinder has only 1 subdivisions, n equals : top face + cylinder surface + bottom face = 3\r\n * * Now, if the cylinder has 5 independent subdivisions (hasRings = true), n equals : top face + 5 stripe surfaces + bottom face = 2 + 5 = 7\r\n * * Finally, if the cylinder has 5 independent subdivisions and is enclose, n equals : top face + 5 x (stripe surface + 2 closing faces) + bottom face = 2 + 5 * 3 = 17\r\n * * Each array (color or UVs) is always ordered the same way : the first element is the bottom cap, the last element is the top cap. The other elements are each a ring surface.\r\n * * If `enclose` is false, a ring surface is one element.\r\n * * If `enclose` is true, a ring surface is 3 successive elements in the array : the tubular surface, then the two closing faces.\r\n * * Example how to set colors and textures on a sliced cylinder : https://www.html5gamedevs.com/topic/17945-creating-a-closed-slice-of-a-cylinder/#comment-106379\r\n * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\r\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/babylon101/discover_basic_elements#side-orientation\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created.\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberCylinder implements HasPropsHandlers<FiberMeshProps> {\r\n    private propsHandlers: PropsHandler<FiberMeshProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberMeshPropsHandler()\r\n            , new FiberAbstractMeshPropsHandler()\r\n            , new FiberTransformNodePropsHandler()\r\n            , new FiberNodePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberMeshProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberMeshProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"FactoryMethod\",\r\n        \"libraryLocation\": \"meshBuilder\",\r\n        \"namespace\": \"@babylonjs/core\",\r\n        \"factoryMethod\": \"CreateCylinder\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"options\",\r\n                \"type\": [\r\n                    {\r\n                        \"name\": \"height\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"diameterTop\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"diameterBottom\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"diameter\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"tessellation\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"subdivisions\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"arc\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"faceColors\",\r\n                        \"type\": \"BabylonjsCoreColor4[]\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"faceUV\",\r\n                        \"type\": \"BabylonjsCoreVector4[]\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"updatable\",\r\n                        \"type\": \"boolean\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"hasRings\",\r\n                        \"type\": \"boolean\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"enclose\",\r\n                        \"type\": \"boolean\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"cap\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"sideOrientation\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"frontUVs\",\r\n                        \"type\": \"BabylonjsCoreVector4\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"backUVs\",\r\n                        \"type\": \"BabylonjsCoreVector4\",\r\n                        \"optional\": true\r\n                    }\r\n                ],\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"acceptsMaterials\": true,\r\n        \"isNode\": true,\r\n        \"isMesh\": true,\r\n        \"className\": \"FiberCylinder\"\r\n    };\r\n}\r\n\r\n/**\r\n * Creates a torus mesh\r\n * * The parameter `diameter` sets the diameter size (float) of the torus (default 1)\r\n * * The parameter `thickness` sets the diameter size of the tube of the torus (float, default 0.5)\r\n * * The parameter `tessellation` sets the number of torus sides (postive integer, default 16)\r\n * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\r\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/babylon101/discover_basic_elements#side-orientation\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created.\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberTorus implements HasPropsHandlers<FiberMeshProps> {\r\n    private propsHandlers: PropsHandler<FiberMeshProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberMeshPropsHandler()\r\n            , new FiberAbstractMeshPropsHandler()\r\n            , new FiberTransformNodePropsHandler()\r\n            , new FiberNodePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberMeshProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberMeshProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"FactoryMethod\",\r\n        \"libraryLocation\": \"meshBuilder\",\r\n        \"namespace\": \"@babylonjs/core\",\r\n        \"factoryMethod\": \"CreateTorus\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"options\",\r\n                \"type\": [\r\n                    {\r\n                        \"name\": \"diameter\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"thickness\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"tessellation\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"updatable\",\r\n                        \"type\": \"boolean\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"sideOrientation\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"frontUVs\",\r\n                        \"type\": \"BabylonjsCoreVector4\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"backUVs\",\r\n                        \"type\": \"BabylonjsCoreVector4\",\r\n                        \"optional\": true\r\n                    }\r\n                ],\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"acceptsMaterials\": true,\r\n        \"isNode\": true,\r\n        \"isMesh\": true,\r\n        \"className\": \"FiberTorus\"\r\n    };\r\n}\r\n\r\n/**\r\n * Creates a torus knot mesh\r\n * * The parameter `radius` sets the global radius size (float) of the torus knot (default 2)\r\n * * The parameter `radialSegments` sets the number of sides on each tube segments (positive integer, default 32)\r\n * * The parameter `tubularSegments` sets the number of tubes to decompose the knot into (positive integer, default 32)\r\n * * The parameters `p` and `q` are the number of windings on each axis (positive integers, default 2 and 3)\r\n * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\r\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/babylon101/discover_basic_elements#side-orientation\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created.\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberTorusKnot implements HasPropsHandlers<FiberMeshProps> {\r\n    private propsHandlers: PropsHandler<FiberMeshProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberMeshPropsHandler()\r\n            , new FiberAbstractMeshPropsHandler()\r\n            , new FiberTransformNodePropsHandler()\r\n            , new FiberNodePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberMeshProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberMeshProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"FactoryMethod\",\r\n        \"libraryLocation\": \"meshBuilder\",\r\n        \"namespace\": \"@babylonjs/core\",\r\n        \"factoryMethod\": \"CreateTorusKnot\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"options\",\r\n                \"type\": [\r\n                    {\r\n                        \"name\": \"radius\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"tube\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"radialSegments\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"tubularSegments\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"p\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"q\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"updatable\",\r\n                        \"type\": \"boolean\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"sideOrientation\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"frontUVs\",\r\n                        \"type\": \"BabylonjsCoreVector4\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"backUVs\",\r\n                        \"type\": \"BabylonjsCoreVector4\",\r\n                        \"optional\": true\r\n                    }\r\n                ],\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"acceptsMaterials\": true,\r\n        \"isNode\": true,\r\n        \"isMesh\": true,\r\n        \"className\": \"FiberTorusKnot\"\r\n    };\r\n}\r\n\r\n/**\r\n * Creates a line system mesh. A line system is a pool of many lines gathered in a single mesh\r\n * * A line system mesh is considered as a parametric shape since it has no predefined original shape. Its shape is determined by the passed array of lines as an input parameter\r\n * * Like every other parametric shape, it is dynamically updatable by passing an existing instance of LineSystem to this static function\r\n * * The parameter `lines` is an array of lines, each line being an array of successive Vector3\r\n * * The optional parameter `instance` is an instance of an existing LineSystem object to be updated with the passed `lines` parameter\r\n * * The optional parameter `colors` is an array of line colors, each line colors being an array of successive Color4, one per line point\r\n * * The optional parameter `useVertexAlpha` is to be set to `false` (default `true`) when you don't need the alpha blending (faster)\r\n * * Updating a simple Line mesh, you just need to update every line in the `lines` array : https://doc.babylonjs.com/how_to/how_to_dynamically_morph_a_mesh#lines-and-dashedlines\r\n * * When updating an instance, remember that only line point positions can change, not the number of points, neither the number of lines\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberLineSystem implements HasPropsHandlers<FiberMeshProps> {\r\n    private propsHandlers: PropsHandler<FiberMeshProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberMeshPropsHandler()\r\n            , new FiberAbstractMeshPropsHandler()\r\n            , new FiberTransformNodePropsHandler()\r\n            , new FiberNodePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberMeshProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberMeshProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"FactoryMethod\",\r\n        \"libraryLocation\": \"meshBuilder\",\r\n        \"namespace\": \"@babylonjs/core\",\r\n        \"factoryMethod\": \"CreateLineSystem\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"options\",\r\n                \"type\": [\r\n                    {\r\n                        \"name\": \"lines\",\r\n                        \"type\": \"BabylonjsCoreVector3[][]\",\r\n                        \"optional\": false\r\n                    },\r\n                    {\r\n                        \"name\": \"updatable\",\r\n                        \"type\": \"boolean\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"instance\",\r\n                        \"type\": \"BabylonjsCoreLinesMesh\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"colors\",\r\n                        \"type\": \"BabylonjsCoreColor4[][]\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"useVertexAlpha\",\r\n                        \"type\": \"boolean\",\r\n                        \"optional\": true\r\n                    }\r\n                ],\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"acceptsMaterials\": true,\r\n        \"isNode\": true,\r\n        \"isMesh\": true,\r\n        \"className\": \"FiberLineSystem\"\r\n    };\r\n}\r\n\r\n/**\r\n * Creates a line mesh\r\n * A line mesh is considered as a parametric shape since it has no predefined original shape. Its shape is determined by the passed array of points as an input parameter\r\n * * Like every other parametric shape, it is dynamically updatable by passing an existing instance of LineMesh to this static function\r\n * * The parameter `points` is an array successive Vector3\r\n * * The optional parameter `instance` is an instance of an existing LineMesh object to be updated with the passed `points` parameter : https://doc.babylonjs.com/how_to/how_to_dynamically_morph_a_mesh#lines-and-dashedlines\r\n * * The optional parameter `colors` is an array of successive Color4, one per line point\r\n * * The optional parameter `useVertexAlpha` is to be set to `false` (default `true`) when you don't need alpha blending (faster)\r\n * * When updating an instance, remember that only point positions can change, not the number of points\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberLines implements HasPropsHandlers<FiberMeshProps> {\r\n    private propsHandlers: PropsHandler<FiberMeshProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberMeshPropsHandler()\r\n            , new FiberAbstractMeshPropsHandler()\r\n            , new FiberTransformNodePropsHandler()\r\n            , new FiberNodePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberMeshProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberMeshProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"FactoryMethod\",\r\n        \"libraryLocation\": \"meshBuilder\",\r\n        \"namespace\": \"@babylonjs/core\",\r\n        \"factoryMethod\": \"CreateLines\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"options\",\r\n                \"type\": [\r\n                    {\r\n                        \"name\": \"points\",\r\n                        \"type\": \"BabylonjsCoreVector3[]\",\r\n                        \"optional\": false\r\n                    },\r\n                    {\r\n                        \"name\": \"updatable\",\r\n                        \"type\": \"boolean\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"instance\",\r\n                        \"type\": \"BabylonjsCoreLinesMesh\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"colors\",\r\n                        \"type\": \"BabylonjsCoreColor4[]\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"useVertexAlpha\",\r\n                        \"type\": \"boolean\",\r\n                        \"optional\": true\r\n                    }\r\n                ],\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"acceptsMaterials\": true,\r\n        \"isNode\": true,\r\n        \"isMesh\": true,\r\n        \"className\": \"FiberLines\"\r\n    };\r\n}\r\n\r\n/**\r\n * Creates a dashed line mesh\r\n * * A dashed line mesh is considered as a parametric shape since it has no predefined original shape. Its shape is determined by the passed array of points as an input parameter\r\n * * Like every other parametric shape, it is dynamically updatable by passing an existing instance of LineMesh to this static function\r\n * * The parameter `points` is an array successive Vector3\r\n * * The parameter `dashNb` is the intended total number of dashes (positive integer, default 200)\r\n * * The parameter `dashSize` is the size of the dashes relatively the dash number (positive float, default 3)\r\n * * The parameter `gapSize` is the size of the gap between two successive dashes relatively the dash number (positive float, default 1)\r\n * * The optional parameter `instance` is an instance of an existing LineMesh object to be updated with the passed `points` parameter : https://doc.babylonjs.com/how_to/how_to_dynamically_morph_a_mesh#lines-and-dashedlines\r\n * * When updating an instance, remember that only point positions can change, not the number of points\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberDashedLines implements HasPropsHandlers<FiberMeshProps> {\r\n    private propsHandlers: PropsHandler<FiberMeshProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberMeshPropsHandler()\r\n            , new FiberAbstractMeshPropsHandler()\r\n            , new FiberTransformNodePropsHandler()\r\n            , new FiberNodePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberMeshProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberMeshProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"FactoryMethod\",\r\n        \"libraryLocation\": \"meshBuilder\",\r\n        \"namespace\": \"@babylonjs/core\",\r\n        \"factoryMethod\": \"CreateDashedLines\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"options\",\r\n                \"type\": [\r\n                    {\r\n                        \"name\": \"points\",\r\n                        \"type\": \"BabylonjsCoreVector3[]\",\r\n                        \"optional\": false\r\n                    },\r\n                    {\r\n                        \"name\": \"dashSize\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"gapSize\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"dashNb\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"updatable\",\r\n                        \"type\": \"boolean\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"instance\",\r\n                        \"type\": \"BabylonjsCoreLinesMesh\",\r\n                        \"optional\": true\r\n                    }\r\n                ],\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"acceptsMaterials\": true,\r\n        \"isNode\": true,\r\n        \"isMesh\": true,\r\n        \"className\": \"FiberDashedLines\"\r\n    };\r\n}\r\n\r\n/**\r\n * Creates an extruded shape mesh. The extrusion is a parametric shape. It has no predefined shape. Its final shape will depend on the input parameters.\r\n * * The parameter `shape` is a required array of successive Vector3. This array depicts the shape to be extruded in its local space : the shape must be designed in the xOy plane and will be extruded along the Z axis.\r\n * * The parameter `path` is a required array of successive Vector3. This is the axis curve the shape is extruded along.\r\n * * The parameter `rotation` (float, default 0 radians) is the angle value to rotate the shape each step (each path point), from the former step (so rotation added each step) along the curve.\r\n * * The parameter `scale` (float, default 1) is the value to scale the shape.\r\n * * The parameter `cap` sets the way the extruded shape is capped. Possible values : BABYLON.Mesh.NO_CAP (default), BABYLON.Mesh.CAP_START, BABYLON.Mesh.CAP_END, BABYLON.Mesh.CAP_ALL\r\n * * The optional parameter `instance` is an instance of an existing ExtrudedShape object to be updated with the passed `shape`, `path`, `scale` or `rotation` parameters : https://doc.babylonjs.com/how_to/how_to_dynamically_morph_a_mesh#extruded-shape\r\n * * Remember you can only change the shape or path point positions, not their number when updating an extruded shape.\r\n * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\r\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/babylon101/discover_basic_elements#side-orientation\r\n * * The optional parameter `invertUV` (boolean, default false) swaps in the geometry the U and V coordinates to apply a texture.\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created.\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberExtrudeShape implements HasPropsHandlers<FiberMeshProps> {\r\n    private propsHandlers: PropsHandler<FiberMeshProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberMeshPropsHandler()\r\n            , new FiberAbstractMeshPropsHandler()\r\n            , new FiberTransformNodePropsHandler()\r\n            , new FiberNodePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberMeshProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberMeshProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"FactoryMethod\",\r\n        \"libraryLocation\": \"meshBuilder\",\r\n        \"namespace\": \"@babylonjs/core\",\r\n        \"factoryMethod\": \"ExtrudeShape\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"options\",\r\n                \"type\": [\r\n                    {\r\n                        \"name\": \"shape\",\r\n                        \"type\": \"BabylonjsCoreVector3[]\",\r\n                        \"optional\": false\r\n                    },\r\n                    {\r\n                        \"name\": \"path\",\r\n                        \"type\": \"BabylonjsCoreVector3[]\",\r\n                        \"optional\": false\r\n                    },\r\n                    {\r\n                        \"name\": \"scale\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"rotation\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"cap\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"updatable\",\r\n                        \"type\": \"boolean\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"sideOrientation\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"frontUVs\",\r\n                        \"type\": \"BabylonjsCoreVector4\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"backUVs\",\r\n                        \"type\": \"BabylonjsCoreVector4\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"instance\",\r\n                        \"type\": \"BabylonjsCoreMesh\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"invertUV\",\r\n                        \"type\": \"boolean\",\r\n                        \"optional\": true\r\n                    }\r\n                ],\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"acceptsMaterials\": true,\r\n        \"isNode\": true,\r\n        \"isMesh\": true,\r\n        \"className\": \"FiberExtrudeShape\"\r\n    };\r\n}\r\n\r\n/**\r\n * Creates an custom extruded shape mesh.\r\n * The custom extrusion is a parametric shape. It has no predefined shape. Its final shape will depend on the input parameters.\r\n * * The parameter `shape` is a required array of successive Vector3. This array depicts the shape to be extruded in its local space : the shape must be designed in the xOy plane and will be extruded along the Z axis.\r\n * * The parameter `path` is a required array of successive Vector3. This is the axis curve the shape is extruded along.\r\n * * The parameter `rotationFunction` (JS function) is a custom Javascript function called on each path point. This function is passed the position i of the point in the path and the distance of this point from the begining of the path\r\n * * It must returns a float value that will be the rotation in radians applied to the shape on each path point.\r\n * * The parameter `scaleFunction` (JS function) is a custom Javascript function called on each path point. This function is passed the position i of the point in the path and the distance of this point from the begining of the path\r\n * * It must returns a float value that will be the scale value applied to the shape on each path point\r\n * * The parameter `ribbonClosePath` (boolean, default false) forces the extrusion underlying ribbon to close all the paths in its `pathArray`\r\n * * The parameter `ribbonCloseArray` (boolean, default false) forces the extrusion underlying ribbon to close its `pathArray`\r\n * * The parameter `cap` sets the way the extruded shape is capped. Possible values : BABYLON.Mesh.NO_CAP (default), BABYLON.Mesh.CAP_START, BABYLON.Mesh.CAP_END, BABYLON.Mesh.CAP_ALL\r\n * * The optional parameter `instance` is an instance of an existing ExtrudedShape object to be updated with the passed `shape`, `path`, `scale` or `rotation` parameters : https://doc.babylonjs.com/how_to/how_to_dynamically_morph_a_mesh#extruded-shape\r\n * * Remember you can only change the shape or path point positions, not their number when updating an extruded shape\r\n * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\r\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/babylon101/discover_basic_elements#side-orientation\r\n * * The optional parameter `invertUV` (boolean, default false) swaps in the geometry the U and V coordinates to apply a texture\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberExtrudeShapeCustom implements HasPropsHandlers<FiberMeshProps> {\r\n    private propsHandlers: PropsHandler<FiberMeshProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberMeshPropsHandler()\r\n            , new FiberAbstractMeshPropsHandler()\r\n            , new FiberTransformNodePropsHandler()\r\n            , new FiberNodePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberMeshProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberMeshProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"FactoryMethod\",\r\n        \"libraryLocation\": \"meshBuilder\",\r\n        \"namespace\": \"@babylonjs/core\",\r\n        \"factoryMethod\": \"ExtrudeShapeCustom\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"options\",\r\n                \"type\": [\r\n                    {\r\n                        \"name\": \"shape\",\r\n                        \"type\": \"BabylonjsCoreVector3[]\",\r\n                        \"optional\": false\r\n                    },\r\n                    {\r\n                        \"name\": \"path\",\r\n                        \"type\": \"BabylonjsCoreVector3[]\",\r\n                        \"optional\": false\r\n                    },\r\n                    {\r\n                        \"name\": \"scaleFunction\",\r\n                        \"type\": \"any\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"rotationFunction\",\r\n                        \"type\": \"any\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"ribbonCloseArray\",\r\n                        \"type\": \"boolean\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"ribbonClosePath\",\r\n                        \"type\": \"boolean\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"cap\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"updatable\",\r\n                        \"type\": \"boolean\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"sideOrientation\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"frontUVs\",\r\n                        \"type\": \"BabylonjsCoreVector4\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"backUVs\",\r\n                        \"type\": \"BabylonjsCoreVector4\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"instance\",\r\n                        \"type\": \"BabylonjsCoreMesh\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"invertUV\",\r\n                        \"type\": \"boolean\",\r\n                        \"optional\": true\r\n                    }\r\n                ],\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"acceptsMaterials\": true,\r\n        \"isNode\": true,\r\n        \"isMesh\": true,\r\n        \"className\": \"FiberExtrudeShapeCustom\"\r\n    };\r\n}\r\n\r\n/**\r\n * Creates lathe mesh.\r\n * The lathe is a shape with a symetry axis : a 2D model shape is rotated around this axis to design the lathe\r\n * * The parameter `shape` is a required array of successive Vector3. This array depicts the shape to be rotated in its local space : the shape must be designed in the xOy plane and will be rotated around the Y axis. It's usually a 2D shape, so the Vector3 z coordinates are often set to zero\r\n * * The parameter `radius` (positive float, default 1) is the radius value of the lathe\r\n * * The parameter `tessellation` (positive integer, default 64) is the side number of the lathe\r\n * * The parameter `clip` (positive integer, default 0) is the number of sides to not create without effecting the general shape of the sides\r\n * * The parameter `arc` (positive float, default 1) is the ratio of the lathe. 0.5 builds for instance half a lathe, so an opened shape\r\n * * The parameter `closed` (boolean, default true) opens/closes the lathe circumference. This should be set to false when used with the parameter \"arc\"\r\n * * The parameter `cap` sets the way the extruded shape is capped. Possible values : BABYLON.Mesh.NO_CAP (default), BABYLON.Mesh.CAP_START, BABYLON.Mesh.CAP_END, BABYLON.Mesh.CAP_ALL\r\n * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\r\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/babylon101/discover_basic_elements#side-orientation\r\n * * The optional parameter `invertUV` (boolean, default false) swaps in the geometry the U and V coordinates to apply a texture\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberLathe implements HasPropsHandlers<FiberMeshProps> {\r\n    private propsHandlers: PropsHandler<FiberMeshProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberMeshPropsHandler()\r\n            , new FiberAbstractMeshPropsHandler()\r\n            , new FiberTransformNodePropsHandler()\r\n            , new FiberNodePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberMeshProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberMeshProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"FactoryMethod\",\r\n        \"libraryLocation\": \"meshBuilder\",\r\n        \"namespace\": \"@babylonjs/core\",\r\n        \"factoryMethod\": \"CreateLathe\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"options\",\r\n                \"type\": [\r\n                    {\r\n                        \"name\": \"shape\",\r\n                        \"type\": \"BabylonjsCoreVector3[]\",\r\n                        \"optional\": false\r\n                    },\r\n                    {\r\n                        \"name\": \"radius\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"tessellation\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"clip\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"arc\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"closed\",\r\n                        \"type\": \"boolean\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"updatable\",\r\n                        \"type\": \"boolean\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"sideOrientation\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"frontUVs\",\r\n                        \"type\": \"BabylonjsCoreVector4\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"backUVs\",\r\n                        \"type\": \"BabylonjsCoreVector4\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"cap\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"invertUV\",\r\n                        \"type\": \"boolean\",\r\n                        \"optional\": true\r\n                    }\r\n                ],\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"acceptsMaterials\": true,\r\n        \"isNode\": true,\r\n        \"isMesh\": true,\r\n        \"className\": \"FiberLathe\"\r\n    };\r\n}\r\n\r\n/**\r\n * Creates a tiled plane mesh\r\n * * You can set a limited pattern arrangement with the tiles\r\n * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\r\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/babylon101/discover_basic_elements#side-orientation\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberTiledPlane implements HasPropsHandlers<FiberMeshProps> {\r\n    private propsHandlers: PropsHandler<FiberMeshProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberMeshPropsHandler()\r\n            , new FiberAbstractMeshPropsHandler()\r\n            , new FiberTransformNodePropsHandler()\r\n            , new FiberNodePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberMeshProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberMeshProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"FactoryMethod\",\r\n        \"libraryLocation\": \"meshBuilder\",\r\n        \"namespace\": \"@babylonjs/core\",\r\n        \"factoryMethod\": \"CreateTiledPlane\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"options\",\r\n                \"type\": [\r\n                    {\r\n                        \"name\": \"pattern\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"tileSize\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"tileWidth\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"tileHeight\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"size\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"width\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"height\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"alignHorizontal\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"alignVertical\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"sideOrientation\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"frontUVs\",\r\n                        \"type\": \"BabylonjsCoreVector4\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"backUVs\",\r\n                        \"type\": \"BabylonjsCoreVector4\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"updatable\",\r\n                        \"type\": \"boolean\",\r\n                        \"optional\": true\r\n                    }\r\n                ],\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"acceptsMaterials\": true,\r\n        \"isNode\": true,\r\n        \"isMesh\": true,\r\n        \"className\": \"FiberTiledPlane\"\r\n    };\r\n}\r\n\r\n/**\r\n * Creates a plane mesh\r\n * * The parameter `size` sets the size (float) of both sides of the plane at once (default 1)\r\n * * You can set some different plane dimensions by using the parameters `width` and `height` (both by default have the same value of `size`)\r\n * * The parameter `sourcePlane` is a Plane instance. It builds a mesh plane from a Math plane\r\n * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\r\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/babylon101/discover_basic_elements#side-orientation\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberPlane implements HasPropsHandlers<FiberMeshProps> {\r\n    private propsHandlers: PropsHandler<FiberMeshProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberMeshPropsHandler()\r\n            , new FiberAbstractMeshPropsHandler()\r\n            , new FiberTransformNodePropsHandler()\r\n            , new FiberNodePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberMeshProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberMeshProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"FactoryMethod\",\r\n        \"libraryLocation\": \"meshBuilder\",\r\n        \"namespace\": \"@babylonjs/core\",\r\n        \"factoryMethod\": \"CreatePlane\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"options\",\r\n                \"type\": [\r\n                    {\r\n                        \"name\": \"size\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"width\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"height\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"sideOrientation\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"frontUVs\",\r\n                        \"type\": \"BabylonjsCoreVector4\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"backUVs\",\r\n                        \"type\": \"BabylonjsCoreVector4\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"updatable\",\r\n                        \"type\": \"boolean\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"sourcePlane\",\r\n                        \"type\": \"BabylonjsCorePlane\",\r\n                        \"optional\": true\r\n                    }\r\n                ],\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"acceptsMaterials\": true,\r\n        \"isNode\": true,\r\n        \"isMesh\": true,\r\n        \"className\": \"FiberPlane\"\r\n    };\r\n}\r\n\r\n/**\r\n * Creates a ground mesh\r\n * * The parameters `width` and `height` (floats, default 1) set the width and height sizes of the ground\r\n * * The parameter `subdivisions` (positive integer) sets the number of subdivisions per side\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberGround implements HasPropsHandlers<FiberMeshProps> {\r\n    private propsHandlers: PropsHandler<FiberMeshProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberMeshPropsHandler()\r\n            , new FiberAbstractMeshPropsHandler()\r\n            , new FiberTransformNodePropsHandler()\r\n            , new FiberNodePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberMeshProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberMeshProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"FactoryMethod\",\r\n        \"libraryLocation\": \"meshBuilder\",\r\n        \"namespace\": \"@babylonjs/core\",\r\n        \"factoryMethod\": \"CreateGround\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"options\",\r\n                \"type\": [\r\n                    {\r\n                        \"name\": \"width\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"height\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"subdivisions\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"subdivisionsX\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"subdivisionsY\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"updatable\",\r\n                        \"type\": \"boolean\",\r\n                        \"optional\": true\r\n                    }\r\n                ],\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"acceptsMaterials\": true,\r\n        \"isNode\": true,\r\n        \"isMesh\": true,\r\n        \"className\": \"FiberGround\"\r\n    };\r\n}\r\n\r\n/**\r\n * Creates a tiled ground mesh\r\n * * The parameters `xmin` and `xmax` (floats, default -1 and 1) set the ground minimum and maximum X coordinates\r\n * * The parameters `zmin` and `zmax` (floats, default -1 and 1) set the ground minimum and maximum Z coordinates\r\n * * The parameter `subdivisions` is a javascript object `{w: positive integer, h: positive integer}` (default `{w: 6, h: 6}`). `w` and `h` are the numbers of subdivisions on the ground width and height. Each subdivision is called a tile\r\n * * The parameter `precision` is a javascript object `{w: positive integer, h: positive integer}` (default `{w: 2, h: 2}`). `w` and `h` are the numbers of subdivisions on the ground width and height of each tile\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created.\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberTiledGround implements HasPropsHandlers<FiberMeshProps> {\r\n    private propsHandlers: PropsHandler<FiberMeshProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberMeshPropsHandler()\r\n            , new FiberAbstractMeshPropsHandler()\r\n            , new FiberTransformNodePropsHandler()\r\n            , new FiberNodePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberMeshProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberMeshProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"FactoryMethod\",\r\n        \"libraryLocation\": \"meshBuilder\",\r\n        \"namespace\": \"@babylonjs/core\",\r\n        \"factoryMethod\": \"CreateTiledGround\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"options\",\r\n                \"type\": [\r\n                    {\r\n                        \"name\": \"xmin\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": false\r\n                    },\r\n                    {\r\n                        \"name\": \"zmin\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": false\r\n                    },\r\n                    {\r\n                        \"name\": \"xmax\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": false\r\n                    },\r\n                    {\r\n                        \"name\": \"zmax\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": false\r\n                    },\r\n                    {\r\n                        \"name\": \"subdivisions\",\r\n                        \"type\": \"{ w: number; h: number; }\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"precision\",\r\n                        \"type\": \"{ w: number; h: number; }\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"updatable\",\r\n                        \"type\": \"boolean\",\r\n                        \"optional\": true\r\n                    }\r\n                ],\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"acceptsMaterials\": true,\r\n        \"isNode\": true,\r\n        \"isMesh\": true,\r\n        \"className\": \"FiberTiledGround\"\r\n    };\r\n}\r\n\r\n/**\r\n * Creates a ground mesh from a height map\r\n * * The parameter `url` sets the URL of the height map image resource.\r\n * * The parameters `width` and `height` (positive floats, default 10) set the ground width and height sizes.\r\n * * The parameter `subdivisions` (positive integer, default 1) sets the number of subdivision per side.\r\n * * The parameter `minHeight` (float, default 0) is the minimum altitude on the ground.\r\n * * The parameter `maxHeight` (float, default 1) is the maximum altitude on the ground.\r\n * * The parameter `colorFilter` (optional Color3, default (0.3, 0.59, 0.11) ) is the filter to apply to the image pixel colors to compute the height.\r\n * * The parameter `onReady` is a javascript callback function that will be called  once the mesh is just built (the height map download can last some time).\r\n * * The parameter `alphaFilter` will filter any data where the alpha channel is below this value, defaults 0 (all data visible)\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created.\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberGroundFromHeightMap implements HasPropsHandlers<FiberMeshProps> {\r\n    private propsHandlers: PropsHandler<FiberMeshProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberMeshPropsHandler()\r\n            , new FiberAbstractMeshPropsHandler()\r\n            , new FiberTransformNodePropsHandler()\r\n            , new FiberNodePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberMeshProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberMeshProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"FactoryMethod\",\r\n        \"libraryLocation\": \"meshBuilder\",\r\n        \"namespace\": \"@babylonjs/core\",\r\n        \"factoryMethod\": \"CreateGroundFromHeightMap\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"url\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"options\",\r\n                \"type\": [\r\n                    {\r\n                        \"name\": \"width\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"height\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"subdivisions\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"minHeight\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"maxHeight\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"colorFilter\",\r\n                        \"type\": \"BabylonjsCoreColor3\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"alphaFilter\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"updatable\",\r\n                        \"type\": \"boolean\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"onReady\",\r\n                        \"type\": \"(mesh: BabylonjsCoreGroundMesh) => void\",\r\n                        \"optional\": true\r\n                    }\r\n                ],\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"acceptsMaterials\": true,\r\n        \"isNode\": true,\r\n        \"isMesh\": true,\r\n        \"className\": \"FiberGroundFromHeightMap\"\r\n    };\r\n}\r\n\r\n/**\r\n * Creates a polygon mesh\r\n * The polygon's shape will depend on the input parameters and is constructed parallel to a ground mesh\r\n * * The parameter `shape` is a required array of successive Vector3 representing the corners of the polygon in th XoZ plane, that is y = 0 for all vectors\r\n * * You can set the mesh side orientation with the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4)\r\n * * Remember you can only change the shape positions, not their number when updating a polygon\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberPolygon implements HasPropsHandlers<FiberMeshProps> {\r\n    private propsHandlers: PropsHandler<FiberMeshProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberMeshPropsHandler()\r\n            , new FiberAbstractMeshPropsHandler()\r\n            , new FiberTransformNodePropsHandler()\r\n            , new FiberNodePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberMeshProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberMeshProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"FactoryMethod\",\r\n        \"libraryLocation\": \"meshBuilder\",\r\n        \"namespace\": \"@babylonjs/core\",\r\n        \"factoryMethod\": \"CreatePolygon\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"options\",\r\n                \"type\": [\r\n                    {\r\n                        \"name\": \"shape\",\r\n                        \"type\": \"BabylonjsCoreVector3[]\",\r\n                        \"optional\": false\r\n                    },\r\n                    {\r\n                        \"name\": \"holes\",\r\n                        \"type\": \"BabylonjsCoreVector3[][]\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"depth\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"faceUV\",\r\n                        \"type\": \"BabylonjsCoreVector4[]\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"faceColors\",\r\n                        \"type\": \"BabylonjsCoreColor4[]\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"updatable\",\r\n                        \"type\": \"boolean\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"sideOrientation\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"frontUVs\",\r\n                        \"type\": \"BabylonjsCoreVector4\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"backUVs\",\r\n                        \"type\": \"BabylonjsCoreVector4\",\r\n                        \"optional\": true\r\n                    }\r\n                ],\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"earcutInjection\",\r\n                \"type\": \"any\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"acceptsMaterials\": true,\r\n        \"isNode\": true,\r\n        \"isMesh\": true,\r\n        \"className\": \"FiberPolygon\"\r\n    };\r\n}\r\n\r\n/**\r\n * Creates an extruded polygon mesh, with depth in the Y direction.\r\n * * You can set different colors and different images to the top, bottom and extruded side by using the parameters `faceColors` (an array of 3 Color3 elements) and `faceUV` (an array of 3 Vector4 elements)\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberExtrudePolygon implements HasPropsHandlers<FiberMeshProps> {\r\n    private propsHandlers: PropsHandler<FiberMeshProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberMeshPropsHandler()\r\n            , new FiberAbstractMeshPropsHandler()\r\n            , new FiberTransformNodePropsHandler()\r\n            , new FiberNodePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberMeshProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberMeshProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"FactoryMethod\",\r\n        \"libraryLocation\": \"meshBuilder\",\r\n        \"namespace\": \"@babylonjs/core\",\r\n        \"factoryMethod\": \"ExtrudePolygon\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"options\",\r\n                \"type\": [\r\n                    {\r\n                        \"name\": \"shape\",\r\n                        \"type\": \"BabylonjsCoreVector3[]\",\r\n                        \"optional\": false\r\n                    },\r\n                    {\r\n                        \"name\": \"holes\",\r\n                        \"type\": \"BabylonjsCoreVector3[][]\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"depth\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"faceUV\",\r\n                        \"type\": \"BabylonjsCoreVector4[]\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"faceColors\",\r\n                        \"type\": \"BabylonjsCoreColor4[]\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"updatable\",\r\n                        \"type\": \"boolean\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"sideOrientation\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"frontUVs\",\r\n                        \"type\": \"BabylonjsCoreVector4\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"backUVs\",\r\n                        \"type\": \"BabylonjsCoreVector4\",\r\n                        \"optional\": true\r\n                    }\r\n                ],\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"earcutInjection\",\r\n                \"type\": \"any\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"acceptsMaterials\": true,\r\n        \"isNode\": true,\r\n        \"isMesh\": true,\r\n        \"className\": \"FiberExtrudePolygon\"\r\n    };\r\n}\r\n\r\n/**\r\n * Creates a tube mesh.\r\n * The tube is a parametric shape. It has no predefined shape. Its final shape will depend on the input parameters\r\n * * The parameter `path` is a required array of successive Vector3. It is the curve used as the axis of the tube\r\n * * The parameter `radius` (positive float, default 1) sets the tube radius size\r\n * * The parameter `tessellation` (positive float, default 64) is the number of sides on the tubular surface\r\n * * The parameter `radiusFunction` (javascript function, default null) is a vanilla javascript function. If it is not null, it overwrittes the parameter `radius`\r\n * * This function is called on each point of the tube path and is passed the index `i` of the i-th point and the distance of this point from the first point of the path. It must return a radius value (positive float)\r\n * * The parameter `arc` (positive float, maximum 1, default 1) is the ratio to apply to the tube circumference : 2 x PI x arc\r\n * * The parameter `cap` sets the way the extruded shape is capped. Possible values : BABYLON.Mesh.NO_CAP (default), BABYLON.Mesh.CAP_START, BABYLON.Mesh.CAP_END, BABYLON.Mesh.CAP_ALL\r\n * * The optional parameter `instance` is an instance of an existing Tube object to be updated with the passed `pathArray` parameter : https://doc.babylonjs.com/how_to/how_to_dynamically_morph_a_mesh#tube\r\n * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\r\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/babylon101/discover_basic_elements#side-orientation\r\n * * The optional parameter `invertUV` (boolean, default false) swaps in the geometry the U and V coordinates to apply a texture\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberTube implements HasPropsHandlers<FiberMeshProps> {\r\n    private propsHandlers: PropsHandler<FiberMeshProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberMeshPropsHandler()\r\n            , new FiberAbstractMeshPropsHandler()\r\n            , new FiberTransformNodePropsHandler()\r\n            , new FiberNodePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberMeshProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberMeshProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"FactoryMethod\",\r\n        \"libraryLocation\": \"meshBuilder\",\r\n        \"namespace\": \"@babylonjs/core\",\r\n        \"factoryMethod\": \"CreateTube\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"options\",\r\n                \"type\": [\r\n                    {\r\n                        \"name\": \"path\",\r\n                        \"type\": \"BabylonjsCoreVector3[]\",\r\n                        \"optional\": false\r\n                    },\r\n                    {\r\n                        \"name\": \"radius\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"tessellation\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"radiusFunction\",\r\n                        \"type\": \"(i: number, distance: number) => number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"cap\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"arc\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"updatable\",\r\n                        \"type\": \"boolean\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"sideOrientation\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"frontUVs\",\r\n                        \"type\": \"BabylonjsCoreVector4\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"backUVs\",\r\n                        \"type\": \"BabylonjsCoreVector4\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"instance\",\r\n                        \"type\": \"BabylonjsCoreMesh\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"invertUV\",\r\n                        \"type\": \"boolean\",\r\n                        \"optional\": true\r\n                    }\r\n                ],\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"acceptsMaterials\": true,\r\n        \"isNode\": true,\r\n        \"isMesh\": true,\r\n        \"className\": \"FiberTube\"\r\n    };\r\n}\r\n\r\n/**\r\n * Creates a polyhedron mesh\r\n * * The parameter `type` (positive integer, max 14, default 0) sets the polyhedron type to build among the 15 embbeded types. Please refer to the type sheet in the tutorial to choose the wanted type\r\n * * The parameter `size` (positive float, default 1) sets the polygon size\r\n * * You can overwrite the `size` on each dimension bu using the parameters `sizeX`, `sizeY` or `sizeZ` (positive floats, default to `size` value)\r\n * * You can build other polyhedron types than the 15 embbeded ones by setting the parameter `custom` (`polyhedronObject`, default null). If you set the parameter `custom`, this overwrittes the parameter `type`\r\n * * A `polyhedronObject` is a formatted javascript object. You'll find a full file with pre-set polyhedra here : https://github.com/BabylonJS/Extensions/tree/master/Polyhedron\r\n * * You can set the color and the UV of each side of the polyhedron with the parameters `faceColors` (Color4, default `(1, 1, 1, 1)`) and faceUV (Vector4, default `(0, 0, 1, 1)`)\r\n * * To understand how to set `faceUV` or `faceColors`, please read this by considering the right number of faces of your polyhedron, instead of only 6 for the box : https://doc.babylonjs.com/how_to/createbox_per_face_textures_and_colors\r\n * * The parameter `flat` (boolean, default true). If set to false, it gives the polyhedron a single global face, so less vertices and shared normals. In this case, `faceColors` and `faceUV` are ignored\r\n * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\r\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/babylon101/discover_basic_elements#side-orientation\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberPolyhedron implements HasPropsHandlers<FiberMeshProps> {\r\n    private propsHandlers: PropsHandler<FiberMeshProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberMeshPropsHandler()\r\n            , new FiberAbstractMeshPropsHandler()\r\n            , new FiberTransformNodePropsHandler()\r\n            , new FiberNodePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberMeshProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberMeshProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"FactoryMethod\",\r\n        \"libraryLocation\": \"meshBuilder\",\r\n        \"namespace\": \"@babylonjs/core\",\r\n        \"factoryMethod\": \"CreatePolyhedron\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"options\",\r\n                \"type\": [\r\n                    {\r\n                        \"name\": \"type\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"size\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"sizeX\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"sizeY\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"sizeZ\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"custom\",\r\n                        \"type\": \"any\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"faceUV\",\r\n                        \"type\": \"BabylonjsCoreVector4[]\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"faceColors\",\r\n                        \"type\": \"BabylonjsCoreColor4[]\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"flat\",\r\n                        \"type\": \"boolean\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"updatable\",\r\n                        \"type\": \"boolean\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"sideOrientation\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"frontUVs\",\r\n                        \"type\": \"BabylonjsCoreVector4\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"backUVs\",\r\n                        \"type\": \"BabylonjsCoreVector4\",\r\n                        \"optional\": true\r\n                    }\r\n                ],\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"acceptsMaterials\": true,\r\n        \"isNode\": true,\r\n        \"isMesh\": true,\r\n        \"className\": \"FiberPolyhedron\"\r\n    };\r\n}\r\n\r\n/**\r\n * Creates a decal mesh.\r\n * A decal is a mesh usually applied as a model onto the surface of another mesh. So don't forget the parameter `sourceMesh` depicting the decal\r\n * * The parameter `position` (Vector3, default `(0, 0, 0)`) sets the position of the decal in World coordinates\r\n * * The parameter `normal` (Vector3, default `Vector3.Up`) sets the normal of the mesh where the decal is applied onto in World coordinates\r\n * * The parameter `size` (Vector3, default `(1, 1, 1)`) sets the decal scaling\r\n * * The parameter `angle` (float in radian, default 0) sets the angle to rotate the decal\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberDecal implements HasPropsHandlers<FiberMeshProps> {\r\n    private propsHandlers: PropsHandler<FiberMeshProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberMeshPropsHandler()\r\n            , new FiberAbstractMeshPropsHandler()\r\n            , new FiberTransformNodePropsHandler()\r\n            , new FiberNodePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberMeshProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberMeshProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"FactoryMethod\",\r\n        \"libraryLocation\": \"meshBuilder\",\r\n        \"namespace\": \"@babylonjs/core\",\r\n        \"factoryMethod\": \"CreateDecal\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"sourceMesh\",\r\n                \"type\": \"BabylonjsCoreAbstractMesh\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"options\",\r\n                \"type\": [\r\n                    {\r\n                        \"name\": \"position\",\r\n                        \"type\": \"BabylonjsCoreVector3\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"normal\",\r\n                        \"type\": \"BabylonjsCoreVector3\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"size\",\r\n                        \"type\": \"BabylonjsCoreVector3\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"angle\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    }\r\n                ],\r\n                \"optional\": false\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"acceptsMaterials\": true,\r\n        \"isNode\": true,\r\n        \"isMesh\": true,\r\n        \"className\": \"FiberDecal\"\r\n    };\r\n}\r\n\r\nexport class FiberMaterialPropsHandler implements PropsHandler<FiberMaterialProps> {\r\n    getPropertyUpdates(oldProps: FiberMaterialProps, newProps: FiberMaterialProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.alpha, newProps.alpha, 'alpha', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.alphaMode, newProps.alphaMode, 'alphaMode', 'number', changedProps)\r\n        // type: 'BabylonjsCoreAnimation[]' property (not coded) BabylonjsCoreMaterial.animations.\r\n        checkPrimitiveDiff(oldProps.backFaceCulling, newProps.backFaceCulling, 'backFaceCulling', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.checkReadyOnEveryCall, newProps.checkReadyOnEveryCall, 'checkReadyOnEveryCall', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.checkReadyOnlyOnce, newProps.checkReadyOnlyOnce, 'checkReadyOnlyOnce', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.depthFunction, newProps.depthFunction, 'depthFunction', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.disableDepthWrite, newProps.disableDepthWrite, 'disableDepthWrite', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.doNotSerialize, newProps.doNotSerialize, 'doNotSerialize', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.fillMode, newProps.fillMode, 'fillMode', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.fogEnabled, newProps.fogEnabled, 'fogEnabled', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.forceDepthWrite, newProps.forceDepthWrite, 'forceDepthWrite', 'boolean', changedProps)\r\n        checkLambdaDiff(oldProps.getRenderTargetTextures, newProps.getRenderTargetTextures, 'getRenderTargetTextures', '() => BabylonjsCoreSmartArray<BabylonjsCoreRenderTargetTexture>', changedProps)\r\n        checkPrimitiveDiff(oldProps.id, newProps.id, 'id', 'string', changedProps)\r\n        // type: 'BabylonjsCoreIInspectable[]' property (not coded) BabylonjsCoreMaterial.inspectableCustomProperties.\r\n        // type: '{ [id: string]: BabylonjsCoreAbstractMesh; }' property (not coded) BabylonjsCoreMaterial.meshMap.\r\n        // type: 'any' property (not coded) BabylonjsCoreMaterial.metadata.\r\n        checkPrimitiveDiff(oldProps.name, newProps.name, 'name', 'string', changedProps)\r\n        checkPrimitiveDiff(oldProps.needDepthPrePass, newProps.needDepthPrePass, 'needDepthPrePass', 'boolean', changedProps)\r\n        checkLambdaDiff(oldProps.onBind, newProps.onBind, 'onBind', '(Mesh: BabylonjsCoreAbstractMesh) => void', changedProps)\r\n        checkLambdaDiff(oldProps.onCompiled, newProps.onCompiled, 'onCompiled', '(effect: BabylonjsCoreEffect) => void', changedProps)\r\n        checkLambdaDiff(oldProps.onDispose, newProps.onDispose, 'onDispose', '() => void', changedProps)\r\n        checkObservableDiff(oldProps.onDisposeObservable, newProps.onDisposeObservable, 'onDisposeObservable', 'BabylonjsCoreObservable<BabylonjsCoreMaterial>', changedProps)\r\n        checkLambdaDiff(oldProps.onError, newProps.onError, 'onError', '(effect: BabylonjsCoreEffect, errors: string) => void', changedProps)\r\n        checkPrimitiveDiff(oldProps.pointsCloud, newProps.pointsCloud, 'pointsCloud', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.pointSize, newProps.pointSize, 'pointSize', 'number', changedProps)\r\n        // type: 'any' property (not coded) BabylonjsCoreMaterial.releaseVertexArrayObject.\r\n        // type: 'any' property (not coded) BabylonjsCoreMaterial.reservedDataStore.\r\n        checkPrimitiveDiff(oldProps.separateCullingPass, newProps.separateCullingPass, 'separateCullingPass', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.sideOrientation, newProps.sideOrientation, 'sideOrientation', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.state, newProps.state, 'state', 'string', changedProps)\r\n        checkPrimitiveDiff(oldProps.uniqueId, newProps.uniqueId, 'uniqueId', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.wireframe, newProps.wireframe, 'wireframe', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.zOffset, newProps.zOffset, 'zOffset', 'number', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * Base class for the main features of a material in Babylon.js\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberMaterial implements HasPropsHandlers<FiberMaterialProps> {\r\n    private propsHandlers: PropsHandler<FiberMaterialProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberMaterialPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberMaterialProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberMaterialProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"Material\",\r\n        \"namespace\": \"@babylonjs/core/Materials/material\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"doNotAdd\",\r\n                \"type\": \"boolean\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isMaterial\": true,\r\n        \"className\": \"FiberMaterial\"\r\n    };\r\n}\r\n\r\nexport class FiberShaderMaterialPropsHandler implements PropsHandler<FiberShaderMaterialProps> {\r\n    getPropertyUpdates(oldProps: FiberShaderMaterialProps, newProps: FiberShaderMaterialProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        // type: 'any' property (not coded) BabylonjsCoreShaderMaterial.shaderPath.\r\n        checkMethodDiff(oldProps.setArray2, newProps.setArray2, 'setArray2', '(name?: string, value?: number[]) => BabylonjsCoreShaderMaterial', changedProps)\r\n        checkMethodDiff(oldProps.setArray3, newProps.setArray3, 'setArray3', '(name?: string, value?: number[]) => BabylonjsCoreShaderMaterial', changedProps)\r\n        checkMethodDiff(oldProps.setArray4, newProps.setArray4, 'setArray4', '(name?: string, value?: number[]) => BabylonjsCoreShaderMaterial', changedProps)\r\n        checkMethodDiff(oldProps.setColor3, newProps.setColor3, 'setColor3', '(name?: string, value?: BabylonjsCoreColor3) => BabylonjsCoreShaderMaterial', changedProps)\r\n        checkMethodDiff(oldProps.setColor3Array, newProps.setColor3Array, 'setColor3Array', '(name?: string, value?: BabylonjsCoreColor3[]) => BabylonjsCoreShaderMaterial', changedProps)\r\n        checkMethodDiff(oldProps.setColor4, newProps.setColor4, 'setColor4', '(name?: string, value?: BabylonjsCoreColor4) => BabylonjsCoreShaderMaterial', changedProps)\r\n        checkMethodDiff(oldProps.setColor4Array, newProps.setColor4Array, 'setColor4Array', '(name?: string, value?: BabylonjsCoreColor4[]) => BabylonjsCoreShaderMaterial', changedProps)\r\n        checkMethodDiff(oldProps.setFloat, newProps.setFloat, 'setFloat', '(name?: string, value?: number) => BabylonjsCoreShaderMaterial', changedProps)\r\n        checkMethodDiff(oldProps.setFloats, newProps.setFloats, 'setFloats', '(name?: string, value?: number[]) => BabylonjsCoreShaderMaterial', changedProps)\r\n        checkMethodDiff(oldProps.setInt, newProps.setInt, 'setInt', '(name?: string, value?: number) => BabylonjsCoreShaderMaterial', changedProps)\r\n        checkMethodDiff(oldProps.setMatrices, newProps.setMatrices, 'setMatrices', '(name?: string, value?: BabylonjsCoreMatrix[]) => BabylonjsCoreShaderMaterial', changedProps)\r\n        checkMethodDiff(oldProps.setMatrix, newProps.setMatrix, 'setMatrix', '(name?: string, value?: BabylonjsCoreMatrix) => BabylonjsCoreShaderMaterial', changedProps)\r\n        checkMethodDiff(oldProps.setMatrix2x2, newProps.setMatrix2x2, 'setMatrix2x2', '(name?: string, value?: Float32Array) => BabylonjsCoreShaderMaterial', changedProps)\r\n        checkMethodDiff(oldProps.setMatrix3x3, newProps.setMatrix3x3, 'setMatrix3x3', '(name?: string, value?: Float32Array) => BabylonjsCoreShaderMaterial', changedProps)\r\n        checkMethodDiff(oldProps.setTexture, newProps.setTexture, 'setTexture', '(name?: string, texture?: BabylonjsCoreTexture) => BabylonjsCoreShaderMaterial', changedProps)\r\n        checkMethodDiff(oldProps.setTextureArray, newProps.setTextureArray, 'setTextureArray', '(name?: string, textures?: BabylonjsCoreTexture[]) => BabylonjsCoreShaderMaterial', changedProps)\r\n        checkMethodDiff(oldProps.setVector2, newProps.setVector2, 'setVector2', '(name?: string, value?: BabylonjsCoreVector2) => BabylonjsCoreShaderMaterial', changedProps)\r\n        checkMethodDiff(oldProps.setVector3, newProps.setVector3, 'setVector3', '(name?: string, value?: BabylonjsCoreVector3) => BabylonjsCoreShaderMaterial', changedProps)\r\n        checkMethodDiff(oldProps.setVector4, newProps.setVector4, 'setVector4', '(name?: string, value?: BabylonjsCoreVector4) => BabylonjsCoreShaderMaterial', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * The ShaderMaterial object has the necessary methods to pass data from your scene to the Vertex and Fragment Shaders and returns a material that can be applied to any mesh.\r\n *\r\n * This returned material effects how the mesh will look based on the code in the shaders.\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberShaderMaterial implements HasPropsHandlers<FiberMaterialProps> {\r\n    private propsHandlers: PropsHandler<FiberMaterialProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberShaderMaterialPropsHandler(),\r\n            new FiberMaterialPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberMaterialProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberMaterialProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"ShaderMaterial\",\r\n        \"namespace\": \"@babylonjs/core/Materials/material\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"shaderPath\",\r\n                \"type\": \"any\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"options\",\r\n                \"type\": \"Partial<BabylonjsCoreIShaderMaterialOptions>\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isMaterial\": true,\r\n        \"className\": \"FiberShaderMaterial\"\r\n    };\r\n}\r\n\r\nexport class FiberMultiMaterialPropsHandler implements PropsHandler<FiberMultiMaterialProps> {\r\n    getPropertyUpdates(oldProps: FiberMultiMaterialProps, newProps: FiberMultiMaterialProps): PropertyUpdate[] | null {\r\n        // skipping type: 'BabylonjsCoreMaterial[]' property (not coded) BabylonjsCoreMultiMaterial.subMaterials.\r\n        return null; // no props to check\r\n    }\r\n}\r\n\r\n/**\r\n * A multi-material is used to apply different materials to different parts of the same object without the need of\r\n * separate meshes. This can be use to improve performances.\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberMultiMaterial implements HasPropsHandlers<FiberMaterialProps> {\r\n    private propsHandlers: PropsHandler<FiberMaterialProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberMultiMaterialPropsHandler(),\r\n            new FiberMaterialPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberMaterialProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberMaterialProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"MultiMaterial\",\r\n        \"namespace\": \"@babylonjs/core/Materials/material\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isMaterial\": true,\r\n        \"className\": \"FiberMultiMaterial\"\r\n    };\r\n}\r\n\r\nexport class FiberPushMaterialPropsHandler implements PropsHandler<FiberPushMaterialProps> {\r\n    getPropertyUpdates(oldProps: FiberPushMaterialProps, newProps: FiberPushMaterialProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.allowShaderHotSwapping, newProps.allowShaderHotSwapping, 'allowShaderHotSwapping', 'boolean', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * Base class of materials working in push mode in babylon JS\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberPushMaterial implements HasPropsHandlers<FiberMaterialProps> {\r\n    private propsHandlers: PropsHandler<FiberMaterialProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberPushMaterialPropsHandler(),\r\n            new FiberMaterialPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberMaterialProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberMaterialProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"PushMaterial\",\r\n        \"namespace\": \"@babylonjs/core/Materials/material\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isMaterial\": true,\r\n        \"className\": \"FiberPushMaterial\"\r\n    };\r\n}\r\n\r\nexport class FiberStandardMaterialPropsHandler implements PropsHandler<FiberStandardMaterialProps> {\r\n    getPropertyUpdates(oldProps: FiberStandardMaterialProps, newProps: FiberStandardMaterialProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.alphaCutOff, newProps.alphaCutOff, 'alphaCutOff', 'number', changedProps)\r\n        checkColor3Diff(oldProps.ambientColor, newProps.ambientColor, 'ambientColor', 'BabylonjsCoreColor3', changedProps)\r\n        checkTextureDiff(oldProps.ambientTexture, newProps.ambientTexture, 'ambientTexture', 'BabylonjsCoreBaseTexture', changedProps)\r\n        checkPrimitiveDiff(oldProps.AmbientTextureEnabled, newProps.AmbientTextureEnabled, 'AmbientTextureEnabled', 'boolean', changedProps)\r\n        checkTextureDiff(oldProps.bumpTexture, newProps.bumpTexture, 'bumpTexture', 'BabylonjsCoreBaseTexture', changedProps)\r\n        checkPrimitiveDiff(oldProps.BumpTextureEnabled, newProps.BumpTextureEnabled, 'BumpTextureEnabled', 'boolean', changedProps)\r\n        // type: 'BabylonjsCoreColorCurves' property (not coded) BabylonjsCoreStandardMaterial.cameraColorCurves.\r\n        checkPrimitiveDiff(oldProps.cameraColorCurvesEnabled, newProps.cameraColorCurvesEnabled, 'cameraColorCurvesEnabled', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.cameraColorGradingEnabled, newProps.cameraColorGradingEnabled, 'cameraColorGradingEnabled', 'boolean', changedProps)\r\n        checkTextureDiff(oldProps.cameraColorGradingTexture, newProps.cameraColorGradingTexture, 'cameraColorGradingTexture', 'BabylonjsCoreBaseTexture', changedProps)\r\n        checkPrimitiveDiff(oldProps.cameraContrast, newProps.cameraContrast, 'cameraContrast', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.cameraExposure, newProps.cameraExposure, 'cameraExposure', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.cameraToneMappingEnabled, newProps.cameraToneMappingEnabled, 'cameraToneMappingEnabled', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.ColorGradingTextureEnabled, newProps.ColorGradingTextureEnabled, 'ColorGradingTextureEnabled', 'boolean', changedProps)\r\n        checkLambdaDiff(oldProps.customShaderNameResolve, newProps.customShaderNameResolve, 'customShaderNameResolve', '(shaderName: string, uniforms: string[], uniformBuffers: string[], samplers: string[], defines: BabylonjsCoreStandardMaterialDefines) => string', changedProps)\r\n        checkColor3Diff(oldProps.diffuseColor, newProps.diffuseColor, 'diffuseColor', 'BabylonjsCoreColor3', changedProps)\r\n        checkFresnelParametersDiff(oldProps.diffuseFresnelParameters, newProps.diffuseFresnelParameters, 'diffuseFresnelParameters', 'BabylonjsCoreFresnelParameters', changedProps)\r\n        checkTextureDiff(oldProps.diffuseTexture, newProps.diffuseTexture, 'diffuseTexture', 'BabylonjsCoreBaseTexture', changedProps)\r\n        checkPrimitiveDiff(oldProps.DiffuseTextureEnabled, newProps.DiffuseTextureEnabled, 'DiffuseTextureEnabled', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.disableLighting, newProps.disableLighting, 'disableLighting', 'boolean', changedProps)\r\n        checkColor3Diff(oldProps.emissiveColor, newProps.emissiveColor, 'emissiveColor', 'BabylonjsCoreColor3', changedProps)\r\n        checkFresnelParametersDiff(oldProps.emissiveFresnelParameters, newProps.emissiveFresnelParameters, 'emissiveFresnelParameters', 'BabylonjsCoreFresnelParameters', changedProps)\r\n        checkTextureDiff(oldProps.emissiveTexture, newProps.emissiveTexture, 'emissiveTexture', 'BabylonjsCoreBaseTexture', changedProps)\r\n        checkPrimitiveDiff(oldProps.EmissiveTextureEnabled, newProps.EmissiveTextureEnabled, 'EmissiveTextureEnabled', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.FresnelEnabled, newProps.FresnelEnabled, 'FresnelEnabled', 'boolean', changedProps)\r\n        // type: 'BabylonjsCoreImageProcessingConfiguration' property (not coded) BabylonjsCoreStandardMaterial.imageProcessingConfiguration.\r\n        checkPrimitiveDiff(oldProps.indexOfRefraction, newProps.indexOfRefraction, 'indexOfRefraction', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.invertNormalMapX, newProps.invertNormalMapX, 'invertNormalMapX', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.invertNormalMapY, newProps.invertNormalMapY, 'invertNormalMapY', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.invertRefractionY, newProps.invertRefractionY, 'invertRefractionY', 'boolean', changedProps)\r\n        checkTextureDiff(oldProps.lightmapTexture, newProps.lightmapTexture, 'lightmapTexture', 'BabylonjsCoreBaseTexture', changedProps)\r\n        checkPrimitiveDiff(oldProps.LightmapTextureEnabled, newProps.LightmapTextureEnabled, 'LightmapTextureEnabled', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.linkEmissiveWithDiffuse, newProps.linkEmissiveWithDiffuse, 'linkEmissiveWithDiffuse', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.maxSimultaneousLights, newProps.maxSimultaneousLights, 'maxSimultaneousLights', 'number', changedProps)\r\n        checkFresnelParametersDiff(oldProps.opacityFresnelParameters, newProps.opacityFresnelParameters, 'opacityFresnelParameters', 'BabylonjsCoreFresnelParameters', changedProps)\r\n        checkTextureDiff(oldProps.opacityTexture, newProps.opacityTexture, 'opacityTexture', 'BabylonjsCoreBaseTexture', changedProps)\r\n        checkPrimitiveDiff(oldProps.OpacityTextureEnabled, newProps.OpacityTextureEnabled, 'OpacityTextureEnabled', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.parallaxScaleBias, newProps.parallaxScaleBias, 'parallaxScaleBias', 'number', changedProps)\r\n        checkFresnelParametersDiff(oldProps.reflectionFresnelParameters, newProps.reflectionFresnelParameters, 'reflectionFresnelParameters', 'BabylonjsCoreFresnelParameters', changedProps)\r\n        checkTextureDiff(oldProps.reflectionTexture, newProps.reflectionTexture, 'reflectionTexture', 'BabylonjsCoreBaseTexture', changedProps)\r\n        checkPrimitiveDiff(oldProps.ReflectionTextureEnabled, newProps.ReflectionTextureEnabled, 'ReflectionTextureEnabled', 'boolean', changedProps)\r\n        checkFresnelParametersDiff(oldProps.refractionFresnelParameters, newProps.refractionFresnelParameters, 'refractionFresnelParameters', 'BabylonjsCoreFresnelParameters', changedProps)\r\n        checkTextureDiff(oldProps.refractionTexture, newProps.refractionTexture, 'refractionTexture', 'BabylonjsCoreBaseTexture', changedProps)\r\n        checkPrimitiveDiff(oldProps.RefractionTextureEnabled, newProps.RefractionTextureEnabled, 'RefractionTextureEnabled', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.roughness, newProps.roughness, 'roughness', 'number', changedProps)\r\n        checkColor3Diff(oldProps.specularColor, newProps.specularColor, 'specularColor', 'BabylonjsCoreColor3', changedProps)\r\n        checkPrimitiveDiff(oldProps.specularPower, newProps.specularPower, 'specularPower', 'number', changedProps)\r\n        checkTextureDiff(oldProps.specularTexture, newProps.specularTexture, 'specularTexture', 'BabylonjsCoreBaseTexture', changedProps)\r\n        checkPrimitiveDiff(oldProps.SpecularTextureEnabled, newProps.SpecularTextureEnabled, 'SpecularTextureEnabled', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.twoSidedLighting, newProps.twoSidedLighting, 'twoSidedLighting', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.useAlphaFromDiffuseTexture, newProps.useAlphaFromDiffuseTexture, 'useAlphaFromDiffuseTexture', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.useEmissiveAsIllumination, newProps.useEmissiveAsIllumination, 'useEmissiveAsIllumination', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.useGlossinessFromSpecularMapAlpha, newProps.useGlossinessFromSpecularMapAlpha, 'useGlossinessFromSpecularMapAlpha', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.useLightmapAsShadowmap, newProps.useLightmapAsShadowmap, 'useLightmapAsShadowmap', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.useLogarithmicDepth, newProps.useLogarithmicDepth, 'useLogarithmicDepth', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.useObjectSpaceNormalMap, newProps.useObjectSpaceNormalMap, 'useObjectSpaceNormalMap', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.useParallax, newProps.useParallax, 'useParallax', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.useParallaxOcclusion, newProps.useParallaxOcclusion, 'useParallaxOcclusion', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.useReflectionFresnelFromSpecular, newProps.useReflectionFresnelFromSpecular, 'useReflectionFresnelFromSpecular', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.useReflectionOverAlpha, newProps.useReflectionOverAlpha, 'useReflectionOverAlpha', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.useSpecularOverAlpha, newProps.useSpecularOverAlpha, 'useSpecularOverAlpha', 'boolean', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * This is the default material used in Babylon. It is the best trade off between quality\r\n * and performances.\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberStandardMaterial implements HasPropsHandlers<FiberMaterialProps> {\r\n    private propsHandlers: PropsHandler<FiberMaterialProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberStandardMaterialPropsHandler(),\r\n            new FiberPushMaterialPropsHandler(),\r\n            new FiberMaterialPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberMaterialProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberMaterialProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"StandardMaterial\",\r\n        \"namespace\": \"@babylonjs/core/Materials/material\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isMaterial\": true,\r\n        \"className\": \"FiberStandardMaterial\"\r\n    };\r\n}\r\n\r\nexport class FiberBackgroundMaterialPropsHandler implements PropsHandler<FiberBackgroundMaterialProps> {\r\n    getPropertyUpdates(oldProps: FiberBackgroundMaterialProps, newProps: FiberBackgroundMaterialProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkColor3Diff(oldProps._perceptualColor, newProps._perceptualColor, '_perceptualColor', 'BabylonjsCoreColor3', changedProps)\r\n        // type: 'BabylonjsCoreColorCurves' property (not coded) BabylonjsCoreBackgroundMaterial.cameraColorCurves.\r\n        checkPrimitiveDiff(oldProps.cameraColorCurvesEnabled, newProps.cameraColorCurvesEnabled, 'cameraColorCurvesEnabled', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.cameraColorGradingEnabled, newProps.cameraColorGradingEnabled, 'cameraColorGradingEnabled', 'boolean', changedProps)\r\n        checkTextureDiff(oldProps.cameraColorGradingTexture, newProps.cameraColorGradingTexture, 'cameraColorGradingTexture', 'BabylonjsCoreBaseTexture', changedProps)\r\n        checkPrimitiveDiff(oldProps.cameraContrast, newProps.cameraContrast, 'cameraContrast', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.cameraExposure, newProps.cameraExposure, 'cameraExposure', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.cameraToneMappingEnabled, newProps.cameraToneMappingEnabled, 'cameraToneMappingEnabled', 'boolean', changedProps)\r\n        checkTextureDiff(oldProps.diffuseTexture, newProps.diffuseTexture, 'diffuseTexture', 'BabylonjsCoreBaseTexture', changedProps)\r\n        checkPrimitiveDiff(oldProps.enableNoise, newProps.enableNoise, 'enableNoise', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.fovMultiplier, newProps.fovMultiplier, 'fovMultiplier', 'number', changedProps)\r\n        // type: 'BabylonjsCoreImageProcessingConfiguration' property (not coded) BabylonjsCoreBackgroundMaterial.imageProcessingConfiguration.\r\n        checkPrimitiveDiff(oldProps.maxSimultaneousLights, newProps.maxSimultaneousLights, 'maxSimultaneousLights', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.opacityFresnel, newProps.opacityFresnel, 'opacityFresnel', 'boolean', changedProps)\r\n        checkColor3Diff(oldProps.primaryColor, newProps.primaryColor, 'primaryColor', 'BabylonjsCoreColor3', changedProps)\r\n        checkPrimitiveDiff(oldProps.primaryColorHighlightLevel, newProps.primaryColorHighlightLevel, 'primaryColorHighlightLevel', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.primaryColorShadowLevel, newProps.primaryColorShadowLevel, 'primaryColorShadowLevel', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.reflectionAmount, newProps.reflectionAmount, 'reflectionAmount', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.reflectionBlur, newProps.reflectionBlur, 'reflectionBlur', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.reflectionFalloffDistance, newProps.reflectionFalloffDistance, 'reflectionFalloffDistance', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.reflectionFresnel, newProps.reflectionFresnel, 'reflectionFresnel', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.reflectionReflectance0, newProps.reflectionReflectance0, 'reflectionReflectance0', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.reflectionReflectance90, newProps.reflectionReflectance90, 'reflectionReflectance90', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.reflectionStandardFresnelWeight, newProps.reflectionStandardFresnelWeight, 'reflectionStandardFresnelWeight', 'number', changedProps)\r\n        checkTextureDiff(oldProps.reflectionTexture, newProps.reflectionTexture, 'reflectionTexture', 'BabylonjsCoreBaseTexture', changedProps)\r\n        checkVector3Diff(oldProps.sceneCenter, newProps.sceneCenter, 'sceneCenter', 'BabylonjsCoreVector3', changedProps)\r\n        checkPrimitiveDiff(oldProps.shadowLevel, newProps.shadowLevel, 'shadowLevel', 'number', changedProps)\r\n        // type: 'BabylonjsCoreIShadowLight[]' property (not coded) BabylonjsCoreBackgroundMaterial.shadowLights.\r\n        checkPrimitiveDiff(oldProps.switchToBGR, newProps.switchToBGR, 'switchToBGR', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.useEquirectangularFOV, newProps.useEquirectangularFOV, 'useEquirectangularFOV', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.useRGBColor, newProps.useRGBColor, 'useRGBColor', 'boolean', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * Background material used to create an efficient environement around your scene.\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberBackgroundMaterial implements HasPropsHandlers<FiberMaterialProps> {\r\n    private propsHandlers: PropsHandler<FiberMaterialProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberBackgroundMaterialPropsHandler(),\r\n            new FiberPushMaterialPropsHandler(),\r\n            new FiberMaterialPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberMaterialProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberMaterialProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"BackgroundMaterial\",\r\n        \"namespace\": \"@babylonjs/core/Materials/material\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isMaterial\": true,\r\n        \"className\": \"FiberBackgroundMaterial\"\r\n    };\r\n}\r\n\r\nexport class FiberPBRBaseMaterialPropsHandler implements PropsHandler<FiberPBRBaseMaterialProps> {\r\n    getPropertyUpdates(oldProps: FiberPBRBaseMaterialProps, newProps: FiberPBRBaseMaterialProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkLambdaDiff(oldProps.customShaderNameResolve, newProps.customShaderNameResolve, 'customShaderNameResolve', '(shaderName: string, uniforms: string[], uniformBuffers: string[], samplers: string[], defines: BabylonjsCorePBRMaterialDefines) => string', changedProps)\r\n        // type: 'any' property (not coded) BabylonjsCorePBRBaseMaterial.debugFactor.\r\n        // type: 'any' property (not coded) BabylonjsCorePBRBaseMaterial.debugLimit.\r\n        checkPrimitiveDiff(oldProps.debugMode, newProps.debugMode, 'debugMode', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.transparencyMode, newProps.transparencyMode, 'transparencyMode', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.useLogarithmicDepth, newProps.useLogarithmicDepth, 'useLogarithmicDepth', 'boolean', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * The Physically based material base class of BJS.\r\n *\r\n * This offers the main features of a standard PBR material.\r\n * For more information, please refer to the documentation :\r\n * https://doc.babylonjs.com/how_to/physically_based_rendering\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberPBRBaseMaterial implements HasPropsHandlers<FiberMaterialProps> {\r\n    private propsHandlers: PropsHandler<FiberMaterialProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberPBRBaseMaterialPropsHandler(),\r\n            new FiberPushMaterialPropsHandler(),\r\n            new FiberMaterialPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberMaterialProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberMaterialProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"PBRBaseMaterial\",\r\n        \"namespace\": \"@babylonjs/core/Materials/material\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isMaterial\": true,\r\n        \"className\": \"FiberPBRBaseMaterial\"\r\n    };\r\n}\r\n\r\nexport class FiberPBRBaseSimpleMaterialPropsHandler implements PropsHandler<FiberPBRBaseSimpleMaterialProps> {\r\n    getPropertyUpdates(oldProps: FiberPBRBaseSimpleMaterialProps, newProps: FiberPBRBaseSimpleMaterialProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.alphaCutOff, newProps.alphaCutOff, 'alphaCutOff', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.disableLighting, newProps.disableLighting, 'disableLighting', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.doubleSided, newProps.doubleSided, 'doubleSided', 'boolean', changedProps)\r\n        checkColor3Diff(oldProps.emissiveColor, newProps.emissiveColor, 'emissiveColor', 'BabylonjsCoreColor3', changedProps)\r\n        checkTextureDiff(oldProps.emissiveTexture, newProps.emissiveTexture, 'emissiveTexture', 'BabylonjsCoreBaseTexture', changedProps)\r\n        checkTextureDiff(oldProps.environmentTexture, newProps.environmentTexture, 'environmentTexture', 'BabylonjsCoreBaseTexture', changedProps)\r\n        checkPrimitiveDiff(oldProps.invertNormalMapX, newProps.invertNormalMapX, 'invertNormalMapX', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.invertNormalMapY, newProps.invertNormalMapY, 'invertNormalMapY', 'boolean', changedProps)\r\n        checkTextureDiff(oldProps.lightmapTexture, newProps.lightmapTexture, 'lightmapTexture', 'BabylonjsCoreBaseTexture', changedProps)\r\n        checkPrimitiveDiff(oldProps.maxSimultaneousLights, newProps.maxSimultaneousLights, 'maxSimultaneousLights', 'number', changedProps)\r\n        checkTextureDiff(oldProps.normalTexture, newProps.normalTexture, 'normalTexture', 'BabylonjsCoreBaseTexture', changedProps)\r\n        checkPrimitiveDiff(oldProps.occlusionStrength, newProps.occlusionStrength, 'occlusionStrength', 'number', changedProps)\r\n        checkTextureDiff(oldProps.occlusionTexture, newProps.occlusionTexture, 'occlusionTexture', 'BabylonjsCoreBaseTexture', changedProps)\r\n        checkPrimitiveDiff(oldProps.useLightmapAsShadowmap, newProps.useLightmapAsShadowmap, 'useLightmapAsShadowmap', 'boolean', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * The Physically based simple base material of BJS.\r\n *\r\n * This enables better naming and convention enforcements on top of the pbrMaterial.\r\n * It is used as the base class for both the specGloss and metalRough conventions.\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberPBRBaseSimpleMaterial implements HasPropsHandlers<FiberMaterialProps> {\r\n    private propsHandlers: PropsHandler<FiberMaterialProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberPBRBaseSimpleMaterialPropsHandler(),\r\n            new FiberPBRBaseMaterialPropsHandler(),\r\n            new FiberPushMaterialPropsHandler(),\r\n            new FiberMaterialPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberMaterialProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberMaterialProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"PBRBaseSimpleMaterial\",\r\n        \"namespace\": \"@babylonjs/core/Materials/material\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isMaterial\": true,\r\n        \"className\": \"FiberPBRBaseSimpleMaterial\"\r\n    };\r\n}\r\n\r\nexport class FiberPBRMetallicRoughnessMaterialPropsHandler implements PropsHandler<FiberPBRMetallicRoughnessMaterialProps> {\r\n    getPropertyUpdates(oldProps: FiberPBRMetallicRoughnessMaterialProps, newProps: FiberPBRMetallicRoughnessMaterialProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkColor3Diff(oldProps.baseColor, newProps.baseColor, 'baseColor', 'BabylonjsCoreColor3', changedProps)\r\n        checkTextureDiff(oldProps.baseTexture, newProps.baseTexture, 'baseTexture', 'BabylonjsCoreBaseTexture', changedProps)\r\n        checkPrimitiveDiff(oldProps.metallic, newProps.metallic, 'metallic', 'number', changedProps)\r\n        checkTextureDiff(oldProps.metallicRoughnessTexture, newProps.metallicRoughnessTexture, 'metallicRoughnessTexture', 'BabylonjsCoreBaseTexture', changedProps)\r\n        checkPrimitiveDiff(oldProps.roughness, newProps.roughness, 'roughness', 'number', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * The PBR material of BJS following the metal roughness convention.\r\n *\r\n * This fits to the PBR convention in the GLTF definition:\r\n * https://github.com/KhronosGroup/glTF/tree/2.0/specification/2.0\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberPBRMetallicRoughnessMaterial implements HasPropsHandlers<FiberMaterialProps> {\r\n    private propsHandlers: PropsHandler<FiberMaterialProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberPBRMetallicRoughnessMaterialPropsHandler(),\r\n            new FiberPBRBaseSimpleMaterialPropsHandler(),\r\n            new FiberPBRBaseMaterialPropsHandler(),\r\n            new FiberPushMaterialPropsHandler(),\r\n            new FiberMaterialPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberMaterialProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberMaterialProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"PBRMetallicRoughnessMaterial\",\r\n        \"namespace\": \"@babylonjs/core/Materials/material\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isMaterial\": true,\r\n        \"className\": \"FiberPBRMetallicRoughnessMaterial\"\r\n    };\r\n}\r\n\r\nexport class FiberPBRSpecularGlossinessMaterialPropsHandler implements PropsHandler<FiberPBRSpecularGlossinessMaterialProps> {\r\n    getPropertyUpdates(oldProps: FiberPBRSpecularGlossinessMaterialProps, newProps: FiberPBRSpecularGlossinessMaterialProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkColor3Diff(oldProps.diffuseColor, newProps.diffuseColor, 'diffuseColor', 'BabylonjsCoreColor3', changedProps)\r\n        checkTextureDiff(oldProps.diffuseTexture, newProps.diffuseTexture, 'diffuseTexture', 'BabylonjsCoreBaseTexture', changedProps)\r\n        checkPrimitiveDiff(oldProps.glossiness, newProps.glossiness, 'glossiness', 'number', changedProps)\r\n        checkColor3Diff(oldProps.specularColor, newProps.specularColor, 'specularColor', 'BabylonjsCoreColor3', changedProps)\r\n        checkTextureDiff(oldProps.specularGlossinessTexture, newProps.specularGlossinessTexture, 'specularGlossinessTexture', 'BabylonjsCoreBaseTexture', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * The PBR material of BJS following the specular glossiness convention.\r\n *\r\n * This fits to the PBR convention in the GLTF definition:\r\n * https://github.com/KhronosGroup/glTF/tree/2.0/extensions/Khronos/KHR_materials_pbrSpecularGlossiness\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberPBRSpecularGlossinessMaterial implements HasPropsHandlers<FiberMaterialProps> {\r\n    private propsHandlers: PropsHandler<FiberMaterialProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberPBRSpecularGlossinessMaterialPropsHandler(),\r\n            new FiberPBRBaseSimpleMaterialPropsHandler(),\r\n            new FiberPBRBaseMaterialPropsHandler(),\r\n            new FiberPushMaterialPropsHandler(),\r\n            new FiberMaterialPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberMaterialProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberMaterialProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"PBRSpecularGlossinessMaterial\",\r\n        \"namespace\": \"@babylonjs/core/Materials/material\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isMaterial\": true,\r\n        \"className\": \"FiberPBRSpecularGlossinessMaterial\"\r\n    };\r\n}\r\n\r\nexport class FiberPBRMaterialPropsHandler implements PropsHandler<FiberPBRMaterialProps> {\r\n    getPropertyUpdates(oldProps: FiberPBRMaterialProps, newProps: FiberPBRMaterialProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkColor3Diff(oldProps.albedoColor, newProps.albedoColor, 'albedoColor', 'BabylonjsCoreColor3', changedProps)\r\n        checkTextureDiff(oldProps.albedoTexture, newProps.albedoTexture, 'albedoTexture', 'BabylonjsCoreBaseTexture', changedProps)\r\n        checkPrimitiveDiff(oldProps.alphaCutOff, newProps.alphaCutOff, 'alphaCutOff', 'number', changedProps)\r\n        checkColor3Diff(oldProps.ambientColor, newProps.ambientColor, 'ambientColor', 'BabylonjsCoreColor3', changedProps)\r\n        checkTextureDiff(oldProps.ambientTexture, newProps.ambientTexture, 'ambientTexture', 'BabylonjsCoreBaseTexture', changedProps)\r\n        checkPrimitiveDiff(oldProps.ambientTextureImpactOnAnalyticalLights, newProps.ambientTextureImpactOnAnalyticalLights, 'ambientTextureImpactOnAnalyticalLights', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.ambientTextureStrength, newProps.ambientTextureStrength, 'ambientTextureStrength', 'number', changedProps)\r\n        checkTextureDiff(oldProps.bumpTexture, newProps.bumpTexture, 'bumpTexture', 'BabylonjsCoreBaseTexture', changedProps)\r\n        // type: 'BabylonjsCoreColorCurves' property (not coded) BabylonjsCorePBRMaterial.cameraColorCurves.\r\n        checkPrimitiveDiff(oldProps.cameraColorCurvesEnabled, newProps.cameraColorCurvesEnabled, 'cameraColorCurvesEnabled', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.cameraColorGradingEnabled, newProps.cameraColorGradingEnabled, 'cameraColorGradingEnabled', 'boolean', changedProps)\r\n        checkTextureDiff(oldProps.cameraColorGradingTexture, newProps.cameraColorGradingTexture, 'cameraColorGradingTexture', 'BabylonjsCoreBaseTexture', changedProps)\r\n        checkPrimitiveDiff(oldProps.cameraContrast, newProps.cameraContrast, 'cameraContrast', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.cameraExposure, newProps.cameraExposure, 'cameraExposure', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.cameraToneMappingEnabled, newProps.cameraToneMappingEnabled, 'cameraToneMappingEnabled', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.directIntensity, newProps.directIntensity, 'directIntensity', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.disableBumpMap, newProps.disableBumpMap, 'disableBumpMap', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.disableLighting, newProps.disableLighting, 'disableLighting', 'boolean', changedProps)\r\n        checkColor3Diff(oldProps.emissiveColor, newProps.emissiveColor, 'emissiveColor', 'BabylonjsCoreColor3', changedProps)\r\n        checkPrimitiveDiff(oldProps.emissiveIntensity, newProps.emissiveIntensity, 'emissiveIntensity', 'number', changedProps)\r\n        checkTextureDiff(oldProps.emissiveTexture, newProps.emissiveTexture, 'emissiveTexture', 'BabylonjsCoreBaseTexture', changedProps)\r\n        checkPrimitiveDiff(oldProps.enableSpecularAntiAliasing, newProps.enableSpecularAntiAliasing, 'enableSpecularAntiAliasing', 'boolean', changedProps)\r\n        checkTextureDiff(oldProps.environmentBRDFTexture, newProps.environmentBRDFTexture, 'environmentBRDFTexture', 'BabylonjsCoreBaseTexture', changedProps)\r\n        checkPrimitiveDiff(oldProps.environmentIntensity, newProps.environmentIntensity, 'environmentIntensity', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.forceAlphaTest, newProps.forceAlphaTest, 'forceAlphaTest', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.forceIrradianceInFragment, newProps.forceIrradianceInFragment, 'forceIrradianceInFragment', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.forceNormalForward, newProps.forceNormalForward, 'forceNormalForward', 'boolean', changedProps)\r\n        // type: 'BabylonjsCoreImageProcessingConfiguration' property (not coded) BabylonjsCorePBRMaterial.imageProcessingConfiguration.\r\n        checkPrimitiveDiff(oldProps.indexOfRefraction, newProps.indexOfRefraction, 'indexOfRefraction', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.invertNormalMapX, newProps.invertNormalMapX, 'invertNormalMapX', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.invertNormalMapY, newProps.invertNormalMapY, 'invertNormalMapY', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.invertRefractionY, newProps.invertRefractionY, 'invertRefractionY', 'boolean', changedProps)\r\n        checkTextureDiff(oldProps.lightmapTexture, newProps.lightmapTexture, 'lightmapTexture', 'BabylonjsCoreBaseTexture', changedProps)\r\n        checkPrimitiveDiff(oldProps.linkRefractionWithTransparency, newProps.linkRefractionWithTransparency, 'linkRefractionWithTransparency', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.maxSimultaneousLights, newProps.maxSimultaneousLights, 'maxSimultaneousLights', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.metallic, newProps.metallic, 'metallic', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.metallicF0Factor, newProps.metallicF0Factor, 'metallicF0Factor', 'number', changedProps)\r\n        checkTextureDiff(oldProps.metallicTexture, newProps.metallicTexture, 'metallicTexture', 'BabylonjsCoreBaseTexture', changedProps)\r\n        checkPrimitiveDiff(oldProps.microSurface, newProps.microSurface, 'microSurface', 'number', changedProps)\r\n        checkTextureDiff(oldProps.microSurfaceTexture, newProps.microSurfaceTexture, 'microSurfaceTexture', 'BabylonjsCoreBaseTexture', changedProps)\r\n        checkTextureDiff(oldProps.opacityTexture, newProps.opacityTexture, 'opacityTexture', 'BabylonjsCoreBaseTexture', changedProps)\r\n        checkPrimitiveDiff(oldProps.parallaxScaleBias, newProps.parallaxScaleBias, 'parallaxScaleBias', 'number', changedProps)\r\n        checkColor3Diff(oldProps.reflectionColor, newProps.reflectionColor, 'reflectionColor', 'BabylonjsCoreColor3', changedProps)\r\n        checkTextureDiff(oldProps.reflectionTexture, newProps.reflectionTexture, 'reflectionTexture', 'BabylonjsCoreBaseTexture', changedProps)\r\n        checkColor3Diff(oldProps.reflectivityColor, newProps.reflectivityColor, 'reflectivityColor', 'BabylonjsCoreColor3', changedProps)\r\n        checkTextureDiff(oldProps.reflectivityTexture, newProps.reflectivityTexture, 'reflectivityTexture', 'BabylonjsCoreBaseTexture', changedProps)\r\n        checkTextureDiff(oldProps.refractionTexture, newProps.refractionTexture, 'refractionTexture', 'BabylonjsCoreBaseTexture', changedProps)\r\n        checkPrimitiveDiff(oldProps.roughness, newProps.roughness, 'roughness', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.specularIntensity, newProps.specularIntensity, 'specularIntensity', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.twoSidedLighting, newProps.twoSidedLighting, 'twoSidedLighting', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.unlit, newProps.unlit, 'unlit', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.useAlphaFresnel, newProps.useAlphaFresnel, 'useAlphaFresnel', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.useAlphaFromAlbedoTexture, newProps.useAlphaFromAlbedoTexture, 'useAlphaFromAlbedoTexture', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.useAmbientInGrayScale, newProps.useAmbientInGrayScale, 'useAmbientInGrayScale', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.useAmbientOcclusionFromMetallicTextureRed, newProps.useAmbientOcclusionFromMetallicTextureRed, 'useAmbientOcclusionFromMetallicTextureRed', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.useAutoMicroSurfaceFromReflectivityMap, newProps.useAutoMicroSurfaceFromReflectivityMap, 'useAutoMicroSurfaceFromReflectivityMap', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.useGLTFLightFalloff, newProps.useGLTFLightFalloff, 'useGLTFLightFalloff', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.useHorizonOcclusion, newProps.useHorizonOcclusion, 'useHorizonOcclusion', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.useLightmapAsShadowmap, newProps.useLightmapAsShadowmap, 'useLightmapAsShadowmap', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.useLinearAlphaFresnel, newProps.useLinearAlphaFresnel, 'useLinearAlphaFresnel', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.useMetallicF0FactorFromMetallicTexture, newProps.useMetallicF0FactorFromMetallicTexture, 'useMetallicF0FactorFromMetallicTexture', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.useMetallnessFromMetallicTextureBlue, newProps.useMetallnessFromMetallicTextureBlue, 'useMetallnessFromMetallicTextureBlue', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.useMicroSurfaceFromReflectivityMapAlpha, newProps.useMicroSurfaceFromReflectivityMapAlpha, 'useMicroSurfaceFromReflectivityMapAlpha', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.useObjectSpaceNormalMap, newProps.useObjectSpaceNormalMap, 'useObjectSpaceNormalMap', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.useParallax, newProps.useParallax, 'useParallax', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.useParallaxOcclusion, newProps.useParallaxOcclusion, 'useParallaxOcclusion', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.usePhysicalLightFalloff, newProps.usePhysicalLightFalloff, 'usePhysicalLightFalloff', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.useRadianceOcclusion, newProps.useRadianceOcclusion, 'useRadianceOcclusion', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.useRadianceOverAlpha, newProps.useRadianceOverAlpha, 'useRadianceOverAlpha', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.useRoughnessFromMetallicTextureAlpha, newProps.useRoughnessFromMetallicTextureAlpha, 'useRoughnessFromMetallicTextureAlpha', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.useRoughnessFromMetallicTextureGreen, newProps.useRoughnessFromMetallicTextureGreen, 'useRoughnessFromMetallicTextureGreen', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.useSpecularOverAlpha, newProps.useSpecularOverAlpha, 'useSpecularOverAlpha', 'boolean', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * The Physically based material of BJS.\r\n *\r\n * This offers the main features of a standard PBR material.\r\n * For more information, please refer to the documentation :\r\n * https://doc.babylonjs.com/how_to/physically_based_rendering\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberPBRMaterial implements HasPropsHandlers<FiberMaterialProps> {\r\n    private propsHandlers: PropsHandler<FiberMaterialProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberPBRMaterialPropsHandler(),\r\n            new FiberPBRBaseMaterialPropsHandler(),\r\n            new FiberPushMaterialPropsHandler(),\r\n            new FiberMaterialPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberMaterialProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberMaterialProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"PBRMaterial\",\r\n        \"namespace\": \"@babylonjs/core/Materials/material\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isMaterial\": true,\r\n        \"className\": \"FiberPBRMaterial\"\r\n    };\r\n}\r\n\r\nexport class FiberNodeMaterialPropsHandler implements PropsHandler<FiberNodeMaterialProps> {\r\n    getPropertyUpdates(oldProps: FiberNodeMaterialProps, newProps: FiberNodeMaterialProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        // type: 'BabylonjsCoreNodeMaterialBlock[]' property (not coded) BabylonjsCoreNodeMaterial.attachedBlocks.\r\n        // type: 'any' property (not coded) BabylonjsCoreNodeMaterial.BJSNODEMATERIALEDITOR.\r\n        // type: 'any' property (not coded) BabylonjsCoreNodeMaterial.editorData.\r\n        checkPrimitiveDiff(oldProps.ignoreAlpha, newProps.ignoreAlpha, 'ignoreAlpha', 'boolean', changedProps)\r\n        // type: 'BabylonjsCoreImageProcessingConfiguration' property (not coded) BabylonjsCoreNodeMaterial.imageProcessingConfiguration.\r\n        checkPrimitiveDiff(oldProps.maxSimultaneousLights, newProps.maxSimultaneousLights, 'maxSimultaneousLights', 'number', changedProps)\r\n        checkObservableDiff(oldProps.onBuildObservable, newProps.onBuildObservable, 'onBuildObservable', 'BabylonjsCoreObservable<BabylonjsCoreNodeMaterial>', changedProps)\r\n        // type: 'BabylonjsCoreINodeMaterialOptions' property (not coded) BabylonjsCoreNodeMaterial.options.\r\n        checkMethodDiff(oldProps.addOutputNode, newProps.addOutputNode, 'addOutputNode', '(node?: BabylonjsCoreNodeMaterialBlock) => this', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to create a node based material built by assembling shader blocks\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberNodeMaterial implements HasPropsHandlers<FiberMaterialProps> {\r\n    private propsHandlers: PropsHandler<FiberMaterialProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberNodeMaterialPropsHandler(),\r\n            new FiberPushMaterialPropsHandler(),\r\n            new FiberMaterialPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberMaterialProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberMaterialProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"NodeMaterial\",\r\n        \"namespace\": \"@babylonjs/core/Materials/material\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"options\",\r\n                \"type\": \"Partial<BabylonjsCoreINodeMaterialOptions>\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isMaterial\": true,\r\n        \"className\": \"FiberNodeMaterial\"\r\n    };\r\n}\r\n\r\nexport class FiberFluentMaterialPropsHandler implements PropsHandler<FiberFluentMaterialProps> {\r\n    getPropertyUpdates(oldProps: FiberFluentMaterialProps, newProps: FiberFluentMaterialProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkColor3Diff(oldProps.albedoColor, newProps.albedoColor, 'albedoColor', 'BabylonjsCoreColor3', changedProps)\r\n        checkTextureDiff(oldProps.albedoTexture, newProps.albedoTexture, 'albedoTexture', 'BabylonjsCoreBaseTexture', changedProps)\r\n        checkPrimitiveDiff(oldProps.alpha, newProps.alpha, 'alpha', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.borderMinValue, newProps.borderMinValue, 'borderMinValue', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.borderWidth, newProps.borderWidth, 'borderWidth', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.edgeSmoothingValue, newProps.edgeSmoothingValue, 'edgeSmoothingValue', 'number', changedProps)\r\n        checkColor4Diff(oldProps.hoverColor, newProps.hoverColor, 'hoverColor', 'BabylonjsCoreColor4', changedProps)\r\n        checkVector3Diff(oldProps.hoverPosition, newProps.hoverPosition, 'hoverPosition', 'BabylonjsCoreVector3', changedProps)\r\n        checkPrimitiveDiff(oldProps.hoverRadius, newProps.hoverRadius, 'hoverRadius', 'number', changedProps)\r\n        checkColor3Diff(oldProps.innerGlowColor, newProps.innerGlowColor, 'innerGlowColor', 'BabylonjsCoreColor3', changedProps)\r\n        checkPrimitiveDiff(oldProps.innerGlowColorIntensity, newProps.innerGlowColorIntensity, 'innerGlowColorIntensity', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.renderBorders, newProps.renderBorders, 'renderBorders', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.renderHoverLight, newProps.renderHoverLight, 'renderHoverLight', 'boolean', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to render controls with fluent desgin\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberFluentMaterial implements HasPropsHandlers<FiberMaterialProps> {\r\n    private propsHandlers: PropsHandler<FiberMaterialProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberFluentMaterialPropsHandler(),\r\n            new FiberPushMaterialPropsHandler(),\r\n            new FiberMaterialPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberMaterialProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberMaterialProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"FluentMaterial\",\r\n        \"namespace\": \"@babylonjs/core/Materials/material\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isMaterial\": true,\r\n        \"className\": \"FiberFluentMaterial\"\r\n    };\r\n}\r\n\r\nexport class FiberLightPropsHandler implements PropsHandler<FiberLightProps> {\r\n    getPropertyUpdates(oldProps: FiberLightProps, newProps: FiberLightProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkColor3Diff(oldProps.diffuse, newProps.diffuse, 'diffuse', 'BabylonjsCoreColor3', changedProps)\r\n        // type: 'BabylonjsCoreAbstractMesh[]' property (not coded) BabylonjsCoreLight.excludedMeshes.\r\n        checkPrimitiveDiff(oldProps.excludeWithLayerMask, newProps.excludeWithLayerMask, 'excludeWithLayerMask', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.falloffType, newProps.falloffType, 'falloffType', 'number', changedProps)\r\n        // type: 'BabylonjsCoreAbstractMesh[]' property (not coded) BabylonjsCoreLight.includedOnlyMeshes.\r\n        checkPrimitiveDiff(oldProps.includeOnlyWithLayerMask, newProps.includeOnlyWithLayerMask, 'includeOnlyWithLayerMask', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.intensity, newProps.intensity, 'intensity', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.intensityMode, newProps.intensityMode, 'intensityMode', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.lightmapMode, newProps.lightmapMode, 'lightmapMode', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.radius, newProps.radius, 'radius', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.range, newProps.range, 'range', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.renderPriority, newProps.renderPriority, 'renderPriority', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.shadowEnabled, newProps.shadowEnabled, 'shadowEnabled', 'boolean', changedProps)\r\n        checkColor3Diff(oldProps.specular, newProps.specular, 'specular', 'BabylonjsCoreColor3', changedProps)\r\n        checkMethodDiff(oldProps.setEnabled, newProps.setEnabled, 'setEnabled', '(value?: boolean) => void', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * Base class of all the lights in Babylon. It groups all the generic information about lights.\r\n * Lights are used, as you would expect, to affect how meshes are seen, in terms of both illumination and colour.\r\n * All meshes allow light to pass through them unless shadow generation is activated. The default number of lights allowed is four but this can be increased.\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberLight implements HasPropsHandlers<FiberLightProps> {\r\n    private propsHandlers: PropsHandler<FiberLightProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberLightPropsHandler(),\r\n            new FiberNodePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberLightProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberLightProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"Light\",\r\n        \"namespace\": \"@babylonjs/core/Lights/light\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isNode\": true,\r\n        \"className\": \"FiberLight\"\r\n    };\r\n}\r\n\r\nexport class FiberShadowLightPropsHandler implements PropsHandler<FiberShadowLightProps> {\r\n    getPropertyUpdates(oldProps: FiberShadowLightProps, newProps: FiberShadowLightProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkLambdaDiff(oldProps.customProjectionMatrixBuilder, newProps.customProjectionMatrixBuilder, 'customProjectionMatrixBuilder', '(viewMatrix: BabylonjsCoreMatrix, renderList: BabylonjsCoreAbstractMesh[], result: BabylonjsCoreMatrix) => void', changedProps)\r\n        checkVector3Diff(oldProps.direction, newProps.direction, 'direction', 'BabylonjsCoreVector3', changedProps)\r\n        checkVector3Diff(oldProps.position, newProps.position, 'position', 'BabylonjsCoreVector3', changedProps)\r\n        checkPrimitiveDiff(oldProps.shadowMaxZ, newProps.shadowMaxZ, 'shadowMaxZ', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.shadowMinZ, newProps.shadowMinZ, 'shadowMinZ', 'number', changedProps)\r\n        checkVector3Diff(oldProps.transformedDirection, newProps.transformedDirection, 'transformedDirection', 'BabylonjsCoreVector3', changedProps)\r\n        checkVector3Diff(oldProps.transformedPosition, newProps.transformedPosition, 'transformedPosition', 'BabylonjsCoreVector3', changedProps)\r\n        checkMethodDiff(oldProps.setDirectionToTarget, newProps.setDirectionToTarget, 'setDirectionToTarget', '(target?: BabylonjsCoreVector3) => BabylonjsCoreVector3', changedProps)\r\n        checkMethodDiff(oldProps.setShadowProjectionMatrix, newProps.setShadowProjectionMatrix, 'setShadowProjectionMatrix', '(matrix?: BabylonjsCoreMatrix, viewMatrix?: BabylonjsCoreMatrix, renderList?: BabylonjsCoreAbstractMesh[]) => BabylonjsCoreIShadowLight', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * Base implementation IShadowLight\r\n * It groups all the common behaviour in order to reduce dupplication and better follow the DRY pattern.\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberShadowLight implements HasPropsHandlers<FiberLightProps> {\r\n    private propsHandlers: PropsHandler<FiberLightProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberShadowLightPropsHandler(),\r\n            new FiberLightPropsHandler(),\r\n            new FiberNodePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberLightProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberLightProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"ShadowLight\",\r\n        \"namespace\": \"@babylonjs/core/Lights/light\",\r\n        \"parameters\": []\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isNode\": true,\r\n        \"isShadowLight\": true,\r\n        \"className\": \"FiberShadowLight\"\r\n    };\r\n}\r\n\r\nexport class FiberDirectionalLightPropsHandler implements PropsHandler<FiberDirectionalLightProps> {\r\n    getPropertyUpdates(oldProps: FiberDirectionalLightProps, newProps: FiberDirectionalLightProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.autoCalcShadowZBounds, newProps.autoCalcShadowZBounds, 'autoCalcShadowZBounds', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.autoUpdateExtends, newProps.autoUpdateExtends, 'autoUpdateExtends', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.shadowFrustumSize, newProps.shadowFrustumSize, 'shadowFrustumSize', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.shadowOrthoScale, newProps.shadowOrthoScale, 'shadowOrthoScale', 'number', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * A directional light is defined by a direction (what a surprise!).\r\n * The light is emitted from everywhere in the specified direction, and has an infinite range.\r\n * An example of a directional light is when a distance planet is lit by the apparently parallel lines of light from its sun. Light in a downward direction will light the top of an object.\r\n * Documentation: https://doc.babylonjs.com/babylon101/lights\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberDirectionalLight implements HasPropsHandlers<FiberLightProps> {\r\n    private propsHandlers: PropsHandler<FiberLightProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberDirectionalLightPropsHandler(),\r\n            new FiberShadowLightPropsHandler(),\r\n            new FiberLightPropsHandler(),\r\n            new FiberNodePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberLightProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberLightProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"DirectionalLight\",\r\n        \"namespace\": \"@babylonjs/core/Lights/light\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"direction\",\r\n                \"type\": \"BabylonjsCoreVector3\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isNode\": true,\r\n        \"isShadowLight\": true,\r\n        \"className\": \"FiberDirectionalLight\"\r\n    };\r\n}\r\n\r\nexport class FiberPointLightPropsHandler implements PropsHandler<FiberPointLightProps> {\r\n    getPropertyUpdates(oldProps: FiberPointLightProps, newProps: FiberPointLightProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkVector3Diff(oldProps.direction, newProps.direction, 'direction', 'BabylonjsCoreVector3', changedProps)\r\n        checkPrimitiveDiff(oldProps.shadowAngle, newProps.shadowAngle, 'shadowAngle', 'number', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * A point light is a light defined by an unique point in world space.\r\n * The light is emitted in every direction from this point.\r\n * A good example of a point light is a standard light bulb.\r\n * Documentation: https://doc.babylonjs.com/babylon101/lights\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberPointLight implements HasPropsHandlers<FiberLightProps> {\r\n    private propsHandlers: PropsHandler<FiberLightProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberPointLightPropsHandler(),\r\n            new FiberShadowLightPropsHandler(),\r\n            new FiberLightPropsHandler(),\r\n            new FiberNodePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberLightProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberLightProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"PointLight\",\r\n        \"namespace\": \"@babylonjs/core/Lights/light\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"position\",\r\n                \"type\": \"BabylonjsCoreVector3\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isNode\": true,\r\n        \"isShadowLight\": true,\r\n        \"className\": \"FiberPointLight\"\r\n    };\r\n}\r\n\r\nexport class FiberSpotLightPropsHandler implements PropsHandler<FiberSpotLightProps> {\r\n    getPropertyUpdates(oldProps: FiberSpotLightProps, newProps: FiberSpotLightProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.angle, newProps.angle, 'angle', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.exponent, newProps.exponent, 'exponent', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.innerAngle, newProps.innerAngle, 'innerAngle', 'number', changedProps)\r\n        checkTextureDiff(oldProps.projectionTexture, newProps.projectionTexture, 'projectionTexture', 'BabylonjsCoreBaseTexture', changedProps)\r\n        checkPrimitiveDiff(oldProps.projectionTextureLightFar, newProps.projectionTextureLightFar, 'projectionTextureLightFar', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.projectionTextureLightNear, newProps.projectionTextureLightNear, 'projectionTextureLightNear', 'number', changedProps)\r\n        checkVector3Diff(oldProps.projectionTextureUpDirection, newProps.projectionTextureUpDirection, 'projectionTextureUpDirection', 'BabylonjsCoreVector3', changedProps)\r\n        checkPrimitiveDiff(oldProps.shadowAngleScale, newProps.shadowAngleScale, 'shadowAngleScale', 'number', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * A spot light is defined by a position, a direction, an angle, and an exponent.\r\n * These values define a cone of light starting from the position, emitting toward the direction.\r\n * The angle, in radians, defines the size (field of illumination) of the spotlight's conical beam,\r\n * and the exponent defines the speed of the decay of the light with distance (reach).\r\n * Documentation: https://doc.babylonjs.com/babylon101/lights\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberSpotLight implements HasPropsHandlers<FiberLightProps> {\r\n    private propsHandlers: PropsHandler<FiberLightProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberSpotLightPropsHandler(),\r\n            new FiberShadowLightPropsHandler(),\r\n            new FiberLightPropsHandler(),\r\n            new FiberNodePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberLightProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberLightProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"SpotLight\",\r\n        \"namespace\": \"@babylonjs/core/Lights/light\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"position\",\r\n                \"type\": \"BabylonjsCoreVector3\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"direction\",\r\n                \"type\": \"BabylonjsCoreVector3\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"angle\",\r\n                \"type\": \"number\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"exponent\",\r\n                \"type\": \"number\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isNode\": true,\r\n        \"isShadowLight\": true,\r\n        \"className\": \"FiberSpotLight\"\r\n    };\r\n}\r\n\r\nexport class FiberHemisphericLightPropsHandler implements PropsHandler<FiberHemisphericLightProps> {\r\n    getPropertyUpdates(oldProps: FiberHemisphericLightProps, newProps: FiberHemisphericLightProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkVector3Diff(oldProps.direction, newProps.direction, 'direction', 'BabylonjsCoreVector3', changedProps)\r\n        checkColor3Diff(oldProps.groundColor, newProps.groundColor, 'groundColor', 'BabylonjsCoreColor3', changedProps)\r\n        checkMethodDiff(oldProps.setDirectionToTarget, newProps.setDirectionToTarget, 'setDirectionToTarget', '(target?: BabylonjsCoreVector3) => BabylonjsCoreVector3', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * The HemisphericLight simulates the ambient environment light,\r\n * so the passed direction is the light reflection direction, not the incoming direction.\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberHemisphericLight implements HasPropsHandlers<FiberLightProps> {\r\n    private propsHandlers: PropsHandler<FiberLightProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberHemisphericLightPropsHandler(),\r\n            new FiberLightPropsHandler(),\r\n            new FiberNodePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberLightProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberLightProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"HemisphericLight\",\r\n        \"namespace\": \"@babylonjs/core/Lights/light\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"direction\",\r\n                \"type\": \"BabylonjsCoreVector3\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isNode\": true,\r\n        \"className\": \"FiberHemisphericLight\"\r\n    };\r\n}\r\n\r\nexport class FiberControlPropsHandler implements PropsHandler<FiberControlProps> {\r\n    getPropertyUpdates(oldProps: FiberControlProps, newProps: FiberControlProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.alpha, newProps.alpha, 'alpha', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.clipChildren, newProps.clipChildren, 'clipChildren', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.clipContent, newProps.clipContent, 'clipContent', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.color, newProps.color, 'color', 'string', changedProps)\r\n        checkPrimitiveDiff(oldProps.disabledColor, newProps.disabledColor, 'disabledColor', 'string', changedProps)\r\n        checkPrimitiveDiff(oldProps.disabledColorItem, newProps.disabledColorItem, 'disabledColorItem', 'string', changedProps)\r\n        checkPrimitiveDiff(oldProps.fontFamily, newProps.fontFamily, 'fontFamily', 'string', changedProps)\r\n        // type: '{ ascent: number; height: number; descent: number; }' property (not coded) BabylonjsGuiControl.fontOffset.\r\n        checkPrimitiveDiff(oldProps.fontSize, newProps.fontSize, 'fontSize', 'string | number', changedProps)\r\n        checkPrimitiveDiff(oldProps.fontSizeInPixels, newProps.fontSizeInPixels, 'fontSizeInPixels', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.fontStyle, newProps.fontStyle, 'fontStyle', 'string', changedProps)\r\n        checkPrimitiveDiff(oldProps.fontWeight, newProps.fontWeight, 'fontWeight', 'string', changedProps)\r\n        checkPrimitiveDiff(oldProps.height, newProps.height, 'height', 'string | number', changedProps)\r\n        checkPrimitiveDiff(oldProps.heightInPixels, newProps.heightInPixels, 'heightInPixels', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.horizontalAlignment, newProps.horizontalAlignment, 'horizontalAlignment', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.hoverCursor, newProps.hoverCursor, 'hoverCursor', 'string', changedProps)\r\n        checkPrimitiveDiff(oldProps.isEnabled, newProps.isEnabled, 'isEnabled', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.isFocusInvisible, newProps.isFocusInvisible, 'isFocusInvisible', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.isHighlighted, newProps.isHighlighted, 'isHighlighted', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.isHitTestVisible, newProps.isHitTestVisible, 'isHitTestVisible', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.isPointerBlocker, newProps.isPointerBlocker, 'isPointerBlocker', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.isVisible, newProps.isVisible, 'isVisible', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.left, newProps.left, 'left', 'string | number', changedProps)\r\n        checkPrimitiveDiff(oldProps.leftInPixels, newProps.leftInPixels, 'leftInPixels', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.linkOffsetX, newProps.linkOffsetX, 'linkOffsetX', 'string | number', changedProps)\r\n        checkPrimitiveDiff(oldProps.linkOffsetXInPixels, newProps.linkOffsetXInPixels, 'linkOffsetXInPixels', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.linkOffsetY, newProps.linkOffsetY, 'linkOffsetY', 'string | number', changedProps)\r\n        checkPrimitiveDiff(oldProps.linkOffsetYInPixels, newProps.linkOffsetYInPixels, 'linkOffsetYInPixels', 'number', changedProps)\r\n        // type: 'any' property (not coded) BabylonjsGuiControl.metadata.\r\n        checkPrimitiveDiff(oldProps.name, newProps.name, 'name', 'string', changedProps)\r\n        checkPrimitiveDiff(oldProps.notRenderable, newProps.notRenderable, 'notRenderable', 'boolean', changedProps)\r\n        checkObservableDiff(oldProps.onAfterDrawObservable, newProps.onAfterDrawObservable, 'onAfterDrawObservable', 'BabylonjsCoreObservable<BabylonjsGuiControl>', changedProps)\r\n        checkObservableDiff(oldProps.onBeforeDrawObservable, newProps.onBeforeDrawObservable, 'onBeforeDrawObservable', 'BabylonjsCoreObservable<BabylonjsGuiControl>', changedProps)\r\n        checkObservableDiff(oldProps.onDirtyObservable, newProps.onDirtyObservable, 'onDirtyObservable', 'BabylonjsCoreObservable<BabylonjsGuiControl>', changedProps)\r\n        checkObservableDiff(oldProps.onPointerClickObservable, newProps.onPointerClickObservable, 'onPointerClickObservable', 'BabylonjsCoreObservable<BabylonjsGuiVector2WithInfo>', changedProps)\r\n        checkObservableDiff(oldProps.onPointerDownObservable, newProps.onPointerDownObservable, 'onPointerDownObservable', 'BabylonjsCoreObservable<BabylonjsGuiVector2WithInfo>', changedProps)\r\n        checkObservableDiff(oldProps.onPointerEnterObservable, newProps.onPointerEnterObservable, 'onPointerEnterObservable', 'BabylonjsCoreObservable<BabylonjsGuiControl>', changedProps)\r\n        checkObservableDiff(oldProps.onPointerMoveObservable, newProps.onPointerMoveObservable, 'onPointerMoveObservable', 'BabylonjsCoreObservable<BabylonjsCoreVector2>', changedProps)\r\n        checkObservableDiff(oldProps.onPointerOutObservable, newProps.onPointerOutObservable, 'onPointerOutObservable', 'BabylonjsCoreObservable<BabylonjsGuiControl>', changedProps)\r\n        checkObservableDiff(oldProps.onPointerUpObservable, newProps.onPointerUpObservable, 'onPointerUpObservable', 'BabylonjsCoreObservable<BabylonjsGuiVector2WithInfo>', changedProps)\r\n        checkObservableDiff(oldProps.onWheelObservable, newProps.onWheelObservable, 'onWheelObservable', 'BabylonjsCoreObservable<BabylonjsCoreVector2>', changedProps)\r\n        checkPrimitiveDiff(oldProps.paddingBottom, newProps.paddingBottom, 'paddingBottom', 'string | number', changedProps)\r\n        checkPrimitiveDiff(oldProps.paddingBottomInPixels, newProps.paddingBottomInPixels, 'paddingBottomInPixels', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.paddingLeft, newProps.paddingLeft, 'paddingLeft', 'string | number', changedProps)\r\n        checkPrimitiveDiff(oldProps.paddingLeftInPixels, newProps.paddingLeftInPixels, 'paddingLeftInPixels', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.paddingRight, newProps.paddingRight, 'paddingRight', 'string | number', changedProps)\r\n        checkPrimitiveDiff(oldProps.paddingRightInPixels, newProps.paddingRightInPixels, 'paddingRightInPixels', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.paddingTop, newProps.paddingTop, 'paddingTop', 'string | number', changedProps)\r\n        checkPrimitiveDiff(oldProps.paddingTopInPixels, newProps.paddingTopInPixels, 'paddingTopInPixels', 'number', changedProps)\r\n        // type: 'BabylonjsGuiContainer' property (not coded) BabylonjsGuiControl.parent.\r\n        checkPrimitiveDiff(oldProps.rotation, newProps.rotation, 'rotation', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.scaleX, newProps.scaleX, 'scaleX', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.scaleY, newProps.scaleY, 'scaleY', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.shadowBlur, newProps.shadowBlur, 'shadowBlur', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.shadowColor, newProps.shadowColor, 'shadowColor', 'string', changedProps)\r\n        checkPrimitiveDiff(oldProps.shadowOffsetX, newProps.shadowOffsetX, 'shadowOffsetX', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.shadowOffsetY, newProps.shadowOffsetY, 'shadowOffsetY', 'number', changedProps)\r\n        // type: 'BabylonjsGuiStyle' property (not coded) BabylonjsGuiControl.style.\r\n        checkPrimitiveDiff(oldProps.top, newProps.top, 'top', 'string | number', changedProps)\r\n        checkPrimitiveDiff(oldProps.topInPixels, newProps.topInPixels, 'topInPixels', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.transformCenterX, newProps.transformCenterX, 'transformCenterX', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.transformCenterY, newProps.transformCenterY, 'transformCenterY', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.uniqueId, newProps.uniqueId, 'uniqueId', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.useBitmapCache, newProps.useBitmapCache, 'useBitmapCache', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.verticalAlignment, newProps.verticalAlignment, 'verticalAlignment', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.width, newProps.width, 'width', 'string | number', changedProps)\r\n        checkPrimitiveDiff(oldProps.widthInPixels, newProps.widthInPixels, 'widthInPixels', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.zIndex, newProps.zIndex, 'zIndex', 'number', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * Root class used for all 2D controls\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberControl implements HasPropsHandlers<FiberControlProps> {\r\n    private propsHandlers: PropsHandler<FiberControlProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberControlPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberControlProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberControlProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"Control\",\r\n        \"namespace\": \"@babylonjs/gui/2D/controls/control\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isGUI2DControl\": true,\r\n        \"className\": \"FiberControl\"\r\n    };\r\n}\r\n\r\nexport class FiberContainerPropsHandler implements PropsHandler<FiberContainerProps> {\r\n    getPropertyUpdates(oldProps: FiberContainerProps, newProps: FiberContainerProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.adaptHeightToChildren, newProps.adaptHeightToChildren, 'adaptHeightToChildren', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.adaptWidthToChildren, newProps.adaptWidthToChildren, 'adaptWidthToChildren', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.background, newProps.background, 'background', 'string', changedProps)\r\n        checkPrimitiveDiff(oldProps.logLayoutCycleErrors, newProps.logLayoutCycleErrors, 'logLayoutCycleErrors', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.maxLayoutCycle, newProps.maxLayoutCycle, 'maxLayoutCycle', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.name, newProps.name, 'name', 'string', changedProps)\r\n        checkMethodDiff(oldProps.addControl, newProps.addControl, 'addControl', '(control?: BabylonjsGuiControl) => BabylonjsGuiContainer', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * Root class for 2D containers\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberContainer implements HasPropsHandlers<FiberControlProps> {\r\n    private propsHandlers: PropsHandler<FiberControlProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberContainerPropsHandler(),\r\n            new FiberControlPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberControlProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberControlProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"Container\",\r\n        \"namespace\": \"@babylonjs/gui/2D/controls/control\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isGUI2DControl\": true,\r\n        \"className\": \"FiberContainer\"\r\n    };\r\n}\r\n\r\nexport class FiberRectanglePropsHandler implements PropsHandler<FiberRectangleProps> {\r\n    getPropertyUpdates(oldProps: FiberRectangleProps, newProps: FiberRectangleProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.cornerRadius, newProps.cornerRadius, 'cornerRadius', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.name, newProps.name, 'name', 'string', changedProps)\r\n        checkPrimitiveDiff(oldProps.thickness, newProps.thickness, 'thickness', 'number', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to create rectangle container\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberRectangle implements HasPropsHandlers<FiberControlProps> {\r\n    private propsHandlers: PropsHandler<FiberControlProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberRectanglePropsHandler(),\r\n            new FiberContainerPropsHandler(),\r\n            new FiberControlPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberControlProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberControlProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"Rectangle\",\r\n        \"namespace\": \"@babylonjs/gui/2D/controls/control\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isGUI2DControl\": true,\r\n        \"className\": \"FiberRectangle\"\r\n    };\r\n}\r\n\r\nexport class FiberButtonPropsHandler implements PropsHandler<FiberButtonProps> {\r\n    getPropertyUpdates(oldProps: FiberButtonProps, newProps: FiberButtonProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.delegatePickingToChildren, newProps.delegatePickingToChildren, 'delegatePickingToChildren', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.name, newProps.name, 'name', 'string', changedProps)\r\n        checkLambdaDiff(oldProps.pointerDownAnimation, newProps.pointerDownAnimation, 'pointerDownAnimation', '() => void', changedProps)\r\n        checkLambdaDiff(oldProps.pointerEnterAnimation, newProps.pointerEnterAnimation, 'pointerEnterAnimation', '() => void', changedProps)\r\n        checkLambdaDiff(oldProps.pointerOutAnimation, newProps.pointerOutAnimation, 'pointerOutAnimation', '() => void', changedProps)\r\n        checkLambdaDiff(oldProps.pointerUpAnimation, newProps.pointerUpAnimation, 'pointerUpAnimation', '() => void', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to create 2D buttons\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberButton implements HasPropsHandlers<FiberControlProps> {\r\n    private propsHandlers: PropsHandler<FiberControlProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberButtonPropsHandler(),\r\n            new FiberRectanglePropsHandler(),\r\n            new FiberContainerPropsHandler(),\r\n            new FiberControlPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberControlProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberControlProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"Button\",\r\n        \"namespace\": \"@babylonjs/gui/2D/controls/control\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isGUI2DControl\": true,\r\n        \"className\": \"FiberButton\"\r\n    };\r\n}\r\n\r\nexport class FiberSelectionPanelPropsHandler implements PropsHandler<FiberSelectionPanelProps> {\r\n    getPropertyUpdates(oldProps: FiberSelectionPanelProps, newProps: FiberSelectionPanelProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.barColor, newProps.barColor, 'barColor', 'string', changedProps)\r\n        checkPrimitiveDiff(oldProps.barHeight, newProps.barHeight, 'barHeight', 'string', changedProps)\r\n        checkPrimitiveDiff(oldProps.buttonBackground, newProps.buttonBackground, 'buttonBackground', 'string', changedProps)\r\n        checkPrimitiveDiff(oldProps.buttonColor, newProps.buttonColor, 'buttonColor', 'string', changedProps)\r\n        // type: 'BabylonjsGuiSelectorGroup[]' property (not coded) BabylonjsGuiSelectionPanel.groups.\r\n        checkPrimitiveDiff(oldProps.headerColor, newProps.headerColor, 'headerColor', 'string', changedProps)\r\n        checkPrimitiveDiff(oldProps.labelColor, newProps.labelColor, 'labelColor', 'string', changedProps)\r\n        checkPrimitiveDiff(oldProps.name, newProps.name, 'name', 'string', changedProps)\r\n        checkPrimitiveDiff(oldProps.spacerHeight, newProps.spacerHeight, 'spacerHeight', 'string', changedProps)\r\n        checkMethodDiff(oldProps.addGroup, newProps.addGroup, 'addGroup', '(group?: BabylonjsGuiSelectorGroup) => void', changedProps)\r\n        checkMethodDiff(oldProps.addToGroupCheckbox, newProps.addToGroupCheckbox, 'addToGroupCheckbox', '(groupNb?: number, label?: string, func?: () => void, checked?: boolean) => void', changedProps)\r\n        checkMethodDiff(oldProps.addToGroupRadio, newProps.addToGroupRadio, 'addToGroupRadio', '(groupNb?: number, label?: string, func?: () => void, checked?: boolean) => void', changedProps)\r\n        checkMethodDiff(oldProps.addToGroupSlider, newProps.addToGroupSlider, 'addToGroupSlider', '(groupNb?: number, label?: string, func?: () => void, unit?: string, min?: number, max?: number, value?: number, onVal?: (v: number) => number) => void', changedProps)\r\n        checkMethodDiff(oldProps.setHeaderName, newProps.setHeaderName, 'setHeaderName', '(label?: string, groupNb?: number) => void', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to hold the controls for the checkboxes, radio buttons and sliders\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberSelectionPanel implements HasPropsHandlers<FiberControlProps> {\r\n    private propsHandlers: PropsHandler<FiberControlProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberSelectionPanelPropsHandler(),\r\n            new FiberRectanglePropsHandler(),\r\n            new FiberContainerPropsHandler(),\r\n            new FiberControlPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberControlProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberControlProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"SelectionPanel\",\r\n        \"namespace\": \"@babylonjs/gui/2D/controls/control\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"groups\",\r\n                \"type\": \"BabylonjsGuiSelectorGroup[]\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isGUI2DControl\": true,\r\n        \"className\": \"FiberSelectionPanel\"\r\n    };\r\n}\r\n\r\nexport class FiberScrollViewerPropsHandler implements PropsHandler<FiberScrollViewerProps> {\r\n    getPropertyUpdates(oldProps: FiberScrollViewerProps, newProps: FiberScrollViewerProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.barBackground, newProps.barBackground, 'barBackground', 'string', changedProps)\r\n        checkPrimitiveDiff(oldProps.barColor, newProps.barColor, 'barColor', 'string', changedProps)\r\n        // type: 'BabylonjsGuiImage' property (not coded) BabylonjsGuiScrollViewer.barImage.\r\n        checkPrimitiveDiff(oldProps.barImageHeight, newProps.barImageHeight, 'barImageHeight', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.barSize, newProps.barSize, 'barSize', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.forceHorizontalBar, newProps.forceHorizontalBar, 'forceHorizontalBar', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.forceVerticalBar, newProps.forceVerticalBar, 'forceVerticalBar', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.freezeControls, newProps.freezeControls, 'freezeControls', 'boolean', changedProps)\r\n        // type: 'BabylonjsGuiImage' property (not coded) BabylonjsGuiScrollViewer.horizontalBarImage.\r\n        checkPrimitiveDiff(oldProps.horizontalBarImageHeight, newProps.horizontalBarImageHeight, 'horizontalBarImageHeight', 'number', changedProps)\r\n        // type: 'BabylonjsGuiImage' property (not coded) BabylonjsGuiScrollViewer.horizontalThumbImage.\r\n        checkPrimitiveDiff(oldProps.scrollBackground, newProps.scrollBackground, 'scrollBackground', 'string', changedProps)\r\n        checkPrimitiveDiff(oldProps.thumbHeight, newProps.thumbHeight, 'thumbHeight', 'number', changedProps)\r\n        // type: 'BabylonjsGuiImage' property (not coded) BabylonjsGuiScrollViewer.thumbImage.\r\n        checkPrimitiveDiff(oldProps.thumbLength, newProps.thumbLength, 'thumbLength', 'number', changedProps)\r\n        // type: 'BabylonjsGuiImage' property (not coded) BabylonjsGuiScrollViewer.verticalBarImage.\r\n        checkPrimitiveDiff(oldProps.verticalBarImageHeight, newProps.verticalBarImageHeight, 'verticalBarImageHeight', 'number', changedProps)\r\n        // type: 'BabylonjsGuiImage' property (not coded) BabylonjsGuiScrollViewer.verticalThumbImage.\r\n        checkPrimitiveDiff(oldProps.wheelPrecision, newProps.wheelPrecision, 'wheelPrecision', 'number', changedProps)\r\n        checkMethodDiff(oldProps.addControl, newProps.addControl, 'addControl', '(control?: BabylonjsGuiControl) => BabylonjsGuiContainer', changedProps)\r\n        checkMethodDiff(oldProps.setBucketSizes, newProps.setBucketSizes, 'setBucketSizes', '(width?: number, height?: number) => void', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to hold a viewer window and sliders in a grid\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberScrollViewer implements HasPropsHandlers<FiberControlProps> {\r\n    private propsHandlers: PropsHandler<FiberControlProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberScrollViewerPropsHandler(),\r\n            new FiberRectanglePropsHandler(),\r\n            new FiberContainerPropsHandler(),\r\n            new FiberControlPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberControlProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberControlProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"ScrollViewer\",\r\n        \"namespace\": \"@babylonjs/gui/2D/controls/control\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"isImageBased\",\r\n                \"type\": \"boolean\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isGUI2DControl\": true,\r\n        \"className\": \"FiberScrollViewer\"\r\n    };\r\n}\r\n\r\nexport class FiberStackPanelPropsHandler implements PropsHandler<FiberStackPanelProps> {\r\n    getPropertyUpdates(oldProps: FiberStackPanelProps, newProps: FiberStackPanelProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.height, newProps.height, 'height', 'string | number', changedProps)\r\n        checkPrimitiveDiff(oldProps.ignoreLayoutWarnings, newProps.ignoreLayoutWarnings, 'ignoreLayoutWarnings', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.isVertical, newProps.isVertical, 'isVertical', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.name, newProps.name, 'name', 'string', changedProps)\r\n        checkPrimitiveDiff(oldProps.width, newProps.width, 'width', 'string | number', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to create a 2D stack panel container\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberStackPanel implements HasPropsHandlers<FiberControlProps> {\r\n    private propsHandlers: PropsHandler<FiberControlProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberStackPanelPropsHandler(),\r\n            new FiberContainerPropsHandler(),\r\n            new FiberControlPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberControlProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberControlProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"StackPanel\",\r\n        \"namespace\": \"@babylonjs/gui/2D/controls/control\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isGUI2DControl\": true,\r\n        \"className\": \"FiberStackPanel\"\r\n    };\r\n}\r\n\r\nexport class FiberVirtualKeyboardPropsHandler implements PropsHandler<FiberVirtualKeyboardProps> {\r\n    getPropertyUpdates(oldProps: FiberVirtualKeyboardProps, newProps: FiberVirtualKeyboardProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.defaultButtonBackground, newProps.defaultButtonBackground, 'defaultButtonBackground', 'string', changedProps)\r\n        checkPrimitiveDiff(oldProps.defaultButtonColor, newProps.defaultButtonColor, 'defaultButtonColor', 'string', changedProps)\r\n        checkPrimitiveDiff(oldProps.defaultButtonHeight, newProps.defaultButtonHeight, 'defaultButtonHeight', 'string', changedProps)\r\n        checkPrimitiveDiff(oldProps.defaultButtonPaddingBottom, newProps.defaultButtonPaddingBottom, 'defaultButtonPaddingBottom', 'string', changedProps)\r\n        checkPrimitiveDiff(oldProps.defaultButtonPaddingLeft, newProps.defaultButtonPaddingLeft, 'defaultButtonPaddingLeft', 'string', changedProps)\r\n        checkPrimitiveDiff(oldProps.defaultButtonPaddingRight, newProps.defaultButtonPaddingRight, 'defaultButtonPaddingRight', 'string', changedProps)\r\n        checkPrimitiveDiff(oldProps.defaultButtonPaddingTop, newProps.defaultButtonPaddingTop, 'defaultButtonPaddingTop', 'string', changedProps)\r\n        checkPrimitiveDiff(oldProps.defaultButtonWidth, newProps.defaultButtonWidth, 'defaultButtonWidth', 'string', changedProps)\r\n        checkObservableDiff(oldProps.onKeyPressObservable, newProps.onKeyPressObservable, 'onKeyPressObservable', 'BabylonjsCoreObservable<string>', changedProps)\r\n        checkPrimitiveDiff(oldProps.selectedShiftThickness, newProps.selectedShiftThickness, 'selectedShiftThickness', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.shiftButtonColor, newProps.shiftButtonColor, 'shiftButtonColor', 'string', changedProps)\r\n        checkPrimitiveDiff(oldProps.shiftState, newProps.shiftState, 'shiftState', 'number', changedProps)\r\n        checkMethodDiff(oldProps.addKeysRow, newProps.addKeysRow, 'addKeysRow', '(keys?: string[], propertySets?: BabylonjsGuiKeyPropertySet[]) => void', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to create virtual keyboard\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberVirtualKeyboard implements HasPropsHandlers<FiberControlProps> {\r\n    private propsHandlers: PropsHandler<FiberControlProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberVirtualKeyboardPropsHandler(),\r\n            new FiberStackPanelPropsHandler(),\r\n            new FiberContainerPropsHandler(),\r\n            new FiberControlPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberControlProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberControlProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"VirtualKeyboard\",\r\n        \"namespace\": \"@babylonjs/gui/2D/controls/control\",\r\n        \"parameters\": []\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isGUI2DControl\": true,\r\n        \"className\": \"FiberVirtualKeyboard\"\r\n    };\r\n}\r\n\r\nexport class FiberEllipsePropsHandler implements PropsHandler<FiberEllipseProps> {\r\n    getPropertyUpdates(oldProps: FiberEllipseProps, newProps: FiberEllipseProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.name, newProps.name, 'name', 'string', changedProps)\r\n        checkPrimitiveDiff(oldProps.thickness, newProps.thickness, 'thickness', 'number', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to create 2D ellipse containers\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberEllipse implements HasPropsHandlers<FiberControlProps> {\r\n    private propsHandlers: PropsHandler<FiberControlProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberEllipsePropsHandler(),\r\n            new FiberContainerPropsHandler(),\r\n            new FiberControlPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberControlProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberControlProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"Ellipse\",\r\n        \"namespace\": \"@babylonjs/gui/2D/controls/control\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isGUI2DControl\": true,\r\n        \"className\": \"FiberEllipse\"\r\n    };\r\n}\r\n\r\nexport class FiberGridPropsHandler implements PropsHandler<FiberGridProps> {\r\n    getPropertyUpdates(oldProps: FiberGridProps, newProps: FiberGridProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.name, newProps.name, 'name', 'string', changedProps)\r\n        checkMethodDiff(oldProps.addColumnDefinition, newProps.addColumnDefinition, 'addColumnDefinition', '(width?: number, isPixel?: boolean) => BabylonjsGuiGrid', changedProps)\r\n        checkMethodDiff(oldProps.addControl, newProps.addControl, 'addControl', '(control?: BabylonjsGuiControl, row?: number, column?: number) => BabylonjsGuiGrid', changedProps)\r\n        checkMethodDiff(oldProps.addRowDefinition, newProps.addRowDefinition, 'addRowDefinition', '(height?: number, isPixel?: boolean) => BabylonjsGuiGrid', changedProps)\r\n        checkMethodDiff(oldProps.setColumnDefinition, newProps.setColumnDefinition, 'setColumnDefinition', '(index?: number, width?: number, isPixel?: boolean) => BabylonjsGuiGrid', changedProps)\r\n        checkMethodDiff(oldProps.setRowDefinition, newProps.setRowDefinition, 'setRowDefinition', '(index?: number, height?: number, isPixel?: boolean) => BabylonjsGuiGrid', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to create a 2D grid container\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberGrid implements HasPropsHandlers<FiberControlProps> {\r\n    private propsHandlers: PropsHandler<FiberControlProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberGridPropsHandler(),\r\n            new FiberContainerPropsHandler(),\r\n            new FiberControlPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberControlProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberControlProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"Grid\",\r\n        \"namespace\": \"@babylonjs/gui/2D/controls/control\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isGUI2DControl\": true,\r\n        \"className\": \"FiberGrid\"\r\n    };\r\n}\r\n\r\nexport class Fiber_ScrollViewerWindowPropsHandler implements PropsHandler<Fiber_ScrollViewerWindowProps> {\r\n    getPropertyUpdates(oldProps: Fiber_ScrollViewerWindowProps, newProps: Fiber_ScrollViewerWindowProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.freezeControls, newProps.freezeControls, 'freezeControls', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.parentClientHeight, newProps.parentClientHeight, 'parentClientHeight', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.parentClientWidth, newProps.parentClientWidth, 'parentClientWidth', 'number', changedProps)\r\n        checkMethodDiff(oldProps.setBucketSizes, newProps.setBucketSizes, 'setBucketSizes', '(width?: number, height?: number) => void', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to hold a the container for ScrollViewer\r\n *\r\n * This code has been generated\r\n */\r\nexport class Fiber_ScrollViewerWindow implements HasPropsHandlers<FiberControlProps> {\r\n    private propsHandlers: PropsHandler<FiberControlProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new Fiber_ScrollViewerWindowPropsHandler(),\r\n            new FiberContainerPropsHandler(),\r\n            new FiberControlPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberControlProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberControlProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"_ScrollViewerWindow\",\r\n        \"namespace\": \"@babylonjs/gui/2D/controls/control\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isGUI2DControl\": true,\r\n        \"className\": \"Fiber_ScrollViewerWindow\"\r\n    };\r\n}\r\n\r\nexport class FiberTextBlockPropsHandler implements PropsHandler<FiberTextBlockProps> {\r\n    getPropertyUpdates(oldProps: FiberTextBlockProps, newProps: FiberTextBlockProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.lineSpacing, newProps.lineSpacing, 'lineSpacing', 'string | number', changedProps)\r\n        checkPrimitiveDiff(oldProps.name, newProps.name, 'name', 'string', changedProps)\r\n        checkObservableDiff(oldProps.onLinesReadyObservable, newProps.onLinesReadyObservable, 'onLinesReadyObservable', 'BabylonjsCoreObservable<BabylonjsGuiTextBlock>', changedProps)\r\n        checkObservableDiff(oldProps.onTextChangedObservable, newProps.onTextChangedObservable, 'onTextChangedObservable', 'BabylonjsCoreObservable<BabylonjsGuiTextBlock>', changedProps)\r\n        checkPrimitiveDiff(oldProps.outlineColor, newProps.outlineColor, 'outlineColor', 'string', changedProps)\r\n        checkPrimitiveDiff(oldProps.outlineWidth, newProps.outlineWidth, 'outlineWidth', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.resizeToFit, newProps.resizeToFit, 'resizeToFit', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.text, newProps.text, 'text', 'string', changedProps)\r\n        checkPrimitiveDiff(oldProps.textHorizontalAlignment, newProps.textHorizontalAlignment, 'textHorizontalAlignment', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.textVerticalAlignment, newProps.textVerticalAlignment, 'textVerticalAlignment', 'number', changedProps)\r\n        // type: 'boolean | BabylonjsGuiTextWrapping' property (not coded) BabylonjsGuiTextBlock.textWrapping.\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to create text block control\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberTextBlock implements HasPropsHandlers<FiberControlProps> {\r\n    private propsHandlers: PropsHandler<FiberControlProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberTextBlockPropsHandler(),\r\n            new FiberControlPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberControlProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberControlProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"TextBlock\",\r\n        \"namespace\": \"@babylonjs/gui/2D/controls/control\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"text\",\r\n                \"type\": \"string\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isGUI2DControl\": true,\r\n        \"className\": \"FiberTextBlock\"\r\n    };\r\n}\r\n\r\nexport class FiberImagePropsHandler implements PropsHandler<FiberImageProps> {\r\n    getPropertyUpdates(oldProps: FiberImageProps, newProps: FiberImageProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.autoScale, newProps.autoScale, 'autoScale', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.cellHeight, newProps.cellHeight, 'cellHeight', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.cellId, newProps.cellId, 'cellId', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.cellWidth, newProps.cellWidth, 'cellWidth', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.detectPointerOnOpaqueOnly, newProps.detectPointerOnOpaqueOnly, 'detectPointerOnOpaqueOnly', 'boolean', changedProps)\r\n        // type: 'HTMLImageElement' property (not coded) BabylonjsGuiImage.domImage.\r\n        checkPrimitiveDiff(oldProps.name, newProps.name, 'name', 'string', changedProps)\r\n        checkObservableDiff(oldProps.onImageLoadedObservable, newProps.onImageLoadedObservable, 'onImageLoadedObservable', 'BabylonjsCoreObservable<BabylonjsGuiImage>', changedProps)\r\n        checkObservableDiff(oldProps.onSVGAttributesComputedObservable, newProps.onSVGAttributesComputedObservable, 'onSVGAttributesComputedObservable', 'BabylonjsCoreObservable<BabylonjsGuiImage>', changedProps)\r\n        checkPrimitiveDiff(oldProps.populateNinePatchSlicesFromImage, newProps.populateNinePatchSlicesFromImage, 'populateNinePatchSlicesFromImage', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.sliceBottom, newProps.sliceBottom, 'sliceBottom', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.sliceLeft, newProps.sliceLeft, 'sliceLeft', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.sliceRight, newProps.sliceRight, 'sliceRight', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.sliceTop, newProps.sliceTop, 'sliceTop', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.source, newProps.source, 'source', 'string', changedProps)\r\n        checkPrimitiveDiff(oldProps.sourceHeight, newProps.sourceHeight, 'sourceHeight', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.sourceLeft, newProps.sourceLeft, 'sourceLeft', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.sourceTop, newProps.sourceTop, 'sourceTop', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.sourceWidth, newProps.sourceWidth, 'sourceWidth', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.stretch, newProps.stretch, 'stretch', 'number', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to create 2D images\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberImage implements HasPropsHandlers<FiberControlProps> {\r\n    private propsHandlers: PropsHandler<FiberControlProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberImagePropsHandler(),\r\n            new FiberControlPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberControlProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberControlProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"Image\",\r\n        \"namespace\": \"@babylonjs/gui/2D/controls/control\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"url\",\r\n                \"type\": \"string\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isGUI2DControl\": true,\r\n        \"className\": \"FiberImage\"\r\n    };\r\n}\r\n\r\nexport class FiberCheckboxPropsHandler implements PropsHandler<FiberCheckboxProps> {\r\n    getPropertyUpdates(oldProps: FiberCheckboxProps, newProps: FiberCheckboxProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.background, newProps.background, 'background', 'string', changedProps)\r\n        checkPrimitiveDiff(oldProps.checkSizeRatio, newProps.checkSizeRatio, 'checkSizeRatio', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.isChecked, newProps.isChecked, 'isChecked', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.name, newProps.name, 'name', 'string', changedProps)\r\n        checkObservableDiff(oldProps.onIsCheckedChangedObservable, newProps.onIsCheckedChangedObservable, 'onIsCheckedChangedObservable', 'BabylonjsCoreObservable<boolean>', changedProps)\r\n        checkPrimitiveDiff(oldProps.thickness, newProps.thickness, 'thickness', 'number', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to represent a 2D checkbox\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberCheckbox implements HasPropsHandlers<FiberControlProps> {\r\n    private propsHandlers: PropsHandler<FiberControlProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberCheckboxPropsHandler(),\r\n            new FiberControlPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberControlProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberControlProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"Checkbox\",\r\n        \"namespace\": \"@babylonjs/gui/2D/controls/control\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isGUI2DControl\": true,\r\n        \"className\": \"FiberCheckbox\"\r\n    };\r\n}\r\n\r\nexport class FiberColorPickerPropsHandler implements PropsHandler<FiberColorPickerProps> {\r\n    getPropertyUpdates(oldProps: FiberColorPickerProps, newProps: FiberColorPickerProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.height, newProps.height, 'height', 'string | number', changedProps)\r\n        checkPrimitiveDiff(oldProps.name, newProps.name, 'name', 'string', changedProps)\r\n        checkObservableDiff(oldProps.onValueChangedObservable, newProps.onValueChangedObservable, 'onValueChangedObservable', 'BabylonjsCoreObservable<BabylonjsCoreColor3>', changedProps)\r\n        checkPrimitiveDiff(oldProps.size, newProps.size, 'size', 'string | number', changedProps)\r\n        checkColor3Diff(oldProps.value, newProps.value, 'value', 'BabylonjsCoreColor3', changedProps)\r\n        checkPrimitiveDiff(oldProps.width, newProps.width, 'width', 'string | number', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to create color pickers\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberColorPicker implements HasPropsHandlers<FiberControlProps> {\r\n    private propsHandlers: PropsHandler<FiberControlProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberColorPickerPropsHandler(),\r\n            new FiberControlPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberControlProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberControlProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"ColorPicker\",\r\n        \"namespace\": \"@babylonjs/gui/2D/controls/control\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isGUI2DControl\": true,\r\n        \"className\": \"FiberColorPicker\"\r\n    };\r\n}\r\n\r\nexport class FiberInputTextPropsHandler implements PropsHandler<FiberInputTextProps> {\r\n    getPropertyUpdates(oldProps: FiberInputTextProps, newProps: FiberInputTextProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.addKey, newProps.addKey, 'addKey', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.autoStretchWidth, newProps.autoStretchWidth, 'autoStretchWidth', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.background, newProps.background, 'background', 'string', changedProps)\r\n        checkPrimitiveDiff(oldProps.currentKey, newProps.currentKey, 'currentKey', 'string', changedProps)\r\n        checkPrimitiveDiff(oldProps.deadKey, newProps.deadKey, 'deadKey', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.disableMobilePrompt, newProps.disableMobilePrompt, 'disableMobilePrompt', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.focusedBackground, newProps.focusedBackground, 'focusedBackground', 'string', changedProps)\r\n        checkPrimitiveDiff(oldProps.focusedColor, newProps.focusedColor, 'focusedColor', 'string', changedProps)\r\n        checkPrimitiveDiff(oldProps.highligherOpacity, newProps.highligherOpacity, 'highligherOpacity', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.highlightedText, newProps.highlightedText, 'highlightedText', 'string', changedProps)\r\n        checkPrimitiveDiff(oldProps.margin, newProps.margin, 'margin', 'string', changedProps)\r\n        checkPrimitiveDiff(oldProps.maxWidth, newProps.maxWidth, 'maxWidth', 'string | number', changedProps)\r\n        checkPrimitiveDiff(oldProps.name, newProps.name, 'name', 'string', changedProps)\r\n        checkObservableDiff(oldProps.onBeforeKeyAddObservable, newProps.onBeforeKeyAddObservable, 'onBeforeKeyAddObservable', 'BabylonjsCoreObservable<BabylonjsGuiInputText>', changedProps)\r\n        checkObservableDiff(oldProps.onBlurObservable, newProps.onBlurObservable, 'onBlurObservable', 'BabylonjsCoreObservable<BabylonjsGuiInputText>', changedProps)\r\n        checkObservableDiff(oldProps.onFocusObservable, newProps.onFocusObservable, 'onFocusObservable', 'BabylonjsCoreObservable<BabylonjsGuiInputText>', changedProps)\r\n        checkPrimitiveDiff(oldProps.onFocusSelectAll, newProps.onFocusSelectAll, 'onFocusSelectAll', 'boolean', changedProps)\r\n        checkObservableDiff(oldProps.onKeyboardEventProcessedObservable, newProps.onKeyboardEventProcessedObservable, 'onKeyboardEventProcessedObservable', 'BabylonjsCoreObservable<KeyboardEvent>', changedProps)\r\n        checkObservableDiff(oldProps.onTextChangedObservable, newProps.onTextChangedObservable, 'onTextChangedObservable', 'BabylonjsCoreObservable<BabylonjsGuiInputText>', changedProps)\r\n        checkObservableDiff(oldProps.onTextCopyObservable, newProps.onTextCopyObservable, 'onTextCopyObservable', 'BabylonjsCoreObservable<BabylonjsGuiInputText>', changedProps)\r\n        checkObservableDiff(oldProps.onTextCutObservable, newProps.onTextCutObservable, 'onTextCutObservable', 'BabylonjsCoreObservable<BabylonjsGuiInputText>', changedProps)\r\n        checkObservableDiff(oldProps.onTextHighlightObservable, newProps.onTextHighlightObservable, 'onTextHighlightObservable', 'BabylonjsCoreObservable<BabylonjsGuiInputText>', changedProps)\r\n        checkObservableDiff(oldProps.onTextPasteObservable, newProps.onTextPasteObservable, 'onTextPasteObservable', 'BabylonjsCoreObservable<BabylonjsGuiInputText>', changedProps)\r\n        checkPrimitiveDiff(oldProps.placeholderColor, newProps.placeholderColor, 'placeholderColor', 'string', changedProps)\r\n        checkPrimitiveDiff(oldProps.placeholderText, newProps.placeholderText, 'placeholderText', 'string', changedProps)\r\n        checkPrimitiveDiff(oldProps.promptMessage, newProps.promptMessage, 'promptMessage', 'string', changedProps)\r\n        checkPrimitiveDiff(oldProps.text, newProps.text, 'text', 'string', changedProps)\r\n        checkPrimitiveDiff(oldProps.textHighlightColor, newProps.textHighlightColor, 'textHighlightColor', 'string', changedProps)\r\n        checkPrimitiveDiff(oldProps.thickness, newProps.thickness, 'thickness', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.width, newProps.width, 'width', 'string | number', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to create input text control\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberInputText implements HasPropsHandlers<FiberControlProps> {\r\n    private propsHandlers: PropsHandler<FiberControlProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberInputTextPropsHandler(),\r\n            new FiberControlPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberControlProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberControlProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"InputText\",\r\n        \"namespace\": \"@babylonjs/gui/2D/controls/control\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"text\",\r\n                \"type\": \"string\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isGUI2DControl\": true,\r\n        \"className\": \"FiberInputText\"\r\n    };\r\n}\r\n\r\nexport class FiberInputPasswordPropsHandler implements PropsHandler<FiberInputPasswordProps> {\r\n    getPropertyUpdates(oldProps: FiberInputPasswordProps, newProps: FiberInputPasswordProps): PropertyUpdate[] | null {\r\n        return null; // no props to check\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to create a password control\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberInputPassword implements HasPropsHandlers<FiberControlProps> {\r\n    private propsHandlers: PropsHandler<FiberControlProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberInputPasswordPropsHandler(),\r\n            new FiberInputTextPropsHandler(),\r\n            new FiberControlPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberControlProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberControlProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"InputPassword\",\r\n        \"namespace\": \"@babylonjs/gui/2D/controls/control\",\r\n        \"parameters\": []\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isGUI2DControl\": true,\r\n        \"className\": \"FiberInputPassword\"\r\n    };\r\n}\r\n\r\nexport class FiberLinePropsHandler implements PropsHandler<FiberLineProps> {\r\n    getPropertyUpdates(oldProps: FiberLineProps, newProps: FiberLineProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkControlDiff(oldProps.connectedControl, newProps.connectedControl, 'connectedControl', 'BabylonjsGuiControl', changedProps)\r\n        checkNumericArrayDiff(oldProps.dash, newProps.dash, 'dash', 'number[]', changedProps)\r\n        checkPrimitiveDiff(oldProps.horizontalAlignment, newProps.horizontalAlignment, 'horizontalAlignment', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.lineWidth, newProps.lineWidth, 'lineWidth', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.name, newProps.name, 'name', 'string', changedProps)\r\n        checkPrimitiveDiff(oldProps.verticalAlignment, newProps.verticalAlignment, 'verticalAlignment', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.x1, newProps.x1, 'x1', 'string | number', changedProps)\r\n        checkPrimitiveDiff(oldProps.x2, newProps.x2, 'x2', 'string | number', changedProps)\r\n        checkPrimitiveDiff(oldProps.y1, newProps.y1, 'y1', 'string | number', changedProps)\r\n        checkPrimitiveDiff(oldProps.y2, newProps.y2, 'y2', 'string | number', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to render 2D lines\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberLine implements HasPropsHandlers<FiberControlProps> {\r\n    private propsHandlers: PropsHandler<FiberControlProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberLinePropsHandler(),\r\n            new FiberControlPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberControlProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberControlProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"Line\",\r\n        \"namespace\": \"@babylonjs/gui/2D/controls/control\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isGUI2DControl\": true,\r\n        \"className\": \"FiberLine\"\r\n    };\r\n}\r\n\r\nexport class FiberMultiLinePropsHandler implements PropsHandler<FiberMultiLineProps> {\r\n    getPropertyUpdates(oldProps: FiberMultiLineProps, newProps: FiberMultiLineProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkNumericArrayDiff(oldProps.dash, newProps.dash, 'dash', 'number[]', changedProps)\r\n        checkPrimitiveDiff(oldProps.horizontalAlignment, newProps.horizontalAlignment, 'horizontalAlignment', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.lineWidth, newProps.lineWidth, 'lineWidth', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.name, newProps.name, 'name', 'string', changedProps)\r\n        checkLambdaDiff(oldProps.onPointUpdate, newProps.onPointUpdate, 'onPointUpdate', '() => void', changedProps)\r\n        checkPrimitiveDiff(oldProps.verticalAlignment, newProps.verticalAlignment, 'verticalAlignment', 'number', changedProps)\r\n        checkMethodDiff(oldProps.add, newProps.add, 'add', '(items?: (BabylonjsCoreAbstractMesh | BabylonjsGuiControl | { x: string | number; y: string | number; })[]) => BabylonjsGuiMultiLinePoint[]', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to create multi line control\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberMultiLine implements HasPropsHandlers<FiberControlProps> {\r\n    private propsHandlers: PropsHandler<FiberControlProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberMultiLinePropsHandler(),\r\n            new FiberControlPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberControlProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberControlProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"MultiLine\",\r\n        \"namespace\": \"@babylonjs/gui/2D/controls/control\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isGUI2DControl\": true,\r\n        \"className\": \"FiberMultiLine\"\r\n    };\r\n}\r\n\r\nexport class FiberRadioButtonPropsHandler implements PropsHandler<FiberRadioButtonProps> {\r\n    getPropertyUpdates(oldProps: FiberRadioButtonProps, newProps: FiberRadioButtonProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.background, newProps.background, 'background', 'string', changedProps)\r\n        checkPrimitiveDiff(oldProps.checkSizeRatio, newProps.checkSizeRatio, 'checkSizeRatio', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.group, newProps.group, 'group', 'string', changedProps)\r\n        checkPrimitiveDiff(oldProps.isChecked, newProps.isChecked, 'isChecked', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.name, newProps.name, 'name', 'string', changedProps)\r\n        checkObservableDiff(oldProps.onIsCheckedChangedObservable, newProps.onIsCheckedChangedObservable, 'onIsCheckedChangedObservable', 'BabylonjsCoreObservable<boolean>', changedProps)\r\n        checkPrimitiveDiff(oldProps.thickness, newProps.thickness, 'thickness', 'number', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to create radio button controls\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberRadioButton implements HasPropsHandlers<FiberControlProps> {\r\n    private propsHandlers: PropsHandler<FiberControlProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberRadioButtonPropsHandler(),\r\n            new FiberControlPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberControlProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberControlProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"RadioButton\",\r\n        \"namespace\": \"@babylonjs/gui/2D/controls/control\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isGUI2DControl\": true,\r\n        \"className\": \"FiberRadioButton\"\r\n    };\r\n}\r\n\r\nexport class FiberBaseSliderPropsHandler implements PropsHandler<FiberBaseSliderProps> {\r\n    getPropertyUpdates(oldProps: FiberBaseSliderProps, newProps: FiberBaseSliderProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.barOffset, newProps.barOffset, 'barOffset', 'string | number', changedProps)\r\n        checkPrimitiveDiff(oldProps.displayThumb, newProps.displayThumb, 'displayThumb', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.isThumbClamped, newProps.isThumbClamped, 'isThumbClamped', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.isVertical, newProps.isVertical, 'isVertical', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.maximum, newProps.maximum, 'maximum', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.minimum, newProps.minimum, 'minimum', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.name, newProps.name, 'name', 'string', changedProps)\r\n        checkObservableDiff(oldProps.onValueChangedObservable, newProps.onValueChangedObservable, 'onValueChangedObservable', 'BabylonjsCoreObservable<number>', changedProps)\r\n        checkPrimitiveDiff(oldProps.step, newProps.step, 'step', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.thumbWidth, newProps.thumbWidth, 'thumbWidth', 'string | number', changedProps)\r\n        checkPrimitiveDiff(oldProps.value, newProps.value, 'value', 'number', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to create slider controls\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberBaseSlider implements HasPropsHandlers<FiberControlProps> {\r\n    private propsHandlers: PropsHandler<FiberControlProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberBaseSliderPropsHandler(),\r\n            new FiberControlPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberControlProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberControlProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"BaseSlider\",\r\n        \"namespace\": \"@babylonjs/gui/2D/controls/control\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isGUI2DControl\": true,\r\n        \"className\": \"FiberBaseSlider\"\r\n    };\r\n}\r\n\r\nexport class FiberScrollBarPropsHandler implements PropsHandler<FiberScrollBarProps> {\r\n    getPropertyUpdates(oldProps: FiberScrollBarProps, newProps: FiberScrollBarProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.background, newProps.background, 'background', 'string', changedProps)\r\n        checkPrimitiveDiff(oldProps.borderColor, newProps.borderColor, 'borderColor', 'string', changedProps)\r\n        checkPrimitiveDiff(oldProps.name, newProps.name, 'name', 'string', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to create slider controls\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberScrollBar implements HasPropsHandlers<FiberControlProps> {\r\n    private propsHandlers: PropsHandler<FiberControlProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberScrollBarPropsHandler(),\r\n            new FiberBaseSliderPropsHandler(),\r\n            new FiberControlPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberControlProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberControlProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"ScrollBar\",\r\n        \"namespace\": \"@babylonjs/gui/2D/controls/control\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isGUI2DControl\": true,\r\n        \"className\": \"FiberScrollBar\"\r\n    };\r\n}\r\n\r\nexport class FiberImageScrollBarPropsHandler implements PropsHandler<FiberImageScrollBarProps> {\r\n    getPropertyUpdates(oldProps: FiberImageScrollBarProps, newProps: FiberImageScrollBarProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        // type: 'BabylonjsGuiImage' property (not coded) BabylonjsGuiImageScrollBar.backgroundImage.\r\n        checkPrimitiveDiff(oldProps.barImageHeight, newProps.barImageHeight, 'barImageHeight', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.name, newProps.name, 'name', 'string', changedProps)\r\n        checkPrimitiveDiff(oldProps.num90RotationInVerticalMode, newProps.num90RotationInVerticalMode, 'num90RotationInVerticalMode', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.thumbHeight, newProps.thumbHeight, 'thumbHeight', 'number', changedProps)\r\n        // type: 'BabylonjsGuiImage' property (not coded) BabylonjsGuiImageScrollBar.thumbImage.\r\n        checkPrimitiveDiff(oldProps.thumbLength, newProps.thumbLength, 'thumbLength', 'number', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to create slider controls\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberImageScrollBar implements HasPropsHandlers<FiberControlProps> {\r\n    private propsHandlers: PropsHandler<FiberControlProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberImageScrollBarPropsHandler(),\r\n            new FiberBaseSliderPropsHandler(),\r\n            new FiberControlPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberControlProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberControlProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"ImageScrollBar\",\r\n        \"namespace\": \"@babylonjs/gui/2D/controls/control\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isGUI2DControl\": true,\r\n        \"className\": \"FiberImageScrollBar\"\r\n    };\r\n}\r\n\r\nexport class FiberSliderPropsHandler implements PropsHandler<FiberSliderProps> {\r\n    getPropertyUpdates(oldProps: FiberSliderProps, newProps: FiberSliderProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.background, newProps.background, 'background', 'string', changedProps)\r\n        checkPrimitiveDiff(oldProps.borderColor, newProps.borderColor, 'borderColor', 'string', changedProps)\r\n        checkPrimitiveDiff(oldProps.displayValueBar, newProps.displayValueBar, 'displayValueBar', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.isThumbCircle, newProps.isThumbCircle, 'isThumbCircle', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.name, newProps.name, 'name', 'string', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to create slider controls\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberSlider implements HasPropsHandlers<FiberControlProps> {\r\n    private propsHandlers: PropsHandler<FiberControlProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberSliderPropsHandler(),\r\n            new FiberBaseSliderPropsHandler(),\r\n            new FiberControlPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberControlProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberControlProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"Slider\",\r\n        \"namespace\": \"@babylonjs/gui/2D/controls/control\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isGUI2DControl\": true,\r\n        \"className\": \"FiberSlider\"\r\n    };\r\n}\r\n\r\nexport class FiberImageBasedSliderPropsHandler implements PropsHandler<FiberImageBasedSliderProps> {\r\n    getPropertyUpdates(oldProps: FiberImageBasedSliderProps, newProps: FiberImageBasedSliderProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        // type: 'BabylonjsGuiImage' property (not coded) BabylonjsGuiImageBasedSlider.backgroundImage.\r\n        checkPrimitiveDiff(oldProps.displayThumb, newProps.displayThumb, 'displayThumb', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.name, newProps.name, 'name', 'string', changedProps)\r\n        // type: 'BabylonjsGuiImage' property (not coded) BabylonjsGuiImageBasedSlider.thumbImage.\r\n        // type: 'BabylonjsGuiImage' property (not coded) BabylonjsGuiImageBasedSlider.valueBarImage.\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to create slider controls based on images\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberImageBasedSlider implements HasPropsHandlers<FiberControlProps> {\r\n    private propsHandlers: PropsHandler<FiberControlProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberImageBasedSliderPropsHandler(),\r\n            new FiberBaseSliderPropsHandler(),\r\n            new FiberControlPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberControlProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberControlProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"ImageBasedSlider\",\r\n        \"namespace\": \"@babylonjs/gui/2D/controls/control\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isGUI2DControl\": true,\r\n        \"className\": \"FiberImageBasedSlider\"\r\n    };\r\n}\r\n\r\nexport class FiberDisplayGridPropsHandler implements PropsHandler<FiberDisplayGridProps> {\r\n    getPropertyUpdates(oldProps: FiberDisplayGridProps, newProps: FiberDisplayGridProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.background, newProps.background, 'background', 'string', changedProps)\r\n        checkPrimitiveDiff(oldProps.cellHeight, newProps.cellHeight, 'cellHeight', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.cellWidth, newProps.cellWidth, 'cellWidth', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.displayMajorLines, newProps.displayMajorLines, 'displayMajorLines', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.displayMinorLines, newProps.displayMinorLines, 'displayMinorLines', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.majorLineColor, newProps.majorLineColor, 'majorLineColor', 'string', changedProps)\r\n        checkPrimitiveDiff(oldProps.majorLineFrequency, newProps.majorLineFrequency, 'majorLineFrequency', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.majorLineTickness, newProps.majorLineTickness, 'majorLineTickness', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.minorLineColor, newProps.minorLineColor, 'minorLineColor', 'string', changedProps)\r\n        checkPrimitiveDiff(oldProps.minorLineTickness, newProps.minorLineTickness, 'minorLineTickness', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.name, newProps.name, 'name', 'string', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to render a grid\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberDisplayGrid implements HasPropsHandlers<FiberControlProps> {\r\n    private propsHandlers: PropsHandler<FiberControlProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberDisplayGridPropsHandler(),\r\n            new FiberControlPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberControlProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberControlProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"DisplayGrid\",\r\n        \"namespace\": \"@babylonjs/gui/2D/controls/control\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isGUI2DControl\": true,\r\n        \"className\": \"FiberDisplayGrid\"\r\n    };\r\n}\r\n\r\nexport class FiberControl3DPropsHandler implements PropsHandler<FiberControl3DProps> {\r\n    getPropertyUpdates(oldProps: FiberControl3DProps, newProps: FiberControl3DProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.isVisible, newProps.isVisible, 'isVisible', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.name, newProps.name, 'name', 'string', changedProps)\r\n        checkObservableDiff(oldProps.onPointerClickObservable, newProps.onPointerClickObservable, 'onPointerClickObservable', 'BabylonjsCoreObservable<BabylonjsGuiVector3WithInfo>', changedProps)\r\n        checkObservableDiff(oldProps.onPointerDownObservable, newProps.onPointerDownObservable, 'onPointerDownObservable', 'BabylonjsCoreObservable<BabylonjsGuiVector3WithInfo>', changedProps)\r\n        checkObservableDiff(oldProps.onPointerEnterObservable, newProps.onPointerEnterObservable, 'onPointerEnterObservable', 'BabylonjsCoreObservable<BabylonjsGuiControl3D>', changedProps)\r\n        checkObservableDiff(oldProps.onPointerMoveObservable, newProps.onPointerMoveObservable, 'onPointerMoveObservable', 'BabylonjsCoreObservable<BabylonjsCoreVector3>', changedProps)\r\n        checkObservableDiff(oldProps.onPointerOutObservable, newProps.onPointerOutObservable, 'onPointerOutObservable', 'BabylonjsCoreObservable<BabylonjsGuiControl3D>', changedProps)\r\n        checkObservableDiff(oldProps.onPointerUpObservable, newProps.onPointerUpObservable, 'onPointerUpObservable', 'BabylonjsCoreObservable<BabylonjsGuiVector3WithInfo>', changedProps)\r\n        // type: 'BabylonjsGuiContainer3D' property (not coded) BabylonjsGuiControl3D.parent.\r\n        checkLambdaDiff(oldProps.pointerDownAnimation, newProps.pointerDownAnimation, 'pointerDownAnimation', '() => void', changedProps)\r\n        checkLambdaDiff(oldProps.pointerEnterAnimation, newProps.pointerEnterAnimation, 'pointerEnterAnimation', '() => void', changedProps)\r\n        checkLambdaDiff(oldProps.pointerOutAnimation, newProps.pointerOutAnimation, 'pointerOutAnimation', '() => void', changedProps)\r\n        checkLambdaDiff(oldProps.pointerUpAnimation, newProps.pointerUpAnimation, 'pointerUpAnimation', '() => void', changedProps)\r\n        checkVector3Diff(oldProps.position, newProps.position, 'position', 'BabylonjsCoreVector3', changedProps)\r\n        checkVector3Diff(oldProps.scaling, newProps.scaling, 'scaling', 'BabylonjsCoreVector3', changedProps)\r\n        checkMethodDiff(oldProps.addBehavior, newProps.addBehavior, 'addBehavior', '(behavior?: BabylonjsCoreBehavior<BabylonjsGuiControl3D>) => BabylonjsGuiControl3D', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * Class used as base class for controls\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberControl3D implements HasPropsHandlers<FiberControl3DProps> {\r\n    private propsHandlers: PropsHandler<FiberControl3DProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberControl3DPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberControl3DProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberControl3DProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"Control3D\",\r\n        \"namespace\": \"@babylonjs/gui/3D/controls/control3D\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isGUI3DControl\": true,\r\n        \"className\": \"FiberControl3D\"\r\n    };\r\n}\r\n\r\nexport class FiberContainer3DPropsHandler implements PropsHandler<FiberContainer3DProps> {\r\n    getPropertyUpdates(oldProps: FiberContainer3DProps, newProps: FiberContainer3DProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.blockLayout, newProps.blockLayout, 'blockLayout', 'boolean', changedProps)\r\n        checkMethodDiff(oldProps.addControl, newProps.addControl, 'addControl', '(control?: BabylonjsGuiControl3D) => BabylonjsGuiContainer3D', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to create containers for controls\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberContainer3D implements HasPropsHandlers<FiberControl3DProps> {\r\n    private propsHandlers: PropsHandler<FiberControl3DProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberContainer3DPropsHandler(),\r\n            new FiberControl3DPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberControl3DProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberControl3DProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"Container3D\",\r\n        \"namespace\": \"@babylonjs/gui/3D/controls/control3D\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isGUI3DControl\": true,\r\n        \"className\": \"FiberContainer3D\"\r\n    };\r\n}\r\n\r\nexport class FiberVolumeBasedPanelPropsHandler implements PropsHandler<FiberVolumeBasedPanelProps> {\r\n    getPropertyUpdates(oldProps: FiberVolumeBasedPanelProps, newProps: FiberVolumeBasedPanelProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.columns, newProps.columns, 'columns', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.margin, newProps.margin, 'margin', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.orientation, newProps.orientation, 'orientation', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.rows, newProps.rows, 'rows', 'number', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * Abstract class used to create a container panel deployed on the surface of a volume\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberVolumeBasedPanel implements HasPropsHandlers<FiberControl3DProps> {\r\n    private propsHandlers: PropsHandler<FiberControl3DProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberVolumeBasedPanelPropsHandler(),\r\n            new FiberContainer3DPropsHandler(),\r\n            new FiberControl3DPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberControl3DProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberControl3DProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"VolumeBasedPanel\",\r\n        \"namespace\": \"@babylonjs/gui/3D/controls/control3D\",\r\n        \"parameters\": []\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isGUI3DControl\": true,\r\n        \"className\": \"FiberVolumeBasedPanel\"\r\n    };\r\n}\r\n\r\nexport class FiberCylinderPanelPropsHandler implements PropsHandler<FiberCylinderPanelProps> {\r\n    getPropertyUpdates(oldProps: FiberCylinderPanelProps, newProps: FiberCylinderPanelProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.radius, newProps.radius, 'radius', 'number', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a cylinder\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberCylinderPanel implements HasPropsHandlers<FiberControl3DProps> {\r\n    private propsHandlers: PropsHandler<FiberControl3DProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberCylinderPanelPropsHandler(),\r\n            new FiberVolumeBasedPanelPropsHandler(),\r\n            new FiberContainer3DPropsHandler(),\r\n            new FiberControl3DPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberControl3DProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberControl3DProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"CylinderPanel\",\r\n        \"namespace\": \"@babylonjs/gui/3D/controls/control3D\",\r\n        \"parameters\": []\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isGUI3DControl\": true,\r\n        \"className\": \"FiberCylinderPanel\"\r\n    };\r\n}\r\n\r\nexport class FiberPlanePanelPropsHandler implements PropsHandler<FiberPlanePanelProps> {\r\n    getPropertyUpdates(oldProps: FiberPlanePanelProps, newProps: FiberPlanePanelProps): PropertyUpdate[] | null {\r\n        return null; // no props to check\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a plane\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberPlanePanel implements HasPropsHandlers<FiberControl3DProps> {\r\n    private propsHandlers: PropsHandler<FiberControl3DProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberPlanePanelPropsHandler(),\r\n            new FiberVolumeBasedPanelPropsHandler(),\r\n            new FiberContainer3DPropsHandler(),\r\n            new FiberControl3DPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberControl3DProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberControl3DProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"PlanePanel\",\r\n        \"namespace\": \"@babylonjs/gui/3D/controls/control3D\",\r\n        \"parameters\": []\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isGUI3DControl\": true,\r\n        \"className\": \"FiberPlanePanel\"\r\n    };\r\n}\r\n\r\nexport class FiberScatterPanelPropsHandler implements PropsHandler<FiberScatterPanelProps> {\r\n    getPropertyUpdates(oldProps: FiberScatterPanelProps, newProps: FiberScatterPanelProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.iteration, newProps.iteration, 'iteration', 'number', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to create a container panel where items get randomized planar mapping\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberScatterPanel implements HasPropsHandlers<FiberControl3DProps> {\r\n    private propsHandlers: PropsHandler<FiberControl3DProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberScatterPanelPropsHandler(),\r\n            new FiberVolumeBasedPanelPropsHandler(),\r\n            new FiberContainer3DPropsHandler(),\r\n            new FiberControl3DPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberControl3DProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberControl3DProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"ScatterPanel\",\r\n        \"namespace\": \"@babylonjs/gui/3D/controls/control3D\",\r\n        \"parameters\": []\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isGUI3DControl\": true,\r\n        \"className\": \"FiberScatterPanel\"\r\n    };\r\n}\r\n\r\nexport class FiberSpherePanelPropsHandler implements PropsHandler<FiberSpherePanelProps> {\r\n    getPropertyUpdates(oldProps: FiberSpherePanelProps, newProps: FiberSpherePanelProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.radius, newProps.radius, 'radius', 'number', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a sphere\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberSpherePanel implements HasPropsHandlers<FiberControl3DProps> {\r\n    private propsHandlers: PropsHandler<FiberControl3DProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberSpherePanelPropsHandler(),\r\n            new FiberVolumeBasedPanelPropsHandler(),\r\n            new FiberContainer3DPropsHandler(),\r\n            new FiberControl3DPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberControl3DProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberControl3DProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"SpherePanel\",\r\n        \"namespace\": \"@babylonjs/gui/3D/controls/control3D\",\r\n        \"parameters\": []\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isGUI3DControl\": true,\r\n        \"className\": \"FiberSpherePanel\"\r\n    };\r\n}\r\n\r\nexport class FiberStackPanel3DPropsHandler implements PropsHandler<FiberStackPanel3DProps> {\r\n    getPropertyUpdates(oldProps: FiberStackPanel3DProps, newProps: FiberStackPanel3DProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.isVertical, newProps.isVertical, 'isVertical', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.margin, newProps.margin, 'margin', 'number', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to create a stack panel in 3D on XY plane\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberStackPanel3D implements HasPropsHandlers<FiberControl3DProps> {\r\n    private propsHandlers: PropsHandler<FiberControl3DProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberStackPanel3DPropsHandler(),\r\n            new FiberContainer3DPropsHandler(),\r\n            new FiberControl3DPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberControl3DProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberControl3DProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"StackPanel3D\",\r\n        \"namespace\": \"@babylonjs/gui/3D/controls/control3D\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"isVertical\",\r\n                \"type\": \"boolean\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isGUI3DControl\": true,\r\n        \"className\": \"FiberStackPanel3D\"\r\n    };\r\n}\r\n\r\nexport class FiberAbstractButton3DPropsHandler implements PropsHandler<FiberAbstractButton3DProps> {\r\n    getPropertyUpdates(oldProps: FiberAbstractButton3DProps, newProps: FiberAbstractButton3DProps): PropertyUpdate[] | null {\r\n        return null; // no props to check\r\n    }\r\n}\r\n\r\n/**\r\n * Class used as a root to all buttons\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberAbstractButton3D implements HasPropsHandlers<FiberControl3DProps> {\r\n    private propsHandlers: PropsHandler<FiberControl3DProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberAbstractButton3DPropsHandler(),\r\n            new FiberControl3DPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberControl3DProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberControl3DProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"AbstractButton3D\",\r\n        \"namespace\": \"@babylonjs/gui/3D/controls/control3D\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isGUI3DControl\": true,\r\n        \"className\": \"FiberAbstractButton3D\"\r\n    };\r\n}\r\n\r\nexport class FiberButton3DPropsHandler implements PropsHandler<FiberButton3DProps> {\r\n    getPropertyUpdates(oldProps: FiberButton3DProps, newProps: FiberButton3DProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkControlDiff(oldProps.content, newProps.content, 'content', 'BabylonjsGuiControl', changedProps)\r\n        checkPrimitiveDiff(oldProps.contentResolution, newProps.contentResolution, 'contentResolution', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.contentScaleRatio, newProps.contentScaleRatio, 'contentScaleRatio', 'number', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to create a button in 3D\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberButton3D implements HasPropsHandlers<FiberControl3DProps> {\r\n    private propsHandlers: PropsHandler<FiberControl3DProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberButton3DPropsHandler(),\r\n            new FiberAbstractButton3DPropsHandler(),\r\n            new FiberControl3DPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberControl3DProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberControl3DProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"Button3D\",\r\n        \"namespace\": \"@babylonjs/gui/3D/controls/control3D\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isGUI3DControl\": true,\r\n        \"className\": \"FiberButton3D\"\r\n    };\r\n}\r\n\r\nexport class FiberHolographicButtonPropsHandler implements PropsHandler<FiberHolographicButtonProps> {\r\n    getPropertyUpdates(oldProps: FiberHolographicButtonProps, newProps: FiberHolographicButtonProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.imageUrl, newProps.imageUrl, 'imageUrl', 'string', changedProps)\r\n        checkPrimitiveDiff(oldProps.renderingGroupId, newProps.renderingGroupId, 'renderingGroupId', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.text, newProps.text, 'text', 'string', changedProps)\r\n        checkPrimitiveDiff(oldProps.tooltipText, newProps.tooltipText, 'tooltipText', 'string', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to create a holographic button in 3D\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberHolographicButton implements HasPropsHandlers<FiberControl3DProps> {\r\n    private propsHandlers: PropsHandler<FiberControl3DProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberHolographicButtonPropsHandler(),\r\n            new FiberButton3DPropsHandler(),\r\n            new FiberAbstractButton3DPropsHandler(),\r\n            new FiberControl3DPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberControl3DProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberControl3DProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"HolographicButton\",\r\n        \"namespace\": \"@babylonjs/gui/3D/controls/control3D\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"shareMaterials\",\r\n                \"type\": \"boolean\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isGUI3DControl\": true,\r\n        \"className\": \"FiberHolographicButton\"\r\n    };\r\n}\r\n\r\nexport class FiberMeshButton3DPropsHandler implements PropsHandler<FiberMeshButton3DProps> {\r\n    getPropertyUpdates(oldProps: FiberMeshButton3DProps, newProps: FiberMeshButton3DProps): PropertyUpdate[] | null {\r\n        return null; // no props to check\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to create an interactable object. It's a 3D button using a mesh coming from the current scene\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberMeshButton3D implements HasPropsHandlers<FiberControl3DProps> {\r\n    private propsHandlers: PropsHandler<FiberControl3DProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberMeshButton3DPropsHandler(),\r\n            new FiberButton3DPropsHandler(),\r\n            new FiberAbstractButton3DPropsHandler(),\r\n            new FiberControl3DPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberControl3DProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberControl3DProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"MeshButton3D\",\r\n        \"namespace\": \"@babylonjs/gui/3D/controls/control3D\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"mesh\",\r\n                \"type\": \"BabylonjsCoreMesh\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isGUI3DControl\": true,\r\n        \"className\": \"FiberMeshButton3D\"\r\n    };\r\n}\r\n\r\nexport class FiberEffectLayerPropsHandler implements PropsHandler<FiberEffectLayerProps> {\r\n    getPropertyUpdates(oldProps: FiberEffectLayerProps, newProps: FiberEffectLayerProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.isEnabled, newProps.isEnabled, 'isEnabled', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.name, newProps.name, 'name', 'string', changedProps)\r\n        checkColor4Diff(oldProps.neutralColor, newProps.neutralColor, 'neutralColor', 'BabylonjsCoreColor4', changedProps)\r\n        checkObservableDiff(oldProps.onAfterComposeObservable, newProps.onAfterComposeObservable, 'onAfterComposeObservable', 'BabylonjsCoreObservable<BabylonjsCoreEffectLayer>', changedProps)\r\n        checkObservableDiff(oldProps.onAfterRenderMeshToEffect, newProps.onAfterRenderMeshToEffect, 'onAfterRenderMeshToEffect', 'BabylonjsCoreObservable<BabylonjsCoreAbstractMesh>', changedProps)\r\n        checkObservableDiff(oldProps.onBeforeComposeObservable, newProps.onBeforeComposeObservable, 'onBeforeComposeObservable', 'BabylonjsCoreObservable<BabylonjsCoreEffectLayer>', changedProps)\r\n        checkObservableDiff(oldProps.onBeforeRenderMainTextureObservable, newProps.onBeforeRenderMainTextureObservable, 'onBeforeRenderMainTextureObservable', 'BabylonjsCoreObservable<BabylonjsCoreEffectLayer>', changedProps)\r\n        checkObservableDiff(oldProps.onBeforeRenderMeshToEffect, newProps.onBeforeRenderMeshToEffect, 'onBeforeRenderMeshToEffect', 'BabylonjsCoreObservable<BabylonjsCoreAbstractMesh>', changedProps)\r\n        checkObservableDiff(oldProps.onDisposeObservable, newProps.onDisposeObservable, 'onDisposeObservable', 'BabylonjsCoreObservable<BabylonjsCoreEffectLayer>', changedProps)\r\n        checkObservableDiff(oldProps.onSizeChangedObservable, newProps.onSizeChangedObservable, 'onSizeChangedObservable', 'BabylonjsCoreObservable<BabylonjsCoreEffectLayer>', changedProps)\r\n        checkPrimitiveDiff(oldProps.renderingGroupId, newProps.renderingGroupId, 'renderingGroupId', 'number', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * The effect layer Helps adding post process effect blended with the main pass.\r\n *\r\n * This can be for instance use to generate glow or higlight effects on the scene.\r\n *\r\n * The effect layer class can not be used directly and is intented to inherited from to be\r\n * customized per effects.\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberEffectLayer implements HasPropsHandlers<FiberEffectLayerProps> {\r\n    private propsHandlers: PropsHandler<FiberEffectLayerProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberEffectLayerPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberEffectLayerProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberEffectLayerProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"EffectLayer\",\r\n        \"namespace\": \"@babylonjs/core/Layers/effectLayer\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isEffectLayer\": true,\r\n        \"className\": \"FiberEffectLayer\"\r\n    };\r\n}\r\n\r\nexport class FiberGlowLayerPropsHandler implements PropsHandler<FiberGlowLayerProps> {\r\n    getPropertyUpdates(oldProps: FiberGlowLayerProps, newProps: FiberGlowLayerProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.blurKernelSize, newProps.blurKernelSize, 'blurKernelSize', 'number', changedProps)\r\n        checkLambdaDiff(oldProps.customEmissiveColorSelector, newProps.customEmissiveColorSelector, 'customEmissiveColorSelector', '(mesh: BabylonjsCoreMesh, subMesh: BabylonjsCoreSubMesh, material: BabylonjsCoreMaterial, result: BabylonjsCoreColor4) => void', changedProps)\r\n        checkLambdaDiff(oldProps.customEmissiveTextureSelector, newProps.customEmissiveTextureSelector, 'customEmissiveTextureSelector', '(mesh: BabylonjsCoreMesh, subMesh: BabylonjsCoreSubMesh, material: BabylonjsCoreMaterial) => BabylonjsCoreTexture', changedProps)\r\n        checkPrimitiveDiff(oldProps.intensity, newProps.intensity, 'intensity', 'number', changedProps)\r\n        checkMethodDiff(oldProps.addExcludedMesh, newProps.addExcludedMesh, 'addExcludedMesh', '(mesh?: BabylonjsCoreMesh) => void', changedProps)\r\n        checkMethodDiff(oldProps.addIncludedOnlyMesh, newProps.addIncludedOnlyMesh, 'addIncludedOnlyMesh', '(mesh?: BabylonjsCoreMesh) => void', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * The glow layer Helps adding a glow effect around the emissive parts of a mesh.\r\n *\r\n * Once instantiated in a scene, by default, all the emissive meshes will glow.\r\n *\r\n * Documentation: https://doc.babylonjs.com/how_to/glow_layer\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberGlowLayer implements HasPropsHandlers<FiberEffectLayerProps> {\r\n    private propsHandlers: PropsHandler<FiberEffectLayerProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberGlowLayerPropsHandler(),\r\n            new FiberEffectLayerPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberEffectLayerProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberEffectLayerProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"GlowLayer\",\r\n        \"namespace\": \"@babylonjs/core/Layers/effectLayer\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"options\",\r\n                \"type\": \"Partial<BabylonjsCoreIGlowLayerOptions>\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isEffectLayer\": true,\r\n        \"className\": \"FiberGlowLayer\"\r\n    };\r\n}\r\n\r\nexport class FiberHighlightLayerPropsHandler implements PropsHandler<FiberHighlightLayerProps> {\r\n    getPropertyUpdates(oldProps: FiberHighlightLayerProps, newProps: FiberHighlightLayerProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.blurHorizontalSize, newProps.blurHorizontalSize, 'blurHorizontalSize', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.blurVerticalSize, newProps.blurVerticalSize, 'blurVerticalSize', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.innerGlow, newProps.innerGlow, 'innerGlow', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.name, newProps.name, 'name', 'string', changedProps)\r\n        checkObservableDiff(oldProps.onAfterBlurObservable, newProps.onAfterBlurObservable, 'onAfterBlurObservable', 'BabylonjsCoreObservable<BabylonjsCoreHighlightLayer>', changedProps)\r\n        checkObservableDiff(oldProps.onBeforeBlurObservable, newProps.onBeforeBlurObservable, 'onBeforeBlurObservable', 'BabylonjsCoreObservable<BabylonjsCoreHighlightLayer>', changedProps)\r\n        checkPrimitiveDiff(oldProps.outerGlow, newProps.outerGlow, 'outerGlow', 'boolean', changedProps)\r\n        checkMethodDiff(oldProps.addExcludedMesh, newProps.addExcludedMesh, 'addExcludedMesh', '(mesh?: BabylonjsCoreMesh) => void', changedProps)\r\n        checkMethodDiff(oldProps.addMesh, newProps.addMesh, 'addMesh', '(mesh?: BabylonjsCoreMesh, color?: BabylonjsCoreColor3, glowEmissiveOnly?: boolean) => void', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * The highlight layer Helps adding a glow effect around a mesh.\r\n *\r\n * Once instantiated in a scene, simply use the addMesh or removeMesh method to add or remove\r\n * glowy meshes to your scene.\r\n *\r\n * !!! THIS REQUIRES AN ACTIVE STENCIL BUFFER ON THE CANVAS !!!\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberHighlightLayer implements HasPropsHandlers<FiberEffectLayerProps> {\r\n    private propsHandlers: PropsHandler<FiberEffectLayerProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberHighlightLayerPropsHandler(),\r\n            new FiberEffectLayerPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberEffectLayerProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberEffectLayerProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"HighlightLayer\",\r\n        \"namespace\": \"@babylonjs/core/Layers/effectLayer\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"options\",\r\n                \"type\": \"Partial<BabylonjsCoreIHighlightLayerOptions>\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isEffectLayer\": true,\r\n        \"className\": \"FiberHighlightLayer\"\r\n    };\r\n}\r\n\r\nexport class FiberBaseTexturePropsHandler implements PropsHandler<FiberBaseTextureProps> {\r\n    getPropertyUpdates(oldProps: FiberBaseTextureProps, newProps: FiberBaseTextureProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        // type: 'BabylonjsCoreAnimation[]' property (not coded) BabylonjsCoreBaseTexture.animations.\r\n        checkPrimitiveDiff(oldProps.anisotropicFilteringLevel, newProps.anisotropicFilteringLevel, 'anisotropicFilteringLevel', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.coordinatesIndex, newProps.coordinatesIndex, 'coordinatesIndex', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.coordinatesMode, newProps.coordinatesMode, 'coordinatesMode', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.delayLoadState, newProps.delayLoadState, 'delayLoadState', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.gammaSpace, newProps.gammaSpace, 'gammaSpace', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.getAlphaFromRGB, newProps.getAlphaFromRGB, 'getAlphaFromRGB', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.hasAlpha, newProps.hasAlpha, 'hasAlpha', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.invertZ, newProps.invertZ, 'invertZ', 'boolean', changedProps)\r\n        checkTextureDiff(oldProps.irradianceTexture, newProps.irradianceTexture, 'irradianceTexture', 'BabylonjsCoreBaseTexture', changedProps)\r\n        checkPrimitiveDiff(oldProps.is2DArray, newProps.is2DArray, 'is2DArray', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.is3D, newProps.is3D, 'is3D', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.isCube, newProps.isCube, 'isCube', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.isRenderTarget, newProps.isRenderTarget, 'isRenderTarget', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.isRGBD, newProps.isRGBD, 'isRGBD', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.level, newProps.level, 'level', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.linearSpecularLOD, newProps.linearSpecularLOD, 'linearSpecularLOD', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.lodGenerationOffset, newProps.lodGenerationOffset, 'lodGenerationOffset', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.lodGenerationScale, newProps.lodGenerationScale, 'lodGenerationScale', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.lodLevelInAlpha, newProps.lodLevelInAlpha, 'lodLevelInAlpha', 'boolean', changedProps)\r\n        // type: 'any' property (not coded) BabylonjsCoreBaseTexture.metadata.\r\n        checkPrimitiveDiff(oldProps.name, newProps.name, 'name', 'string', changedProps)\r\n        checkLambdaDiff(oldProps.onDispose, newProps.onDispose, 'onDispose', '() => void', changedProps)\r\n        checkObservableDiff(oldProps.onDisposeObservable, newProps.onDisposeObservable, 'onDisposeObservable', 'BabylonjsCoreObservable<BabylonjsCoreBaseTexture>', changedProps)\r\n        // type: 'any' property (not coded) BabylonjsCoreBaseTexture.reservedDataStore.\r\n        checkPrimitiveDiff(oldProps.uniqueId, newProps.uniqueId, 'uniqueId', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.wrapR, newProps.wrapR, 'wrapR', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.wrapU, newProps.wrapU, 'wrapU', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.wrapV, newProps.wrapV, 'wrapV', 'number', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * Base class of all the textures in babylon.\r\n * It groups all the common properties the materials, post process, lights... might need\r\n * in order to make a correct use of the texture.\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberBaseTexture implements HasPropsHandlers<FiberBaseTextureProps> {\r\n    private propsHandlers: PropsHandler<FiberBaseTextureProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberBaseTexturePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberBaseTextureProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberBaseTextureProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"BaseTexture\",\r\n        \"namespace\": \"@babylonjs/core/Materials/Textures/baseTexture\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isTexture\": true,\r\n        \"className\": \"FiberBaseTexture\"\r\n    };\r\n}\r\n\r\nexport class FiberCubeTexturePropsHandler implements PropsHandler<FiberCubeTextureProps> {\r\n    getPropertyUpdates(oldProps: FiberCubeTextureProps, newProps: FiberCubeTextureProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkVector3Diff(oldProps.boundingBoxPosition, newProps.boundingBoxPosition, 'boundingBoxPosition', 'BabylonjsCoreVector3', changedProps)\r\n        checkVector3Diff(oldProps.boundingBoxSize, newProps.boundingBoxSize, 'boundingBoxSize', 'BabylonjsCoreVector3', changedProps)\r\n        checkObservableDiff(oldProps.onLoadObservable, newProps.onLoadObservable, 'onLoadObservable', 'BabylonjsCoreObservable<BabylonjsCoreCubeTexture>', changedProps)\r\n        checkPrimitiveDiff(oldProps.rotationY, newProps.rotationY, 'rotationY', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.url, newProps.url, 'url', 'string', changedProps)\r\n        checkMethodDiff(oldProps.setReflectionTextureMatrix, newProps.setReflectionTextureMatrix, 'setReflectionTextureMatrix', '(value?: BabylonjsCoreMatrix) => void', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * Class for creating a cube texture\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberCubeTexture implements HasPropsHandlers<FiberBaseTextureProps> {\r\n    private propsHandlers: PropsHandler<FiberBaseTextureProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberCubeTexturePropsHandler(),\r\n            new FiberBaseTexturePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberBaseTextureProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberBaseTextureProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"CubeTexture\",\r\n        \"namespace\": \"@babylonjs/core/Materials/Textures/baseTexture\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"rootUrl\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"extensions\",\r\n                \"type\": \"string[]\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"noMipmap\",\r\n                \"type\": \"boolean\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"files\",\r\n                \"type\": \"string[]\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"onLoad\",\r\n                \"type\": \"() => void\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"onError\",\r\n                \"type\": \"(message?: string, exception?: any) => void\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"format\",\r\n                \"type\": \"number\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"prefiltered\",\r\n                \"type\": \"boolean\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"forcedExtension\",\r\n                \"type\": \"any\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"createPolynomials\",\r\n                \"type\": \"boolean\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"lodScale\",\r\n                \"type\": \"number\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"lodOffset\",\r\n                \"type\": \"number\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isTexture\": true,\r\n        \"className\": \"FiberCubeTexture\"\r\n    };\r\n}\r\n\r\nexport class FiberRawCubeTexturePropsHandler implements PropsHandler<FiberRawCubeTextureProps> {\r\n    getPropertyUpdates(oldProps: FiberRawCubeTextureProps, newProps: FiberRawCubeTextureProps): PropertyUpdate[] | null {\r\n        return null; // no props to check\r\n    }\r\n}\r\n\r\n/**\r\n * Raw cube texture where the raw buffers are passed in\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberRawCubeTexture implements HasPropsHandlers<FiberBaseTextureProps> {\r\n    private propsHandlers: PropsHandler<FiberBaseTextureProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberRawCubeTexturePropsHandler(),\r\n            new FiberCubeTexturePropsHandler(),\r\n            new FiberBaseTexturePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberBaseTextureProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberBaseTextureProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"RawCubeTexture\",\r\n        \"namespace\": \"@babylonjs/core/Materials/Textures/baseTexture\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"data\",\r\n                \"type\": \"ArrayBufferView[]\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"size\",\r\n                \"type\": \"number\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"format\",\r\n                \"type\": \"number\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"type\",\r\n                \"type\": \"number\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"generateMipMaps\",\r\n                \"type\": \"boolean\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"invertY\",\r\n                \"type\": \"boolean\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"samplingMode\",\r\n                \"type\": \"number\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"compression\",\r\n                \"type\": \"string\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isTexture\": true,\r\n        \"className\": \"FiberRawCubeTexture\"\r\n    };\r\n}\r\n\r\nexport class FiberTexturePropsHandler implements PropsHandler<FiberTextureProps> {\r\n    getPropertyUpdates(oldProps: FiberTextureProps, newProps: FiberTextureProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        // type: 'BabylonjsCoreIInspectable[]' property (not coded) BabylonjsCoreTexture.inspectableCustomProperties.\r\n        checkPrimitiveDiff(oldProps.isBlocking, newProps.isBlocking, 'isBlocking', 'boolean', changedProps)\r\n        checkObservableDiff(oldProps.onLoadObservable, newProps.onLoadObservable, 'onLoadObservable', 'BabylonjsCoreObservable<BabylonjsCoreTexture>', changedProps)\r\n        checkPrimitiveDiff(oldProps.uAng, newProps.uAng, 'uAng', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.uOffset, newProps.uOffset, 'uOffset', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.url, newProps.url, 'url', 'string', changedProps)\r\n        checkPrimitiveDiff(oldProps.uRotationCenter, newProps.uRotationCenter, 'uRotationCenter', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.uScale, newProps.uScale, 'uScale', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.vAng, newProps.vAng, 'vAng', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.vOffset, newProps.vOffset, 'vOffset', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.vRotationCenter, newProps.vRotationCenter, 'vRotationCenter', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.vScale, newProps.vScale, 'vScale', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.wAng, newProps.wAng, 'wAng', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.wRotationCenter, newProps.wRotationCenter, 'wRotationCenter', 'number', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * This represents a texture in babylon. It can be easily loaded from a network, base64 or html input.\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberTexture implements HasPropsHandlers<FiberBaseTextureProps> {\r\n    private propsHandlers: PropsHandler<FiberBaseTextureProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberTexturePropsHandler(),\r\n            new FiberBaseTexturePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberBaseTextureProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberBaseTextureProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"Texture\",\r\n        \"namespace\": \"@babylonjs/core/Materials/Textures/baseTexture\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"url\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"sceneOrEngine\",\r\n                \"type\": \"BabylonjsCoreScene | BabylonjsCoreThinEngine\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"noMipmap\",\r\n                \"type\": \"boolean\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"invertY\",\r\n                \"type\": \"boolean\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"samplingMode\",\r\n                \"type\": \"number\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"onLoad\",\r\n                \"type\": \"() => void\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"onError\",\r\n                \"type\": \"(message?: string, exception?: any) => void\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"buffer\",\r\n                \"type\": \"string | HTMLImageElement | ArrayBufferView | ArrayBuffer | Blob | ImageBitmap\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"deleteBuffer\",\r\n                \"type\": \"boolean\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"format\",\r\n                \"type\": \"number\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"mimeType\",\r\n                \"type\": \"string\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isTexture\": true,\r\n        \"className\": \"FiberTexture\"\r\n    };\r\n}\r\n\r\nexport class FiberRawTexturePropsHandler implements PropsHandler<FiberRawTextureProps> {\r\n    getPropertyUpdates(oldProps: FiberRawTextureProps, newProps: FiberRawTextureProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.format, newProps.format, 'format', 'number', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * Raw texture can help creating a texture directly from an array of data.\r\n * This can be super useful if you either get the data from an uncompressed source or\r\n * if you wish to create your texture pixel by pixel.\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberRawTexture implements HasPropsHandlers<FiberBaseTextureProps> {\r\n    private propsHandlers: PropsHandler<FiberBaseTextureProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberRawTexturePropsHandler(),\r\n            new FiberTexturePropsHandler(),\r\n            new FiberBaseTexturePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberBaseTextureProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberBaseTextureProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"RawTexture\",\r\n        \"namespace\": \"@babylonjs/core/Materials/Textures/baseTexture\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"data\",\r\n                \"type\": \"ArrayBufferView\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"width\",\r\n                \"type\": \"number\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"height\",\r\n                \"type\": \"number\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"format\",\r\n                \"type\": \"number\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"generateMipMaps\",\r\n                \"type\": \"boolean\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"invertY\",\r\n                \"type\": \"boolean\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"samplingMode\",\r\n                \"type\": \"number\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"type\",\r\n                \"type\": \"number\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isTexture\": true,\r\n        \"className\": \"FiberRawTexture\"\r\n    };\r\n}\r\n\r\nexport class FiberProceduralTexturePropsHandler implements PropsHandler<FiberProceduralTextureProps> {\r\n    getPropertyUpdates(oldProps: FiberProceduralTextureProps, newProps: FiberProceduralTextureProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.autoClear, newProps.autoClear, 'autoClear', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.isCube, newProps.isCube, 'isCube', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.isEnabled, newProps.isEnabled, 'isEnabled', 'boolean', changedProps)\r\n        checkLambdaDiff(oldProps.onGenerated, newProps.onGenerated, 'onGenerated', '() => void', changedProps)\r\n        checkObservableDiff(oldProps.onGeneratedObservable, newProps.onGeneratedObservable, 'onGeneratedObservable', 'BabylonjsCoreObservable<BabylonjsCoreProceduralTexture>', changedProps)\r\n        checkPrimitiveDiff(oldProps.refreshRate, newProps.refreshRate, 'refreshRate', 'number', changedProps)\r\n        checkMethodDiff(oldProps.setColor3, newProps.setColor3, 'setColor3', '(name?: string, value?: BabylonjsCoreColor3) => BabylonjsCoreProceduralTexture', changedProps)\r\n        checkMethodDiff(oldProps.setColor4, newProps.setColor4, 'setColor4', '(name?: string, value?: BabylonjsCoreColor4) => BabylonjsCoreProceduralTexture', changedProps)\r\n        checkMethodDiff(oldProps.setFloat, newProps.setFloat, 'setFloat', '(name?: string, value?: number) => BabylonjsCoreProceduralTexture', changedProps)\r\n        checkMethodDiff(oldProps.setFloats, newProps.setFloats, 'setFloats', '(name?: string, value?: number[]) => BabylonjsCoreProceduralTexture', changedProps)\r\n        checkMethodDiff(oldProps.setFragment, newProps.setFragment, 'setFragment', '(fragment?: any) => void', changedProps)\r\n        checkMethodDiff(oldProps.setInt, newProps.setInt, 'setInt', '(name?: string, value?: number) => BabylonjsCoreProceduralTexture', changedProps)\r\n        checkMethodDiff(oldProps.setMatrix, newProps.setMatrix, 'setMatrix', '(name?: string, value?: BabylonjsCoreMatrix) => BabylonjsCoreProceduralTexture', changedProps)\r\n        checkMethodDiff(oldProps.setTexture, newProps.setTexture, 'setTexture', '(name?: string, texture?: BabylonjsCoreTexture) => BabylonjsCoreProceduralTexture', changedProps)\r\n        checkMethodDiff(oldProps.setVector2, newProps.setVector2, 'setVector2', '(name?: string, value?: BabylonjsCoreVector2) => BabylonjsCoreProceduralTexture', changedProps)\r\n        checkMethodDiff(oldProps.setVector3, newProps.setVector3, 'setVector3', '(name?: string, value?: BabylonjsCoreVector3) => BabylonjsCoreProceduralTexture', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * Procedural texturing is a way to programmatically create a texture. There are 2 types of procedural textures: code-only, and code that references some classic 2D images, sometimes calmpler' images.\r\n * This is the base class of any Procedural texture and contains most of the shareable code.\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberProceduralTexture implements HasPropsHandlers<FiberBaseTextureProps> {\r\n    private propsHandlers: PropsHandler<FiberBaseTextureProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberProceduralTexturePropsHandler(),\r\n            new FiberTexturePropsHandler(),\r\n            new FiberBaseTexturePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberBaseTextureProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberBaseTextureProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"ProceduralTexture\",\r\n        \"namespace\": \"@babylonjs/core/Materials/Textures/baseTexture\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"size\",\r\n                \"type\": \"any\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"fragment\",\r\n                \"type\": \"any\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"fallbackTexture\",\r\n                \"type\": \"BabylonjsCoreTexture\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"generateMipMaps\",\r\n                \"type\": \"boolean\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"isCube\",\r\n                \"type\": \"boolean\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isTexture\": true,\r\n        \"className\": \"FiberProceduralTexture\"\r\n    };\r\n}\r\n\r\nexport class FiberCustomProceduralTexturePropsHandler implements PropsHandler<FiberCustomProceduralTextureProps> {\r\n    getPropertyUpdates(oldProps: FiberCustomProceduralTextureProps, newProps: FiberCustomProceduralTextureProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.animate, newProps.animate, 'animate', 'boolean', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * Procedural texturing is a way to programmatically create a texture. There are 2 types of procedural textures: code-only, and code that references some classic 2D images, sometimes called 'refMaps' or 'sampler' images.\r\n * Custom Procedural textures are the easiest way to create your own procedural in your application.\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberCustomProceduralTexture implements HasPropsHandlers<FiberBaseTextureProps> {\r\n    private propsHandlers: PropsHandler<FiberBaseTextureProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberCustomProceduralTexturePropsHandler(),\r\n            new FiberProceduralTexturePropsHandler(),\r\n            new FiberTexturePropsHandler(),\r\n            new FiberBaseTexturePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberBaseTextureProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberBaseTextureProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"CustomProceduralTexture\",\r\n        \"namespace\": \"@babylonjs/core/Materials/Textures/baseTexture\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"texturePath\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"size\",\r\n                \"type\": \"number\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"fallbackTexture\",\r\n                \"type\": \"BabylonjsCoreTexture\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"generateMipMaps\",\r\n                \"type\": \"boolean\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isTexture\": true,\r\n        \"className\": \"FiberCustomProceduralTexture\"\r\n    };\r\n}\r\n\r\nexport class FiberNoiseProceduralTexturePropsHandler implements PropsHandler<FiberNoiseProceduralTextureProps> {\r\n    getPropertyUpdates(oldProps: FiberNoiseProceduralTextureProps, newProps: FiberNoiseProceduralTextureProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.animationSpeedFactor, newProps.animationSpeedFactor, 'animationSpeedFactor', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.brightness, newProps.brightness, 'brightness', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.octaves, newProps.octaves, 'octaves', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.persistence, newProps.persistence, 'persistence', 'number', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to generate noise procedural textures\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberNoiseProceduralTexture implements HasPropsHandlers<FiberBaseTextureProps> {\r\n    private propsHandlers: PropsHandler<FiberBaseTextureProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberNoiseProceduralTexturePropsHandler(),\r\n            new FiberProceduralTexturePropsHandler(),\r\n            new FiberTexturePropsHandler(),\r\n            new FiberBaseTexturePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberBaseTextureProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberBaseTextureProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"NoiseProceduralTexture\",\r\n        \"namespace\": \"@babylonjs/core/Materials/Textures/baseTexture\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"size\",\r\n                \"type\": \"number\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"fallbackTexture\",\r\n                \"type\": \"BabylonjsCoreTexture\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"generateMipMaps\",\r\n                \"type\": \"boolean\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isTexture\": true,\r\n        \"className\": \"FiberNoiseProceduralTexture\"\r\n    };\r\n}\r\n\r\nexport class FiberRenderTargetTexturePropsHandler implements PropsHandler<FiberRenderTargetTextureProps> {\r\n    getPropertyUpdates(oldProps: FiberRenderTargetTextureProps, newProps: FiberRenderTargetTextureProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        // type: 'BabylonjsCoreCamera' property (not coded) BabylonjsCoreRenderTargetTexture.activeCamera.\r\n        checkVector3Diff(oldProps.boundingBoxPosition, newProps.boundingBoxPosition, 'boundingBoxPosition', 'BabylonjsCoreVector3', changedProps)\r\n        checkVector3Diff(oldProps.boundingBoxSize, newProps.boundingBoxSize, 'boundingBoxSize', 'BabylonjsCoreVector3', changedProps)\r\n        checkColor4Diff(oldProps.clearColor, newProps.clearColor, 'clearColor', 'BabylonjsCoreColor4', changedProps)\r\n        checkPrimitiveDiff(oldProps.coordinatesMode, newProps.coordinatesMode, 'coordinatesMode', 'number', changedProps)\r\n        checkLambdaDiff(oldProps.customRenderFunction, newProps.customRenderFunction, 'customRenderFunction', '(opaqueSubMeshes: BabylonjsCoreSmartArray<BabylonjsCoreSubMesh>, alphaTestSubMeshes: BabylonjsCoreSmartArray<BabylonjsCoreSubMesh>, transparentSubMeshes: BabylonjsCoreSmartArray<BabylonjsCoreSubMesh>, depthOnlySubMeshes: BabylonjsCoreSmartArray<BabylonjsCoreSubMesh>, beforeTransparents?: () => void) => void', changedProps)\r\n        checkLambdaDiff(oldProps.getCustomRenderList, newProps.getCustomRenderList, 'getCustomRenderList', '(layerOrFace: number, renderList: readonly BabylonjsCoreAbstractMesh[], renderListLength: number) => BabylonjsCoreAbstractMesh[]', changedProps)\r\n        checkPrimitiveDiff(oldProps.ignoreCameraViewport, newProps.ignoreCameraViewport, 'ignoreCameraViewport', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.isCube, newProps.isCube, 'isCube', 'boolean', changedProps)\r\n        checkLambdaDiff(oldProps.onAfterRender, newProps.onAfterRender, 'onAfterRender', '(faceIndex: number) => void', changedProps)\r\n        checkObservableDiff(oldProps.onAfterRenderObservable, newProps.onAfterRenderObservable, 'onAfterRenderObservable', 'BabylonjsCoreObservable<number>', changedProps)\r\n        checkLambdaDiff(oldProps.onAfterUnbind, newProps.onAfterUnbind, 'onAfterUnbind', '() => void', changedProps)\r\n        checkObservableDiff(oldProps.onAfterUnbindObservable, newProps.onAfterUnbindObservable, 'onAfterUnbindObservable', 'BabylonjsCoreObservable<BabylonjsCoreRenderTargetTexture>', changedProps)\r\n        checkObservableDiff(oldProps.onBeforeBindObservable, newProps.onBeforeBindObservable, 'onBeforeBindObservable', 'BabylonjsCoreObservable<BabylonjsCoreRenderTargetTexture>', changedProps)\r\n        checkLambdaDiff(oldProps.onBeforeRender, newProps.onBeforeRender, 'onBeforeRender', '(faceIndex: number) => void', changedProps)\r\n        checkObservableDiff(oldProps.onBeforeRenderObservable, newProps.onBeforeRenderObservable, 'onBeforeRenderObservable', 'BabylonjsCoreObservable<number>', changedProps)\r\n        checkLambdaDiff(oldProps.onClear, newProps.onClear, 'onClear', '(Engine: BabylonjsCoreEngine) => void', changedProps)\r\n        checkObservableDiff(oldProps.onClearObservable, newProps.onClearObservable, 'onClearObservable', 'BabylonjsCoreObservable<BabylonjsCoreEngine>', changedProps)\r\n        checkObservableDiff(oldProps.onResizeObservable, newProps.onResizeObservable, 'onResizeObservable', 'BabylonjsCoreObservable<BabylonjsCoreRenderTargetTexture>', changedProps)\r\n        checkPrimitiveDiff(oldProps.refreshRate, newProps.refreshRate, 'refreshRate', 'number', changedProps)\r\n        // type: 'BabylonjsCoreAbstractMesh[]' property (not coded) BabylonjsCoreRenderTargetTexture.renderList.\r\n        checkLambdaDiff(oldProps.renderListPredicate, newProps.renderListPredicate, 'renderListPredicate', '(AbstractMesh: BabylonjsCoreAbstractMesh) => boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.renderParticles, newProps.renderParticles, 'renderParticles', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.renderSprites, newProps.renderSprites, 'renderSprites', 'boolean', changedProps)\r\n        // type: 'any' property (not coded) BabylonjsCoreRenderTargetTexture.renderToTarget.\r\n        checkPrimitiveDiff(oldProps.samples, newProps.samples, 'samples', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.useCameraPostProcesses, newProps.useCameraPostProcesses, 'useCameraPostProcesses', 'boolean', changedProps)\r\n        checkMethodDiff(oldProps.addPostProcess, newProps.addPostProcess, 'addPostProcess', '(postProcess?: BabylonjsCorePostProcess) => void', changedProps)\r\n        checkMethodDiff(oldProps.setRenderingAutoClearDepthStencil, newProps.setRenderingAutoClearDepthStencil, 'setRenderingAutoClearDepthStencil', '(renderingGroupId?: number, autoClearDepthStencil?: boolean) => void', changedProps)\r\n        checkMethodDiff(oldProps.setRenderingOrder, newProps.setRenderingOrder, 'setRenderingOrder', '(renderingGroupId?: number, opaqueSortCompareFn?: (a: BabylonjsCoreSubMesh, b: BabylonjsCoreSubMesh) => number, alphaTestSortCompareFn?: (a: BabylonjsCoreSubMesh, b: BabylonjsCoreSubMesh) => number, transparentSortCompareFn?: (a: BabylonjsCoreSubMesh, b: BabylonjsCoreSubMesh) => number) => void', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * This Helps creating a texture that will be created from a camera in your scene.\r\n * It is basically a dynamic texture that could be used to create special effects for instance.\r\n * Actually, It is the base of lot of effects in the framework like post process, shadows, effect layers and rendering pipelines...\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberRenderTargetTexture implements HasPropsHandlers<FiberBaseTextureProps> {\r\n    private propsHandlers: PropsHandler<FiberBaseTextureProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberRenderTargetTexturePropsHandler(),\r\n            new FiberTexturePropsHandler(),\r\n            new FiberBaseTexturePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberBaseTextureProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberBaseTextureProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"RenderTargetTexture\",\r\n        \"namespace\": \"@babylonjs/core/Materials/Textures/baseTexture\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"size\",\r\n                \"type\": \"number | { width: number; height: number; layers?: number; } | { ratio: number; }\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"generateMipMaps\",\r\n                \"type\": \"boolean\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"doNotChangeAspectRatio\",\r\n                \"type\": \"boolean\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"type\",\r\n                \"type\": \"number\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"isCube\",\r\n                \"type\": \"boolean\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"samplingMode\",\r\n                \"type\": \"number\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"generateDepthBuffer\",\r\n                \"type\": \"boolean\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"generateStencilBuffer\",\r\n                \"type\": \"boolean\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"isMulti\",\r\n                \"type\": \"boolean\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"format\",\r\n                \"type\": \"number\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"delayAllocation\",\r\n                \"type\": \"boolean\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isTexture\": true,\r\n        \"className\": \"FiberRenderTargetTexture\"\r\n    };\r\n}\r\n\r\nexport class FiberMirrorTexturePropsHandler implements PropsHandler<FiberMirrorTextureProps> {\r\n    getPropertyUpdates(oldProps: FiberMirrorTextureProps, newProps: FiberMirrorTextureProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.adaptiveBlurKernel, newProps.adaptiveBlurKernel, 'adaptiveBlurKernel', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.blurKernel, newProps.blurKernel, 'blurKernel', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.blurKernelX, newProps.blurKernelX, 'blurKernelX', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.blurKernelY, newProps.blurKernelY, 'blurKernelY', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.blurRatio, newProps.blurRatio, 'blurRatio', 'number', changedProps)\r\n        // type: 'BabylonjsCorePlane' property (not coded) BabylonjsCoreMirrorTexture.mirrorPlane.\r\n        // type: 'any' property (not coded) BabylonjsCoreMirrorTexture.scene.\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * Mirror texture can be used to simulate the view from a mirror in a scene.\r\n * It will dynamically be rendered every frame to adapt to the camera point of view.\r\n * You can then easily use it as a reflectionTexture on a flat surface.\r\n * In case the surface is not a plane, please consider relying on reflection probes.\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberMirrorTexture implements HasPropsHandlers<FiberBaseTextureProps> {\r\n    private propsHandlers: PropsHandler<FiberBaseTextureProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberMirrorTexturePropsHandler(),\r\n            new FiberRenderTargetTexturePropsHandler(),\r\n            new FiberTexturePropsHandler(),\r\n            new FiberBaseTexturePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberBaseTextureProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberBaseTextureProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"MirrorTexture\",\r\n        \"namespace\": \"@babylonjs/core/Materials/Textures/baseTexture\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"size\",\r\n                \"type\": \"number | { width: number; height: number; } | { ratio: number; }\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"generateMipMaps\",\r\n                \"type\": \"boolean\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"type\",\r\n                \"type\": \"number\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"samplingMode\",\r\n                \"type\": \"number\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"generateDepthBuffer\",\r\n                \"type\": \"boolean\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isTexture\": true,\r\n        \"className\": \"FiberMirrorTexture\"\r\n    };\r\n}\r\n\r\nexport class FiberMultiRenderTargetPropsHandler implements PropsHandler<FiberMultiRenderTargetProps> {\r\n    getPropertyUpdates(oldProps: FiberMultiRenderTargetProps, newProps: FiberMultiRenderTargetProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.samples, newProps.samples, 'samples', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.wrapU, newProps.wrapU, 'wrapU', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.wrapV, newProps.wrapV, 'wrapV', 'number', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * A multi render target, like a render target provides the ability to render to a texture.\r\n * Unlike the render target, it can render to several draw buffers in one draw.\r\n * This is specially interesting in deferred rendering or for any effects requiring more than\r\n * just one color from a single pass.\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberMultiRenderTarget implements HasPropsHandlers<FiberBaseTextureProps> {\r\n    private propsHandlers: PropsHandler<FiberBaseTextureProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberMultiRenderTargetPropsHandler(),\r\n            new FiberRenderTargetTexturePropsHandler(),\r\n            new FiberTexturePropsHandler(),\r\n            new FiberBaseTexturePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberBaseTextureProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberBaseTextureProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"MultiRenderTarget\",\r\n        \"namespace\": \"@babylonjs/core/Materials/Textures/baseTexture\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"size\",\r\n                \"type\": \"any\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"count\",\r\n                \"type\": \"number\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"options\",\r\n                \"type\": \"BabylonjsCoreIMultiRenderTargetOptions\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isTexture\": true,\r\n        \"className\": \"FiberMultiRenderTarget\"\r\n    };\r\n}\r\n\r\nexport class FiberRefractionTexturePropsHandler implements PropsHandler<FiberRefractionTextureProps> {\r\n    getPropertyUpdates(oldProps: FiberRefractionTextureProps, newProps: FiberRefractionTextureProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.depth, newProps.depth, 'depth', 'number', changedProps)\r\n        // type: 'BabylonjsCorePlane' property (not coded) BabylonjsCoreRefractionTexture.refractionPlane.\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * Creates a refraction texture used by refraction channel of the standard material.\r\n * It is like a mirror but to see through a material.\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberRefractionTexture implements HasPropsHandlers<FiberBaseTextureProps> {\r\n    private propsHandlers: PropsHandler<FiberBaseTextureProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberRefractionTexturePropsHandler(),\r\n            new FiberRenderTargetTexturePropsHandler(),\r\n            new FiberTexturePropsHandler(),\r\n            new FiberBaseTexturePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberBaseTextureProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberBaseTextureProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"RefractionTexture\",\r\n        \"namespace\": \"@babylonjs/core/Materials/Textures/baseTexture\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"size\",\r\n                \"type\": \"number\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"generateMipMaps\",\r\n                \"type\": \"boolean\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isTexture\": true,\r\n        \"className\": \"FiberRefractionTexture\"\r\n    };\r\n}\r\n\r\nexport class FiberMultiviewRenderTargetPropsHandler implements PropsHandler<FiberMultiviewRenderTargetProps> {\r\n    getPropertyUpdates(oldProps: FiberMultiviewRenderTargetProps, newProps: FiberMultiviewRenderTargetProps): PropertyUpdate[] | null {\r\n        return null; // no props to check\r\n    }\r\n}\r\n\r\n/**\r\n * Renders to multiple views with a single draw call\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberMultiviewRenderTarget implements HasPropsHandlers<FiberBaseTextureProps> {\r\n    private propsHandlers: PropsHandler<FiberBaseTextureProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberMultiviewRenderTargetPropsHandler(),\r\n            new FiberRenderTargetTexturePropsHandler(),\r\n            new FiberTexturePropsHandler(),\r\n            new FiberBaseTexturePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberBaseTextureProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberBaseTextureProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"MultiviewRenderTarget\",\r\n        \"namespace\": \"@babylonjs/core/Materials/Textures/baseTexture\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"size\",\r\n                \"type\": \"number | { width: number; height: number; } | { ratio: number; }\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isTexture\": true,\r\n        \"className\": \"FiberMultiviewRenderTarget\"\r\n    };\r\n}\r\n\r\nexport class FiberVideoTexturePropsHandler implements PropsHandler<FiberVideoTextureProps> {\r\n    getPropertyUpdates(oldProps: FiberVideoTextureProps, newProps: FiberVideoTextureProps): PropertyUpdate[] | null {\r\n        // skipping type: 'any' property (not coded) BabylonjsCoreVideoTexture.reset.\r\n        return null; // no props to check\r\n    }\r\n}\r\n\r\n/**\r\n * If you want to display a video in your scene, this is the special texture for that.\r\n * This special texture works similar to other textures, with the exception of a few parameters.\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberVideoTexture implements HasPropsHandlers<FiberBaseTextureProps> {\r\n    private propsHandlers: PropsHandler<FiberBaseTextureProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberVideoTexturePropsHandler(),\r\n            new FiberTexturePropsHandler(),\r\n            new FiberBaseTexturePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberBaseTextureProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberBaseTextureProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"VideoTexture\",\r\n        \"namespace\": \"@babylonjs/core/Materials/Textures/baseTexture\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"src\",\r\n                \"type\": \"string | string[] | HTMLVideoElement\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"generateMipMaps\",\r\n                \"type\": \"boolean\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"invertY\",\r\n                \"type\": \"boolean\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"samplingMode\",\r\n                \"type\": \"number\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"settings\",\r\n                \"type\": \"BabylonjsCoreVideoTextureSettings\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isTexture\": true,\r\n        \"className\": \"FiberVideoTexture\"\r\n    };\r\n}\r\n\r\nexport class FiberDynamicTexturePropsHandler implements PropsHandler<FiberDynamicTextureProps> {\r\n    getPropertyUpdates(oldProps: FiberDynamicTextureProps, newProps: FiberDynamicTextureProps): PropertyUpdate[] | null {\r\n        return null; // no props to check\r\n    }\r\n}\r\n\r\n/**\r\n * A class extending Texture allowing drawing on a texture\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberDynamicTexture implements HasPropsHandlers<FiberBaseTextureProps> {\r\n    private propsHandlers: PropsHandler<FiberBaseTextureProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberDynamicTexturePropsHandler(),\r\n            new FiberTexturePropsHandler(),\r\n            new FiberBaseTexturePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberBaseTextureProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberBaseTextureProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"DynamicTexture\",\r\n        \"namespace\": \"@babylonjs/core/Materials/Textures/baseTexture\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"options\",\r\n                \"type\": \"any\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"generateMipMaps\",\r\n                \"type\": \"boolean\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"samplingMode\",\r\n                \"type\": \"number\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"format\",\r\n                \"type\": \"number\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isTexture\": true,\r\n        \"className\": \"FiberDynamicTexture\"\r\n    };\r\n}\r\n\r\nexport class FiberAdvancedDynamicTexturePropsHandler implements PropsHandler<FiberAdvancedDynamicTextureProps> {\r\n    getPropertyUpdates(oldProps: FiberAdvancedDynamicTextureProps, newProps: FiberAdvancedDynamicTextureProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.background, newProps.background, 'background', 'string', changedProps)\r\n        checkPrimitiveDiff(oldProps.clipboardData, newProps.clipboardData, 'clipboardData', 'string', changedProps)\r\n        // type: 'BabylonjsGuiIFocusableControl' property (not coded) BabylonjsGuiAdvancedDynamicTexture.focusedControl.\r\n        checkPrimitiveDiff(oldProps.idealHeight, newProps.idealHeight, 'idealHeight', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.idealWidth, newProps.idealWidth, 'idealWidth', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.isForeground, newProps.isForeground, 'isForeground', 'boolean', changedProps)\r\n        checkObservableDiff(oldProps.onBeginLayoutObservable, newProps.onBeginLayoutObservable, 'onBeginLayoutObservable', 'BabylonjsCoreObservable<BabylonjsGuiAdvancedDynamicTexture>', changedProps)\r\n        checkObservableDiff(oldProps.onBeginRenderObservable, newProps.onBeginRenderObservable, 'onBeginRenderObservable', 'BabylonjsCoreObservable<BabylonjsGuiAdvancedDynamicTexture>', changedProps)\r\n        // type: 'any' property (not coded) BabylonjsGuiAdvancedDynamicTexture.onClipboardCopy.\r\n        // type: 'any' property (not coded) BabylonjsGuiAdvancedDynamicTexture.onClipboardCut.\r\n        checkObservableDiff(oldProps.onClipboardObservable, newProps.onClipboardObservable, 'onClipboardObservable', 'BabylonjsCoreObservable<BabylonjsCoreClipboardInfo>', changedProps)\r\n        // type: 'any' property (not coded) BabylonjsGuiAdvancedDynamicTexture.onClipboardPaste.\r\n        checkObservableDiff(oldProps.onControlPickedObservable, newProps.onControlPickedObservable, 'onControlPickedObservable', 'BabylonjsCoreObservable<BabylonjsGuiControl>', changedProps)\r\n        checkObservableDiff(oldProps.onEndLayoutObservable, newProps.onEndLayoutObservable, 'onEndLayoutObservable', 'BabylonjsCoreObservable<BabylonjsGuiAdvancedDynamicTexture>', changedProps)\r\n        checkObservableDiff(oldProps.onEndRenderObservable, newProps.onEndRenderObservable, 'onEndRenderObservable', 'BabylonjsCoreObservable<BabylonjsGuiAdvancedDynamicTexture>', changedProps)\r\n        checkPrimitiveDiff(oldProps.premulAlpha, newProps.premulAlpha, 'premulAlpha', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.renderAtIdealSize, newProps.renderAtIdealSize, 'renderAtIdealSize', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.renderScale, newProps.renderScale, 'renderScale', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.useInvalidateRectOptimization, newProps.useInvalidateRectOptimization, 'useInvalidateRectOptimization', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.useSmallestIdeal, newProps.useSmallestIdeal, 'useSmallestIdeal', 'boolean', changedProps)\r\n        checkMethodDiff(oldProps.addControl, newProps.addControl, 'addControl', '(control?: BabylonjsGuiControl) => BabylonjsGuiAdvancedDynamicTexture', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to create texture to support 2D GUI elements\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberAdvancedDynamicTexture implements HasPropsHandlers<FiberBaseTextureProps> {\r\n    private propsHandlers: PropsHandler<FiberBaseTextureProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberAdvancedDynamicTexturePropsHandler(),\r\n            new FiberDynamicTexturePropsHandler(),\r\n            new FiberTexturePropsHandler(),\r\n            new FiberBaseTexturePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberBaseTextureProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberBaseTextureProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"AdvancedDynamicTexture\",\r\n        \"namespace\": \"@babylonjs/core/Materials/Textures/baseTexture\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"width\",\r\n                \"type\": \"number\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"height\",\r\n                \"type\": \"number\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"generateMipMaps\",\r\n                \"type\": \"boolean\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"samplingMode\",\r\n                \"type\": \"number\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isTexture\": true,\r\n        \"className\": \"FiberAdvancedDynamicTexture\"\r\n    };\r\n}\r\n\r\n/**\r\n * Creates a new AdvancedDynamicTexture in projected mode (ie. attached to a mesh)\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberADTForMesh implements HasPropsHandlers<FiberAdvancedDynamicTextureProps> {\r\n    private propsHandlers: PropsHandler<FiberAdvancedDynamicTextureProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberAdvancedDynamicTexturePropsHandler()\r\n            , new FiberDynamicTexturePropsHandler()\r\n            , new FiberTexturePropsHandler()\r\n            , new FiberBaseTexturePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberAdvancedDynamicTextureProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberAdvancedDynamicTextureProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"FactoryMethod\",\r\n        \"libraryLocation\": \"advancedDynamicTexture\",\r\n        \"namespace\": \"@babylonjs/core\",\r\n        \"factoryMethod\": \"CreateForMesh\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"mesh\",\r\n                \"type\": \"BabylonjsCoreAbstractMesh\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"width\",\r\n                \"type\": \"number\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"height\",\r\n                \"type\": \"number\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"supportPointerMove\",\r\n                \"type\": \"boolean\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"onlyAlphaTesting\",\r\n                \"type\": \"boolean\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isTexture\": true,\r\n        \"className\": \"FiberADTForMesh\"\r\n    };\r\n}\r\n\r\n/**\r\n * Creates a new AdvancedDynamicTexture in fullscreen mode.\r\n * In this mode the texture will rely on a layer for its rendering.\r\n * This allows it to be treated like any other layer.\r\n * As such, if you have a multi camera setup, you can set the layerMask on the GUI as well.\r\n * LayerMask is set through advancedTexture.layer.layerMask\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberADTFullscreenUI implements HasPropsHandlers<FiberAdvancedDynamicTextureProps> {\r\n    private propsHandlers: PropsHandler<FiberAdvancedDynamicTextureProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberAdvancedDynamicTexturePropsHandler()\r\n            , new FiberDynamicTexturePropsHandler()\r\n            , new FiberTexturePropsHandler()\r\n            , new FiberBaseTexturePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberAdvancedDynamicTextureProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberAdvancedDynamicTextureProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"FactoryMethod\",\r\n        \"libraryLocation\": \"advancedDynamicTexture\",\r\n        \"namespace\": \"@babylonjs/core\",\r\n        \"factoryMethod\": \"CreateFullscreenUI\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"foreground\",\r\n                \"type\": \"boolean\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"sampling\",\r\n                \"type\": \"number\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isTexture\": true,\r\n        \"className\": \"FiberADTFullscreenUI\"\r\n    };\r\n}\r\n\r\nexport class FiberRawTexture3DPropsHandler implements PropsHandler<FiberRawTexture3DProps> {\r\n    getPropertyUpdates(oldProps: FiberRawTexture3DProps, newProps: FiberRawTexture3DProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.format, newProps.format, 'format', 'number', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to store 3D textures containing user data\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberRawTexture3D implements HasPropsHandlers<FiberBaseTextureProps> {\r\n    private propsHandlers: PropsHandler<FiberBaseTextureProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberRawTexture3DPropsHandler(),\r\n            new FiberTexturePropsHandler(),\r\n            new FiberBaseTexturePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberBaseTextureProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberBaseTextureProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"RawTexture3D\",\r\n        \"namespace\": \"@babylonjs/core/Materials/Textures/baseTexture\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"data\",\r\n                \"type\": \"ArrayBufferView\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"width\",\r\n                \"type\": \"number\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"height\",\r\n                \"type\": \"number\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"depth\",\r\n                \"type\": \"number\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"format\",\r\n                \"type\": \"number\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"generateMipMaps\",\r\n                \"type\": \"boolean\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"invertY\",\r\n                \"type\": \"boolean\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"samplingMode\",\r\n                \"type\": \"number\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"textureType\",\r\n                \"type\": \"number\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isTexture\": true,\r\n        \"className\": \"FiberRawTexture3D\"\r\n    };\r\n}\r\n\r\nexport class FiberRawTexture2DArrayPropsHandler implements PropsHandler<FiberRawTexture2DArrayProps> {\r\n    getPropertyUpdates(oldProps: FiberRawTexture2DArrayProps, newProps: FiberRawTexture2DArrayProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.format, newProps.format, 'format', 'number', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to store 2D array textures containing user data\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberRawTexture2DArray implements HasPropsHandlers<FiberBaseTextureProps> {\r\n    private propsHandlers: PropsHandler<FiberBaseTextureProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberRawTexture2DArrayPropsHandler(),\r\n            new FiberTexturePropsHandler(),\r\n            new FiberBaseTexturePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberBaseTextureProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberBaseTextureProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"RawTexture2DArray\",\r\n        \"namespace\": \"@babylonjs/core/Materials/Textures/baseTexture\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"data\",\r\n                \"type\": \"ArrayBufferView\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"width\",\r\n                \"type\": \"number\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"height\",\r\n                \"type\": \"number\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"depth\",\r\n                \"type\": \"number\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"format\",\r\n                \"type\": \"number\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"generateMipMaps\",\r\n                \"type\": \"boolean\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"invertY\",\r\n                \"type\": \"boolean\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"samplingMode\",\r\n                \"type\": \"number\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"textureType\",\r\n                \"type\": \"number\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isTexture\": true,\r\n        \"className\": \"FiberRawTexture2DArray\"\r\n    };\r\n}\r\n\r\nexport class FiberColorGradingTexturePropsHandler implements PropsHandler<FiberColorGradingTextureProps> {\r\n    getPropertyUpdates(oldProps: FiberColorGradingTextureProps, newProps: FiberColorGradingTextureProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        // type: 'any' property (not coded) BabylonjsCoreColorGradingTexture.load3dlTexture.\r\n        // type: 'any' property (not coded) BabylonjsCoreColorGradingTexture.loadTexture.\r\n        checkPrimitiveDiff(oldProps.url, newProps.url, 'url', 'string', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * This represents a color grading texture. This acts as a lookup table LUT, useful during post process\r\n * It can help converting any input color in a desired output one. This can then be used to create effects\r\n * from sepia, black and white to sixties or futuristic rendering...\r\n *\r\n * The only supported format is currently 3dl.\r\n * More information on LUT: https://en.wikipedia.org/wiki/3D_lookup_table\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberColorGradingTexture implements HasPropsHandlers<FiberBaseTextureProps> {\r\n    private propsHandlers: PropsHandler<FiberBaseTextureProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberColorGradingTexturePropsHandler(),\r\n            new FiberBaseTexturePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberBaseTextureProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberBaseTextureProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"ColorGradingTexture\",\r\n        \"namespace\": \"@babylonjs/core/Materials/Textures/baseTexture\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"url\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isTexture\": true,\r\n        \"className\": \"FiberColorGradingTexture\"\r\n    };\r\n}\r\n\r\nexport class FiberEquiRectangularCubeTexturePropsHandler implements PropsHandler<FiberEquiRectangularCubeTextureProps> {\r\n    getPropertyUpdates(oldProps: FiberEquiRectangularCubeTextureProps, newProps: FiberEquiRectangularCubeTextureProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.coordinatesMode, newProps.coordinatesMode, 'coordinatesMode', 'number', changedProps)\r\n        // type: 'any' property (not coded) BabylonjsCoreEquiRectangularCubeTexture.getFloat32ArrayFromArrayBuffer.\r\n        // type: 'any' property (not coded) BabylonjsCoreEquiRectangularCubeTexture.loadImage.\r\n        // type: 'any' property (not coded) BabylonjsCoreEquiRectangularCubeTexture.loadTexture.\r\n        checkPrimitiveDiff(oldProps.url, newProps.url, 'url', 'string', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * This represents a texture coming from an equirectangular image supported by the web browser canvas.\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberEquiRectangularCubeTexture implements HasPropsHandlers<FiberBaseTextureProps> {\r\n    private propsHandlers: PropsHandler<FiberBaseTextureProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberEquiRectangularCubeTexturePropsHandler(),\r\n            new FiberBaseTexturePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberBaseTextureProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberBaseTextureProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"EquiRectangularCubeTexture\",\r\n        \"namespace\": \"@babylonjs/core/Materials/Textures/baseTexture\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"url\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"size\",\r\n                \"type\": \"number\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"noMipmap\",\r\n                \"type\": \"boolean\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"gammaSpace\",\r\n                \"type\": \"boolean\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"onLoad\",\r\n                \"type\": \"() => void\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"onError\",\r\n                \"type\": \"(message?: string, exception?: any) => void\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isTexture\": true,\r\n        \"className\": \"FiberEquiRectangularCubeTexture\"\r\n    };\r\n}\r\n\r\nexport class FiberHDRCubeTexturePropsHandler implements PropsHandler<FiberHDRCubeTextureProps> {\r\n    getPropertyUpdates(oldProps: FiberHDRCubeTextureProps, newProps: FiberHDRCubeTextureProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkVector3Diff(oldProps.boundingBoxPosition, newProps.boundingBoxPosition, 'boundingBoxPosition', 'BabylonjsCoreVector3', changedProps)\r\n        checkVector3Diff(oldProps.boundingBoxSize, newProps.boundingBoxSize, 'boundingBoxSize', 'BabylonjsCoreVector3', changedProps)\r\n        checkPrimitiveDiff(oldProps.coordinatesMode, newProps.coordinatesMode, 'coordinatesMode', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.isBlocking, newProps.isBlocking, 'isBlocking', 'boolean', changedProps)\r\n        // type: 'any' property (not coded) BabylonjsCoreHDRCubeTexture.loadTexture.\r\n        checkPrimitiveDiff(oldProps.rotationY, newProps.rotationY, 'rotationY', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.url, newProps.url, 'url', 'string', changedProps)\r\n        checkMethodDiff(oldProps.setReflectionTextureMatrix, newProps.setReflectionTextureMatrix, 'setReflectionTextureMatrix', '(value?: BabylonjsCoreMatrix) => void', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * This represents a texture coming from an HDR input.\r\n *\r\n * The only supported format is currently panorama picture stored in RGBE format.\r\n * Example of such files can be found on HDRLib: http://hdrlib.com/\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberHDRCubeTexture implements HasPropsHandlers<FiberBaseTextureProps> {\r\n    private propsHandlers: PropsHandler<FiberBaseTextureProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberHDRCubeTexturePropsHandler(),\r\n            new FiberBaseTexturePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberBaseTextureProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberBaseTextureProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"HDRCubeTexture\",\r\n        \"namespace\": \"@babylonjs/core/Materials/Textures/baseTexture\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"url\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"size\",\r\n                \"type\": \"number\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"noMipmap\",\r\n                \"type\": \"boolean\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"generateHarmonics\",\r\n                \"type\": \"boolean\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"gammaSpace\",\r\n                \"type\": \"boolean\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"reserved\",\r\n                \"type\": \"boolean\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"onLoad\",\r\n                \"type\": \"() => void\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"onError\",\r\n                \"type\": \"(message?: string, exception?: any) => void\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isTexture\": true,\r\n        \"className\": \"FiberHDRCubeTexture\"\r\n    };\r\n}\r\n\r\nexport class FiberHtmlElementTexturePropsHandler implements PropsHandler<FiberHtmlElementTextureProps> {\r\n    getPropertyUpdates(oldProps: FiberHtmlElementTextureProps, newProps: FiberHtmlElementTextureProps): PropertyUpdate[] | null {\r\n        // skipping type: 'HTMLVideoElement | HTMLCanvasElement' property (not coded) BabylonjsCoreHtmlElementTexture.element.\r\n        return null; // no props to check\r\n    }\r\n}\r\n\r\n/**\r\n * This represents the smallest workload to use an already existing element (Canvas or Video) as a texture.\r\n * To be as efficient as possible depending on your constraints nothing aside the first upload\r\n * is automatically managed.\r\n * It is a cheap VideoTexture or DynamicTexture if you prefer to keep full control of the elements\r\n * in your application.\r\n *\r\n * As the update is not automatic, you need to call them manually.\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberHtmlElementTexture implements HasPropsHandlers<FiberBaseTextureProps> {\r\n    private propsHandlers: PropsHandler<FiberBaseTextureProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberHtmlElementTexturePropsHandler(),\r\n            new FiberBaseTexturePropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberBaseTextureProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberBaseTextureProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"HtmlElementTexture\",\r\n        \"namespace\": \"@babylonjs/core/Materials/Textures/baseTexture\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"element\",\r\n                \"type\": \"HTMLVideoElement | HTMLCanvasElement\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"options\",\r\n                \"type\": \"BabylonjsCoreIHtmlElementTextureOptions\",\r\n                \"optional\": false\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isTexture\": true,\r\n        \"className\": \"FiberHtmlElementTexture\"\r\n    };\r\n}\r\n\r\nexport class FiberGUI3DManagerPropsHandler implements PropsHandler<FiberGUI3DManagerProps> {\r\n    getPropertyUpdates(oldProps: FiberGUI3DManagerProps, newProps: FiberGUI3DManagerProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkObservableDiff(oldProps.onPickedPointChangedObservable, newProps.onPickedPointChangedObservable, 'onPickedPointChangedObservable', 'BabylonjsCoreObservable<BabylonjsCoreVector3>', changedProps)\r\n        checkMethodDiff(oldProps.addControl, newProps.addControl, 'addControl', '(control?: BabylonjsGuiControl3D) => BabylonjsGuiGUI3DManager', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to manage 3D user interface\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberGUI3DManager implements HasPropsHandlers<FiberGUI3DManagerProps> {\r\n    private propsHandlers: PropsHandler<FiberGUI3DManagerProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberGUI3DManagerPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberGUI3DManagerProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberGUI3DManagerProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"GUI3DManager\",\r\n        \"namespace\": \"@babylonjs/gui/3D/gui3DManager\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isGUI3DControl\": true,\r\n        \"className\": \"FiberGUI3DManager\"\r\n    };\r\n}\r\n\r\nexport class FiberShadowGeneratorPropsHandler implements PropsHandler<FiberShadowGeneratorProps> {\r\n    getPropertyUpdates(oldProps: FiberShadowGeneratorProps, newProps: FiberShadowGeneratorProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.bias, newProps.bias, 'bias', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.blurBoxOffset, newProps.blurBoxOffset, 'blurBoxOffset', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.blurKernel, newProps.blurKernel, 'blurKernel', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.blurScale, newProps.blurScale, 'blurScale', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.contactHardeningLightSizeUVRatio, newProps.contactHardeningLightSizeUVRatio, 'contactHardeningLightSizeUVRatio', 'number', changedProps)\r\n        // type: 'BabylonjsCoreICustomShaderOptions' property (not coded) BabylonjsCoreShadowGenerator.customShaderOptions.\r\n        checkPrimitiveDiff(oldProps.darkness, newProps.darkness, 'darkness', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.depthScale, newProps.depthScale, 'depthScale', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.filter, newProps.filter, 'filter', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.filteringQuality, newProps.filteringQuality, 'filteringQuality', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.forceBackFacesOnly, newProps.forceBackFacesOnly, 'forceBackFacesOnly', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.frustumEdgeFalloff, newProps.frustumEdgeFalloff, 'frustumEdgeFalloff', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.normalBias, newProps.normalBias, 'normalBias', 'number', changedProps)\r\n        checkObservableDiff(oldProps.onAfterShadowMapRenderMeshObservable, newProps.onAfterShadowMapRenderMeshObservable, 'onAfterShadowMapRenderMeshObservable', 'BabylonjsCoreObservable<BabylonjsCoreMesh>', changedProps)\r\n        checkObservableDiff(oldProps.onAfterShadowMapRenderObservable, newProps.onAfterShadowMapRenderObservable, 'onAfterShadowMapRenderObservable', 'BabylonjsCoreObservable<BabylonjsCoreEffect>', changedProps)\r\n        checkObservableDiff(oldProps.onBeforeShadowMapRenderMeshObservable, newProps.onBeforeShadowMapRenderMeshObservable, 'onBeforeShadowMapRenderMeshObservable', 'BabylonjsCoreObservable<BabylonjsCoreMesh>', changedProps)\r\n        checkObservableDiff(oldProps.onBeforeShadowMapRenderObservable, newProps.onBeforeShadowMapRenderObservable, 'onBeforeShadowMapRenderObservable', 'BabylonjsCoreObservable<BabylonjsCoreEffect>', changedProps)\r\n        checkPrimitiveDiff(oldProps.transparencyShadow, newProps.transparencyShadow, 'transparencyShadow', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.useBlurCloseExponentialShadowMap, newProps.useBlurCloseExponentialShadowMap, 'useBlurCloseExponentialShadowMap', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.useBlurExponentialShadowMap, newProps.useBlurExponentialShadowMap, 'useBlurExponentialShadowMap', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.useCloseExponentialShadowMap, newProps.useCloseExponentialShadowMap, 'useCloseExponentialShadowMap', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.useContactHardeningShadow, newProps.useContactHardeningShadow, 'useContactHardeningShadow', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.useExponentialShadowMap, newProps.useExponentialShadowMap, 'useExponentialShadowMap', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.useKernelBlur, newProps.useKernelBlur, 'useKernelBlur', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.usePercentageCloserFiltering, newProps.usePercentageCloserFiltering, 'usePercentageCloserFiltering', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.usePoissonSampling, newProps.usePoissonSampling, 'usePoissonSampling', 'boolean', changedProps)\r\n        checkMethodDiff(oldProps.addShadowCaster, newProps.addShadowCaster, 'addShadowCaster', '(mesh?: BabylonjsCoreAbstractMesh, includeDescendants?: boolean) => BabylonjsCoreShadowGenerator', changedProps)\r\n        checkMethodDiff(oldProps.setDarkness, newProps.setDarkness, 'setDarkness', '(darkness?: number) => BabylonjsCoreShadowGenerator', changedProps)\r\n        checkMethodDiff(oldProps.setTransparencyShadow, newProps.setTransparencyShadow, 'setTransparencyShadow', '(transparent?: boolean) => BabylonjsCoreShadowGenerator', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * Default implementation IShadowGenerator.\r\n * This is the main object responsible of generating shadows in the framework.\r\n * Documentation: https://doc.babylonjs.com/babylon101/shadows\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberShadowGenerator implements HasPropsHandlers<FiberShadowGeneratorProps> {\r\n    private propsHandlers: PropsHandler<FiberShadowGeneratorProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberShadowGeneratorPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberShadowGeneratorProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberShadowGeneratorProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"ShadowGenerator\",\r\n        \"namespace\": \"@babylonjs/core/Lights/Shadows/shadowGenerator\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"mapSize\",\r\n                \"type\": \"number\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"light\",\r\n                \"type\": \"BabylonjsCoreIShadowLight\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"usefulFloatFirst\",\r\n                \"type\": \"boolean\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"delayCreation\": true,\r\n        \"className\": \"FiberShadowGenerator\"\r\n    };\r\n}\r\n\r\nexport class FiberEnvironmentHelperPropsHandler implements PropsHandler<FiberEnvironmentHelperProps> {\r\n    getPropertyUpdates(oldProps: FiberEnvironmentHelperProps, newProps: FiberEnvironmentHelperProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkObservableDiff(oldProps.onErrorObservable, newProps.onErrorObservable, 'onErrorObservable', 'BabylonjsCoreObservable<{ message?: string; exception?: any; }>', changedProps)\r\n        checkMethodDiff(oldProps.setMainColor, newProps.setMainColor, 'setMainColor', '(color?: BabylonjsCoreColor3) => void', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * The Environment helper class can be used to add a fully featuread none expensive background to your scene.\r\n * It includes by default a skybox and a ground relying on the BackgroundMaterial.\r\n * It also helps with the default setup of your imageProcessing configuration.\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberEnvironmentHelper implements HasPropsHandlers<FiberEnvironmentHelperProps> {\r\n    private propsHandlers: PropsHandler<FiberEnvironmentHelperProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberEnvironmentHelperPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberEnvironmentHelperProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberEnvironmentHelperProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"EnvironmentHelper\",\r\n        \"namespace\": \"@babylonjs/core/Helpers/environmentHelper\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"options\",\r\n                \"type\": \"Partial<BabylonjsCoreIEnvironmentHelperOptions>\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isEnvironment\": true,\r\n        \"className\": \"FiberEnvironmentHelper\"\r\n    };\r\n}\r\n\r\nexport class FiberPhysicsImpostorPropsHandler implements PropsHandler<FiberPhysicsImpostorProps> {\r\n    getPropertyUpdates(oldProps: FiberPhysicsImpostorProps, newProps: FiberPhysicsImpostorProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkLambdaDiff(oldProps.afterStep, newProps.afterStep, 'afterStep', '() => void', changedProps)\r\n        checkLambdaDiff(oldProps.beforeStep, newProps.beforeStep, 'beforeStep', '() => void', changedProps)\r\n        checkPrimitiveDiff(oldProps.friction, newProps.friction, 'friction', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.mass, newProps.mass, 'mass', 'number', changedProps)\r\n        // type: 'BabylonjsCoreIPhysicsEnabledObject' property (not coded) BabylonjsCorePhysicsImpostor.object.\r\n        checkLambdaDiff(oldProps.onCollide, newProps.onCollide, 'onCollide', '(e: { body: any; }) => void', changedProps)\r\n        checkLambdaDiff(oldProps.onCollideEvent, newProps.onCollideEvent, 'onCollideEvent', '(collider: BabylonjsCorePhysicsImpostor, collidedWith: BabylonjsCorePhysicsImpostor) => void', changedProps)\r\n        // type: 'BabylonjsCorePhysicsImpostor' property (not coded) BabylonjsCorePhysicsImpostor.parent.\r\n        // type: 'any' property (not coded) BabylonjsCorePhysicsImpostor.physicsBody.\r\n        checkPrimitiveDiff(oldProps.positionIterations, newProps.positionIterations, 'positionIterations', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.pressure, newProps.pressure, 'pressure', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.restitution, newProps.restitution, 'restitution', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.segments, newProps.segments, 'segments', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.soft, newProps.soft, 'soft', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.stiffness, newProps.stiffness, 'stiffness', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.type, newProps.type, 'type', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.uniqueId, newProps.uniqueId, 'uniqueId', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.velocityIterations, newProps.velocityIterations, 'velocityIterations', 'number', changedProps)\r\n        checkMethodDiff(oldProps.addAnchor, newProps.addAnchor, 'addAnchor', '(otherImpostor?: BabylonjsCorePhysicsImpostor, width?: number, height?: number, influence?: number, noCollisionBetweenLinkedBodies?: boolean) => BabylonjsCorePhysicsImpostor', changedProps)\r\n        checkMethodDiff(oldProps.addHook, newProps.addHook, 'addHook', '(otherImpostor?: BabylonjsCorePhysicsImpostor, length?: number, influence?: number, noCollisionBetweenLinkedBodies?: boolean) => BabylonjsCorePhysicsImpostor', changedProps)\r\n        checkMethodDiff(oldProps.addJoint, newProps.addJoint, 'addJoint', '(otherImpostor?: BabylonjsCorePhysicsImpostor, joint?: BabylonjsCorePhysicsJoint) => BabylonjsCorePhysicsImpostor', changedProps)\r\n        checkMethodDiff(oldProps.setAngularVelocity, newProps.setAngularVelocity, 'setAngularVelocity', '(velocity?: BabylonjsCoreVector3) => void', changedProps)\r\n        checkMethodDiff(oldProps.setDeltaPosition, newProps.setDeltaPosition, 'setDeltaPosition', '(position?: BabylonjsCoreVector3) => void', changedProps)\r\n        checkMethodDiff(oldProps.setDeltaRotation, newProps.setDeltaRotation, 'setDeltaRotation', '(rotation?: BabylonjsCoreQuaternion) => void', changedProps)\r\n        checkMethodDiff(oldProps.setLinearVelocity, newProps.setLinearVelocity, 'setLinearVelocity', '(velocity?: BabylonjsCoreVector3) => void', changedProps)\r\n        checkMethodDiff(oldProps.setMass, newProps.setMass, 'setMass', '(mass?: number) => void', changedProps)\r\n        checkMethodDiff(oldProps.setParam, newProps.setParam, 'setParam', '(paramName?: string, value?: number) => void', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * Represents a physics imposter\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberPhysicsImpostor implements HasPropsHandlers<FiberPhysicsImpostorProps> {\r\n    private propsHandlers: PropsHandler<FiberPhysicsImpostorProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberPhysicsImpostorPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberPhysicsImpostorProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberPhysicsImpostorProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"PhysicsImpostor\",\r\n        \"namespace\": \"@babylonjs/core/Physics/physicsImpostor\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"object\",\r\n                \"type\": \"BabylonjsCoreIPhysicsEnabledObject\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"type\",\r\n                \"type\": \"number\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"_options\",\r\n                \"type\": \"BabylonjsCorePhysicsImpostorParameters\",\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"name\": \"_scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"delayCreation\": true,\r\n        \"className\": \"FiberPhysicsImpostor\"\r\n    };\r\n}\r\n\r\nexport class FiberVRExperienceHelperPropsHandler implements PropsHandler<FiberVRExperienceHelperProps> {\r\n    getPropertyUpdates(oldProps: FiberVRExperienceHelperProps, newProps: FiberVRExperienceHelperProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        // type: 'any' property (not coded) BabylonjsCoreVRExperienceHelper.beforeRender.\r\n        // type: 'any' property (not coded) BabylonjsCoreVRExperienceHelper.completeVRInit.\r\n        checkPrimitiveDiff(oldProps.displayGaze, newProps.displayGaze, 'displayGaze', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.displayLaserPointer, newProps.displayLaserPointer, 'displayLaserPointer', 'boolean', changedProps)\r\n        // type: 'any' property (not coded) BabylonjsCoreVRExperienceHelper.displayVRButton.\r\n        checkPrimitiveDiff(oldProps.enableGazeEvenWhenNoPointerLock, newProps.enableGazeEvenWhenNoPointerLock, 'enableGazeEvenWhenNoPointerLock', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.exitVROnDoubleTap, newProps.exitVROnDoubleTap, 'exitVROnDoubleTap', 'boolean', changedProps)\r\n        // type: 'BabylonjsCoreMesh' property (not coded) BabylonjsCoreVRExperienceHelper.gazeTrackerMesh.\r\n        checkLambdaDiff(oldProps.meshSelectionPredicate, newProps.meshSelectionPredicate, 'meshSelectionPredicate', '(mesh: BabylonjsCoreAbstractMesh) => boolean', changedProps)\r\n        // type: 'any' property (not coded) BabylonjsCoreVRExperienceHelper.moveButtonToBottomRight.\r\n        checkObservableDiff(oldProps.onAfterCameraTeleport, newProps.onAfterCameraTeleport, 'onAfterCameraTeleport', 'BabylonjsCoreObservable<BabylonjsCoreVector3>', changedProps)\r\n        checkObservableDiff(oldProps.onAfterEnteringVRObservable, newProps.onAfterEnteringVRObservable, 'onAfterEnteringVRObservable', 'BabylonjsCoreObservable<BabylonjsCoreOnAfterEnteringVRObservableEvent>', changedProps)\r\n        checkObservableDiff(oldProps.onBeforeCameraTeleport, newProps.onBeforeCameraTeleport, 'onBeforeCameraTeleport', 'BabylonjsCoreObservable<BabylonjsCoreVector3>', changedProps)\r\n        checkObservableDiff(oldProps.onControllerMeshLoadedObservable, newProps.onControllerMeshLoadedObservable, 'onControllerMeshLoadedObservable', 'BabylonjsCoreObservable<BabylonjsCoreWebVRController>', changedProps)\r\n        checkObservableDiff(oldProps.onEnteringVRObservable, newProps.onEnteringVRObservable, 'onEnteringVRObservable', 'BabylonjsCoreObservable<BabylonjsCoreVRExperienceHelper>', changedProps)\r\n        checkObservableDiff(oldProps.onExitingVRObservable, newProps.onExitingVRObservable, 'onExitingVRObservable', 'BabylonjsCoreObservable<BabylonjsCoreVRExperienceHelper>', changedProps)\r\n        checkObservableDiff(oldProps.onMeshSelectedWithController, newProps.onMeshSelectedWithController, 'onMeshSelectedWithController', 'BabylonjsCoreObservable<{ mesh: BabylonjsCoreAbstractMesh; controller: BabylonjsCoreWebVRController; }>', changedProps)\r\n        checkObservableDiff(oldProps.onNewMeshPicked, newProps.onNewMeshPicked, 'onNewMeshPicked', 'BabylonjsCoreObservable<BabylonjsCorePickingInfo>', changedProps)\r\n        checkObservableDiff(oldProps.onNewMeshSelected, newProps.onNewMeshSelected, 'onNewMeshSelected', 'BabylonjsCoreObservable<BabylonjsCoreAbstractMesh>', changedProps)\r\n        checkObservableDiff(oldProps.onSelectedMeshUnselected, newProps.onSelectedMeshUnselected, 'onSelectedMeshUnselected', 'BabylonjsCoreObservable<BabylonjsCoreAbstractMesh>', changedProps)\r\n        // type: 'any' property (not coded) BabylonjsCoreVRExperienceHelper.onVRDisplayChanged.\r\n        // type: 'any' property (not coded) BabylonjsCoreVRExperienceHelper.onVrDisplayPresentChange.\r\n        checkVector3Diff(oldProps.position, newProps.position, 'position', 'BabylonjsCoreVector3', changedProps)\r\n        checkLambdaDiff(oldProps.raySelectionPredicate, newProps.raySelectionPredicate, 'raySelectionPredicate', '(mesh: BabylonjsCoreAbstractMesh) => boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.requestPointerLockOnFullScreen, newProps.requestPointerLockOnFullScreen, 'requestPointerLockOnFullScreen', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.teleportationEnabled, newProps.teleportationEnabled, 'teleportationEnabled', 'boolean', changedProps)\r\n        // type: 'BabylonjsCoreMesh' property (not coded) BabylonjsCoreVRExperienceHelper.teleportationTarget.\r\n        // type: 'any' property (not coded) BabylonjsCoreVRExperienceHelper.updateButtonVisibility.\r\n        checkPrimitiveDiff(oldProps.updateControllerLaserColor, newProps.updateControllerLaserColor, 'updateControllerLaserColor', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.updateGazeTrackerColor, newProps.updateGazeTrackerColor, 'updateGazeTrackerColor', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.updateGazeTrackerScale, newProps.updateGazeTrackerScale, 'updateGazeTrackerScale', 'boolean', changedProps)\r\n        // type: 'BabylonjsCoreVRExperienceHelperOptions' property (not coded) BabylonjsCoreVRExperienceHelper.webVROptions.\r\n        // type: 'BabylonjsCoreWebXRDefaultExperience' property (not coded) BabylonjsCoreVRExperienceHelper.xr.\r\n        checkPrimitiveDiff(oldProps.xrTestDone, newProps.xrTestDone, 'xrTestDone', 'boolean', changedProps)\r\n        checkMethodDiff(oldProps.addFloorMesh, newProps.addFloorMesh, 'addFloorMesh', '(floorMesh?: BabylonjsCoreMesh) => void', changedProps)\r\n        checkMethodDiff(oldProps.setGazeColor, newProps.setGazeColor, 'setGazeColor', '(color?: BabylonjsCoreColor3, pickedColor?: BabylonjsCoreColor3) => void', changedProps)\r\n        checkMethodDiff(oldProps.setLaserColor, newProps.setLaserColor, 'setLaserColor', '(color?: BabylonjsCoreColor3, pickedColor?: BabylonjsCoreColor3) => void', changedProps)\r\n        checkMethodDiff(oldProps.setLaserLightingState, newProps.setLaserLightingState, 'setLaserLightingState', '(enabled?: boolean) => void', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * Helps to quickly add VR support to an existing scene.\r\n * See http://doc.babylonjs.com/how_to/webvr_helper\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberVRExperienceHelper implements HasPropsHandlers<FiberVRExperienceHelperProps> {\r\n    private propsHandlers: PropsHandler<FiberVRExperienceHelperProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberVRExperienceHelperPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberVRExperienceHelperProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberVRExperienceHelperProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"VRExperienceHelper\",\r\n        \"namespace\": \"@babylonjs/core/Cameras/VR/vrExperienceHelper\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"webVROptions\",\r\n                \"type\": \"BabylonjsCoreVRExperienceHelperOptions\",\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"className\": \"FiberVRExperienceHelper\"\r\n    };\r\n}\r\n\r\nexport class FiberDynamicTerrainPropsHandler implements PropsHandler<FiberDynamicTerrainProps> {\r\n    getPropertyUpdates(oldProps: FiberDynamicTerrainProps, newProps: FiberDynamicTerrainProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        // type: 'BabylonjsCoreCamera' property (not coded) ExtensionsDynamicTerrain.camera.\r\n        checkPrimitiveDiff(oldProps.cameraLODCorrection, newProps.cameraLODCorrection, 'cameraLODCorrection', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.computeNormals, newProps.computeNormals, 'computeNormals', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.initialLOD, newProps.initialLOD, 'initialLOD', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.isAlwaysVisible, newProps.isAlwaysVisible, 'isAlwaysVisible', 'boolean', changedProps)\r\n        checkNumericArrayDiff(oldProps.LODLimits, newProps.LODLimits, 'LODLimits', 'number[]', changedProps)\r\n        checkPrimitiveDiff(oldProps.LODNegativeX, newProps.LODNegativeX, 'LODNegativeX', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.LODNegativeZ, newProps.LODNegativeZ, 'LODNegativeZ', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.LODPositiveX, newProps.LODPositiveX, 'LODPositiveX', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.LODPositiveZ, newProps.LODPositiveZ, 'LODPositiveZ', 'boolean', changedProps)\r\n        // type: 'BabylonjsCoreFloatArray' property (not coded) ExtensionsDynamicTerrain.mapColors.\r\n        // type: 'BabylonjsCoreFloatArray' property (not coded) ExtensionsDynamicTerrain.mapData.\r\n        // type: 'BabylonjsCoreFloatArray' property (not coded) ExtensionsDynamicTerrain.mapNormals.\r\n        checkPrimitiveDiff(oldProps.mapSubX, newProps.mapSubX, 'mapSubX', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.mapSubZ, newProps.mapSubZ, 'mapSubZ', 'number', changedProps)\r\n        // type: 'BabylonjsCoreFloatArray' property (not coded) ExtensionsDynamicTerrain.mapUVs.\r\n        checkPrimitiveDiff(oldProps.name, newProps.name, 'name', 'string', changedProps)\r\n        checkPrimitiveDiff(oldProps.precomputeNormalsFromMap, newProps.precomputeNormalsFromMap, 'precomputeNormalsFromMap', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.refreshEveryFrame, newProps.refreshEveryFrame, 'refreshEveryFrame', 'boolean', changedProps)\r\n        // type: '{ x: number; z: number; }' property (not coded) ExtensionsDynamicTerrain.shiftFromCamera.\r\n        checkPrimitiveDiff(oldProps.subToleranceX, newProps.subToleranceX, 'subToleranceX', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.subToleranceZ, newProps.subToleranceZ, 'subToleranceZ', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.useCustomVertexFunction, newProps.useCustomVertexFunction, 'useCustomVertexFunction', 'boolean', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * This code has been generated\r\n */\r\nexport class FiberDynamicTerrain implements HasPropsHandlers<FiberDynamicTerrainProps> {\r\n    private propsHandlers: PropsHandler<FiberDynamicTerrainProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberDynamicTerrainPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberDynamicTerrainProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberDynamicTerrainProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"DynamicTerrain\",\r\n        \"namespace\": \"./extensions/DynamicTerrain\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"string\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"scene\",\r\n                \"type\": \"BabylonjsCoreScene\",\r\n                \"optional\": false\r\n            },\r\n            {\r\n                \"name\": \"options\",\r\n                \"type\": [\r\n                    {\r\n                        \"name\": \"terrainSub\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"mapData\",\r\n                        \"type\": \"BabylonjsCoreFloatArray\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"mapSubX\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"mapSubZ\",\r\n                        \"type\": \"number\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"mapUVs\",\r\n                        \"type\": \"BabylonjsCoreFloatArray\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"mapColors\",\r\n                        \"type\": \"BabylonjsCoreFloatArray\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"mapNormals\",\r\n                        \"type\": \"BabylonjsCoreFloatArray\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"invertSide\",\r\n                        \"type\": \"boolean\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"camera\",\r\n                        \"type\": \"BabylonjsCoreCamera\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"SPmapData\",\r\n                        \"type\": \"number[][] | Float32Array[]\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"sps\",\r\n                        \"type\": \"BabylonjsCoreSolidParticleSystem\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"SPcolorData\",\r\n                        \"type\": \"number[][] | Float32Array[]\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"SPuvData\",\r\n                        \"type\": \"number[][] | Float32Array[]\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"intializedCallback\",\r\n                        \"type\": \"any\",\r\n                        \"optional\": true\r\n                    }\r\n                ],\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"acceptsMaterials\": true,\r\n        \"className\": \"FiberDynamicTerrain\"\r\n    };\r\n}\r\n\r\nexport class FiberAutoRotationBehaviorPropsHandler implements PropsHandler<FiberAutoRotationBehaviorProps> {\r\n    getPropertyUpdates(oldProps: FiberAutoRotationBehaviorProps, newProps: FiberAutoRotationBehaviorProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.idleRotationSpeed, newProps.idleRotationSpeed, 'idleRotationSpeed', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.idleRotationSpinupTime, newProps.idleRotationSpinupTime, 'idleRotationSpinupTime', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.idleRotationWaitTime, newProps.idleRotationWaitTime, 'idleRotationWaitTime', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.zoomStopsAnimation, newProps.zoomStopsAnimation, 'zoomStopsAnimation', 'boolean', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * The autoRotation behavior (AutoRotationBehavior) is designed to create a smooth rotation of an ArcRotateCamera when there is no user interaction.\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberAutoRotationBehavior implements HasPropsHandlers<FiberAutoRotationBehaviorProps> {\r\n    private propsHandlers: PropsHandler<FiberAutoRotationBehaviorProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberAutoRotationBehaviorPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberAutoRotationBehaviorProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberAutoRotationBehaviorProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"AutoRotationBehavior\",\r\n        \"namespace\": \"@babylonjs/core/Behaviors/Cameras/autoRotationBehavior\",\r\n        \"parameters\": []\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isBehavior\": true,\r\n        \"className\": \"FiberAutoRotationBehavior\"\r\n    };\r\n}\r\n\r\nexport class FiberBouncingBehaviorPropsHandler implements PropsHandler<FiberBouncingBehaviorProps> {\r\n    getPropertyUpdates(oldProps: FiberBouncingBehaviorProps, newProps: FiberBouncingBehaviorProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.autoTransitionRange, newProps.autoTransitionRange, 'autoTransitionRange', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.lowerRadiusTransitionRange, newProps.lowerRadiusTransitionRange, 'lowerRadiusTransitionRange', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.transitionDuration, newProps.transitionDuration, 'transitionDuration', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.upperRadiusTransitionRange, newProps.upperRadiusTransitionRange, 'upperRadiusTransitionRange', 'number', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * Add a bouncing effect to an ArcRotateCamera when reaching a specified minimum and maximum radius\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberBouncingBehavior implements HasPropsHandlers<FiberBouncingBehaviorProps> {\r\n    private propsHandlers: PropsHandler<FiberBouncingBehaviorProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberBouncingBehaviorPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberBouncingBehaviorProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberBouncingBehaviorProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"BouncingBehavior\",\r\n        \"namespace\": \"@babylonjs/core/Behaviors/Cameras/bouncingBehavior\",\r\n        \"parameters\": []\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isBehavior\": true,\r\n        \"className\": \"FiberBouncingBehavior\"\r\n    };\r\n}\r\n\r\nexport class FiberFramingBehaviorPropsHandler implements PropsHandler<FiberFramingBehaviorProps> {\r\n    getPropertyUpdates(oldProps: FiberFramingBehaviorProps, newProps: FiberFramingBehaviorProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.autoCorrectCameraLimitsAndSensibility, newProps.autoCorrectCameraLimitsAndSensibility, 'autoCorrectCameraLimitsAndSensibility', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.defaultElevation, newProps.defaultElevation, 'defaultElevation', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.elevationReturnTime, newProps.elevationReturnTime, 'elevationReturnTime', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.elevationReturnWaitTime, newProps.elevationReturnWaitTime, 'elevationReturnWaitTime', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.framingTime, newProps.framingTime, 'framingTime', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.mode, newProps.mode, 'mode', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.positionScale, newProps.positionScale, 'positionScale', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.radiusScale, newProps.radiusScale, 'radiusScale', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.zoomStopsAnimation, newProps.zoomStopsAnimation, 'zoomStopsAnimation', 'boolean', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * The framing behavior (FramingBehavior) is designed to automatically position an ArcRotateCamera when its target is set to a mesh. It is also useful if you want to prevent the camera to go under a virtual horizontal plane.\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberFramingBehavior implements HasPropsHandlers<FiberFramingBehaviorProps> {\r\n    private propsHandlers: PropsHandler<FiberFramingBehaviorProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberFramingBehaviorPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberFramingBehaviorProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberFramingBehaviorProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"FramingBehavior\",\r\n        \"namespace\": \"@babylonjs/core/Behaviors/Cameras/framingBehavior\",\r\n        \"parameters\": []\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isBehavior\": true,\r\n        \"className\": \"FiberFramingBehavior\"\r\n    };\r\n}\r\n\r\nexport class FiberAttachToBoxBehaviorPropsHandler implements PropsHandler<FiberAttachToBoxBehaviorProps> {\r\n    getPropertyUpdates(oldProps: FiberAttachToBoxBehaviorProps, newProps: FiberAttachToBoxBehaviorProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.distanceAwayFromBottomOfFace, newProps.distanceAwayFromBottomOfFace, 'distanceAwayFromBottomOfFace', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.distanceAwayFromFace, newProps.distanceAwayFromFace, 'distanceAwayFromFace', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.name, newProps.name, 'name', 'string', changedProps)\r\n        // type: 'any' property (not coded) BabylonjsCoreAttachToBoxBehavior.ui.\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * A behavior that when attached to a mesh will will place a specified node on the meshes face pointing towards the camera\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberAttachToBoxBehavior implements HasPropsHandlers<FiberAttachToBoxBehaviorProps> {\r\n    private propsHandlers: PropsHandler<FiberAttachToBoxBehaviorProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberAttachToBoxBehaviorPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberAttachToBoxBehaviorProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberAttachToBoxBehaviorProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"AttachToBoxBehavior\",\r\n        \"namespace\": \"@babylonjs/core/Behaviors/Meshes/attachToBoxBehavior\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"ui\",\r\n                \"type\": \"BabylonjsCoreTransformNode\",\r\n                \"optional\": false\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isBehavior\": true,\r\n        \"className\": \"FiberAttachToBoxBehavior\"\r\n    };\r\n}\r\n\r\nexport class FiberFadeInOutBehaviorPropsHandler implements PropsHandler<FiberFadeInOutBehaviorProps> {\r\n    getPropertyUpdates(oldProps: FiberFadeInOutBehaviorProps, newProps: FiberFadeInOutBehaviorProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.delay, newProps.delay, 'delay', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.fadeInTime, newProps.fadeInTime, 'fadeInTime', 'number', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * A behavior that when attached to a mesh will allow the mesh to fade in and out\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberFadeInOutBehavior implements HasPropsHandlers<FiberFadeInOutBehaviorProps> {\r\n    private propsHandlers: PropsHandler<FiberFadeInOutBehaviorProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberFadeInOutBehaviorPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberFadeInOutBehaviorProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberFadeInOutBehaviorProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"FadeInOutBehavior\",\r\n        \"namespace\": \"@babylonjs/core/Behaviors/Meshes/fadeInOutBehavior\",\r\n        \"parameters\": []\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isBehavior\": true,\r\n        \"className\": \"FiberFadeInOutBehavior\"\r\n    };\r\n}\r\n\r\nexport class FiberMultiPointerScaleBehaviorPropsHandler implements PropsHandler<FiberMultiPointerScaleBehaviorProps> {\r\n    getPropertyUpdates(oldProps: FiberMultiPointerScaleBehaviorProps, newProps: FiberMultiPointerScaleBehaviorProps): PropertyUpdate[] | null {\r\n        return null; // no props to check\r\n    }\r\n}\r\n\r\n/**\r\n * A behavior that when attached to a mesh will allow the mesh to be scaled\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberMultiPointerScaleBehavior implements HasPropsHandlers<FiberMultiPointerScaleBehaviorProps> {\r\n    private propsHandlers: PropsHandler<FiberMultiPointerScaleBehaviorProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberMultiPointerScaleBehaviorPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberMultiPointerScaleBehaviorProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberMultiPointerScaleBehaviorProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"MultiPointerScaleBehavior\",\r\n        \"namespace\": \"@babylonjs/core/Behaviors/Meshes/multiPointerScaleBehavior\",\r\n        \"parameters\": []\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isBehavior\": true,\r\n        \"className\": \"FiberMultiPointerScaleBehavior\"\r\n    };\r\n}\r\n\r\nexport class FiberPointerDragBehaviorPropsHandler implements PropsHandler<FiberPointerDragBehaviorProps> {\r\n    getPropertyUpdates(oldProps: FiberPointerDragBehaviorProps, newProps: FiberPointerDragBehaviorProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        // type: 'BabylonjsCoreAbstractMesh' property (not coded) BabylonjsCorePointerDragBehavior.attachedNode.\r\n        checkPrimitiveDiff(oldProps.currentDraggingPointerID, newProps.currentDraggingPointerID, 'currentDraggingPointerID', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.detachCameraControls, newProps.detachCameraControls, 'detachCameraControls', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.dragDeltaRatio, newProps.dragDeltaRatio, 'dragDeltaRatio', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.dragging, newProps.dragging, 'dragging', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.enabled, newProps.enabled, 'enabled', 'boolean', changedProps)\r\n        checkVector3Diff(oldProps.lastDragPosition, newProps.lastDragPosition, 'lastDragPosition', 'BabylonjsCoreVector3', changedProps)\r\n        checkPrimitiveDiff(oldProps.maxDragAngle, newProps.maxDragAngle, 'maxDragAngle', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.moveAttached, newProps.moveAttached, 'moveAttached', 'boolean', changedProps)\r\n        checkObservableDiff(oldProps.onDragEndObservable, newProps.onDragEndObservable, 'onDragEndObservable', 'BabylonjsCoreObservable<{ dragPlanePoint: BabylonjsCoreVector3; pointerId: number; }>', changedProps)\r\n        checkObservableDiff(oldProps.onDragObservable, newProps.onDragObservable, 'onDragObservable', 'BabylonjsCoreObservable<{ delta: BabylonjsCoreVector3; dragPlanePoint: BabylonjsCoreVector3; dragPlaneNormal: BabylonjsCoreVector3; dragDistance: number; pointerId: number; }>', changedProps)\r\n        checkObservableDiff(oldProps.onDragStartObservable, newProps.onDragStartObservable, 'onDragStartObservable', 'BabylonjsCoreObservable<{ dragPlanePoint: BabylonjsCoreVector3; pointerId: number; }>', changedProps)\r\n        // type: '{ dragAxis?: BabylonjsCoreVector3; dragPlaneNormal?: BabylonjsCoreVector3; }' property (not coded) BabylonjsCorePointerDragBehavior.options.\r\n        checkPrimitiveDiff(oldProps.startAndReleaseDragOnPointerEvents, newProps.startAndReleaseDragOnPointerEvents, 'startAndReleaseDragOnPointerEvents', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.updateDragPlane, newProps.updateDragPlane, 'updateDragPlane', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.useObjectOrientationForDragging, newProps.useObjectOrientationForDragging, 'useObjectOrientationForDragging', 'boolean', changedProps)\r\n        checkLambdaDiff(oldProps.validateDrag, newProps.validateDrag, 'validateDrag', '(targetPosition: BabylonjsCoreVector3) => boolean', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * A behavior that when attached to a mesh will allow the mesh to be dragged around the screen based on pointer events\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberPointerDragBehavior implements HasPropsHandlers<FiberPointerDragBehaviorProps> {\r\n    private propsHandlers: PropsHandler<FiberPointerDragBehaviorProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberPointerDragBehaviorPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberPointerDragBehaviorProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberPointerDragBehaviorProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"PointerDragBehavior\",\r\n        \"namespace\": \"@babylonjs/core/Behaviors/Meshes/pointerDragBehavior\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"options\",\r\n                \"type\": [\r\n                    {\r\n                        \"name\": \"dragAxis\",\r\n                        \"type\": \"BabylonjsCoreVector3\",\r\n                        \"optional\": true\r\n                    },\r\n                    {\r\n                        \"name\": \"dragPlaneNormal\",\r\n                        \"type\": \"BabylonjsCoreVector3\",\r\n                        \"optional\": true\r\n                    }\r\n                ],\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isBehavior\": true,\r\n        \"className\": \"FiberPointerDragBehavior\"\r\n    };\r\n}\r\n\r\nexport class FiberSixDofDragBehaviorPropsHandler implements PropsHandler<FiberSixDofDragBehaviorProps> {\r\n    getPropertyUpdates(oldProps: FiberSixDofDragBehaviorProps, newProps: FiberSixDofDragBehaviorProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        checkPrimitiveDiff(oldProps.currentDraggingPointerID, newProps.currentDraggingPointerID, 'currentDraggingPointerID', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.detachCameraControls, newProps.detachCameraControls, 'detachCameraControls', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.dragDeltaRatio, newProps.dragDeltaRatio, 'dragDeltaRatio', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.dragging, newProps.dragging, 'dragging', 'boolean', changedProps)\r\n        checkObservableDiff(oldProps.onDragEndObservable, newProps.onDragEndObservable, 'onDragEndObservable', 'BabylonjsCoreObservable<{}>', changedProps)\r\n        checkObservableDiff(oldProps.onDragStartObservable, newProps.onDragStartObservable, 'onDragStartObservable', 'BabylonjsCoreObservable<{}>', changedProps)\r\n        checkPrimitiveDiff(oldProps.rotateDraggedObject, newProps.rotateDraggedObject, 'rotateDraggedObject', 'boolean', changedProps)\r\n        // type: 'any' property (not coded) BabylonjsCoreSixDofDragBehavior.zDragFactor.\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\n/**\r\n * A behavior that when attached to a mesh will allow the mesh to be dragged around based on directions and origin of the pointer's ray\r\n *\r\n * This code has been generated\r\n */\r\nexport class FiberSixDofDragBehavior implements HasPropsHandlers<FiberSixDofDragBehaviorProps> {\r\n    private propsHandlers: PropsHandler<FiberSixDofDragBehaviorProps>[];\r\n\r\n    constructor() {\r\n        this.propsHandlers = [\r\n            new FiberSixDofDragBehaviorPropsHandler()\r\n        ];\r\n    }\r\n\r\n    getPropsHandlers(): PropsHandler<FiberSixDofDragBehaviorProps>[] {\r\n        return this.propsHandlers;\r\n    }\r\n\r\n    addPropsHandler(propHandler: PropsHandler<FiberSixDofDragBehaviorProps>): void {\r\n        this.propsHandlers.push(propHandler);\r\n    }\r\n\r\n    public static readonly CreateInfo = {\r\n        \"creationType\": \"Constructor\",\r\n        \"libraryLocation\": \"SixDofDragBehavior\",\r\n        \"namespace\": \"@babylonjs/core/Behaviors/Meshes/sixDofDragBehavior\",\r\n        \"parameters\": []\r\n    };\r\n    public static readonly Metadata: CreatedInstanceMetadata = {\r\n        \"isBehavior\": true,\r\n        \"className\": \"FiberSixDofDragBehavior\"\r\n    };\r\n}\r\n\r\nexport class FiberScenePropsHandler implements PropsHandler<FiberSceneProps> {\r\n    getPropertyUpdates(oldProps: FiberSceneProps, newProps: FiberSceneProps): PropertyUpdate[] | null {\r\n        const changedProps: PropertyUpdate[] = []\r\n        // type: 'BabylonjsCoreAbstractActionManager' property (not coded) BabylonjsCoreScene.actionManager.\r\n        // type: 'BabylonjsCoreCamera' property (not coded) BabylonjsCoreScene.activeCamera.\r\n        // type: 'BabylonjsCoreCamera[]' property (not coded) BabylonjsCoreScene.activeCameras.\r\n        checkLambdaDiff(oldProps.afterCameraRender, newProps.afterCameraRender, 'afterCameraRender', '() => void', changedProps)\r\n        checkLambdaDiff(oldProps.afterRender, newProps.afterRender, 'afterRender', '() => void', changedProps)\r\n        checkColor3Diff(oldProps.ambientColor, newProps.ambientColor, 'ambientColor', 'BabylonjsCoreColor3', changedProps)\r\n        // type: 'BabylonjsCoreAnimationPropertiesOverride' property (not coded) BabylonjsCoreScene.animationPropertiesOverride.\r\n        checkPrimitiveDiff(oldProps.animationsEnabled, newProps.animationsEnabled, 'animationsEnabled', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.animationTimeScale, newProps.animationTimeScale, 'animationTimeScale', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.autoClear, newProps.autoClear, 'autoClear', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.autoClearDepthAndStencil, newProps.autoClearDepthAndStencil, 'autoClearDepthAndStencil', 'boolean', changedProps)\r\n        checkLambdaDiff(oldProps.beforeCameraRender, newProps.beforeCameraRender, 'beforeCameraRender', '() => void', changedProps)\r\n        checkLambdaDiff(oldProps.beforeRender, newProps.beforeRender, 'beforeRender', '() => void', changedProps)\r\n        checkPrimitiveDiff(oldProps.blockfreeActiveMeshesAndRenderingGroups, newProps.blockfreeActiveMeshesAndRenderingGroups, 'blockfreeActiveMeshesAndRenderingGroups', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.blockMaterialDirtyMechanism, newProps.blockMaterialDirtyMechanism, 'blockMaterialDirtyMechanism', 'boolean', changedProps)\r\n        // type: 'BabylonjsCoreCamera' property (not coded) BabylonjsCoreScene.cameraToUseForPointers.\r\n        checkColor4Diff(oldProps.clearColor, newProps.clearColor, 'clearColor', 'BabylonjsCoreColor4', changedProps)\r\n        // type: 'BabylonjsCorePlane' property (not coded) BabylonjsCoreScene.clipPlane.\r\n        // type: 'BabylonjsCorePlane' property (not coded) BabylonjsCoreScene.clipPlane2.\r\n        // type: 'BabylonjsCorePlane' property (not coded) BabylonjsCoreScene.clipPlane3.\r\n        // type: 'BabylonjsCorePlane' property (not coded) BabylonjsCoreScene.clipPlane4.\r\n        // type: 'BabylonjsCorePlane' property (not coded) BabylonjsCoreScene.clipPlane5.\r\n        // type: 'BabylonjsCorePlane' property (not coded) BabylonjsCoreScene.clipPlane6.\r\n        checkPrimitiveDiff(oldProps.collisionsEnabled, newProps.collisionsEnabled, 'collisionsEnabled', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.constantlyUpdateMeshUnderPointer, newProps.constantlyUpdateMeshUnderPointer, 'constantlyUpdateMeshUnderPointer', 'boolean', changedProps)\r\n        checkLambdaDiff(oldProps.customLODSelector, newProps.customLODSelector, 'customLODSelector', '(mesh: BabylonjsCoreAbstractMesh, camera: BabylonjsCoreCamera) => BabylonjsCoreAbstractMesh', changedProps)\r\n        // type: 'BabylonjsCoreRenderTargetTexture[]' property (not coded) BabylonjsCoreScene.customRenderTargets.\r\n        checkPrimitiveDiff(oldProps.defaultCursor, newProps.defaultCursor, 'defaultCursor', 'string', changedProps)\r\n        // type: 'BabylonjsCoreMaterial' property (not coded) BabylonjsCoreScene.defaultMaterial.\r\n        // type: 'RegExp[]' property (not coded) BabylonjsCoreScene.disableOfflineSupportExceptionRules.\r\n        checkPrimitiveDiff(oldProps.dispatchAllSubMeshesOfActiveMeshes, newProps.dispatchAllSubMeshesOfActiveMeshes, 'dispatchAllSubMeshesOfActiveMeshes', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.doNotHandleCursors, newProps.doNotHandleCursors, 'doNotHandleCursors', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.DoubleClickDelay, newProps.DoubleClickDelay, 'DoubleClickDelay', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.DragMovementThreshold, newProps.DragMovementThreshold, 'DragMovementThreshold', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.dumpNextRenderTargets, newProps.dumpNextRenderTargets, 'dumpNextRenderTargets', 'boolean', changedProps)\r\n        checkTextureDiff(oldProps.environmentBRDFTexture, newProps.environmentBRDFTexture, 'environmentBRDFTexture', 'BabylonjsCoreBaseTexture', changedProps)\r\n        checkPrimitiveDiff(oldProps.environmentIntensity, newProps.environmentIntensity, 'environmentIntensity', 'number', changedProps)\r\n        checkTextureDiff(oldProps.environmentTexture, newProps.environmentTexture, 'environmentTexture', 'BabylonjsCoreBaseTexture', changedProps)\r\n        checkPrimitiveDiff(oldProps.ExclusiveDoubleClickMode, newProps.ExclusiveDoubleClickMode, 'ExclusiveDoubleClickMode', 'boolean', changedProps)\r\n        checkColor3Diff(oldProps.fogColor, newProps.fogColor, 'fogColor', 'BabylonjsCoreColor3', changedProps)\r\n        checkPrimitiveDiff(oldProps.fogDensity, newProps.fogDensity, 'fogDensity', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.fogEnabled, newProps.fogEnabled, 'fogEnabled', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.fogEnd, newProps.fogEnd, 'fogEnd', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.fogMode, newProps.fogMode, 'fogMode', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.fogStart, newProps.fogStart, 'fogStart', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.forcePointsCloud, newProps.forcePointsCloud, 'forcePointsCloud', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.forceWireframe, newProps.forceWireframe, 'forceWireframe', 'boolean', changedProps)\r\n        // type: 'any' property (not coded) BabylonjsCoreScene.geometriesByUniqueId.\r\n        checkLambdaDiff(oldProps.getActiveMeshCandidates, newProps.getActiveMeshCandidates, 'getActiveMeshCandidates', '() => BabylonjsCoreISmartArrayLike<BabylonjsCoreAbstractMesh>', changedProps)\r\n        checkLambdaDiff(oldProps.getActiveSubMeshCandidates, newProps.getActiveSubMeshCandidates, 'getActiveSubMeshCandidates', '(mesh: BabylonjsCoreAbstractMesh) => BabylonjsCoreISmartArrayLike<BabylonjsCoreSubMesh>', changedProps)\r\n        checkLambdaDiff(oldProps.getCollidingSubMeshCandidates, newProps.getCollidingSubMeshCandidates, 'getCollidingSubMeshCandidates', '(mesh: BabylonjsCoreAbstractMesh, collider: BabylonjsCoreCollider) => BabylonjsCoreISmartArrayLike<BabylonjsCoreSubMesh>', changedProps)\r\n        checkLambdaDiff(oldProps.getDeterministicFrameTime, newProps.getDeterministicFrameTime, 'getDeterministicFrameTime', '() => number', changedProps)\r\n        checkLambdaDiff(oldProps.getIntersectingSubMeshCandidates, newProps.getIntersectingSubMeshCandidates, 'getIntersectingSubMeshCandidates', '(mesh: BabylonjsCoreAbstractMesh, localRay: BabylonjsCoreRay) => BabylonjsCoreISmartArrayLike<BabylonjsCoreSubMesh>', changedProps)\r\n        checkVector3Diff(oldProps.gravity, newProps.gravity, 'gravity', 'BabylonjsCoreVector3', changedProps)\r\n        checkPrimitiveDiff(oldProps.hoverCursor, newProps.hoverCursor, 'hoverCursor', 'string', changedProps)\r\n        // type: 'String[]' property (not coded) BabylonjsCoreScene.importedMeshesFiles.\r\n        checkPrimitiveDiff(oldProps.lensFlaresEnabled, newProps.lensFlaresEnabled, 'lensFlaresEnabled', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.lightsEnabled, newProps.lightsEnabled, 'lightsEnabled', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.loadingPluginName, newProps.loadingPluginName, 'loadingPluginName', 'string', changedProps)\r\n        checkPrimitiveDiff(oldProps.LongPressDelay, newProps.LongPressDelay, 'LongPressDelay', 'number', changedProps)\r\n        // type: 'any' property (not coded) BabylonjsCoreScene.metadata.\r\n        // type: 'BabylonjsCoreIOfflineProvider' property (not coded) BabylonjsCoreScene.offlineProvider.\r\n        checkObservableDiff(oldProps.onActiveCameraChanged, newProps.onActiveCameraChanged, 'onActiveCameraChanged', 'BabylonjsCoreObservable<BabylonjsCoreScene>', changedProps)\r\n        checkObservableDiff(oldProps.onAfterActiveMeshesEvaluationObservable, newProps.onAfterActiveMeshesEvaluationObservable, 'onAfterActiveMeshesEvaluationObservable', 'BabylonjsCoreObservable<BabylonjsCoreScene>', changedProps)\r\n        checkObservableDiff(oldProps.onAfterAnimationsObservable, newProps.onAfterAnimationsObservable, 'onAfterAnimationsObservable', 'BabylonjsCoreObservable<BabylonjsCoreScene>', changedProps)\r\n        checkObservableDiff(oldProps.onAfterCameraRenderObservable, newProps.onAfterCameraRenderObservable, 'onAfterCameraRenderObservable', 'BabylonjsCoreObservable<BabylonjsCoreCamera>', changedProps)\r\n        checkObservableDiff(oldProps.onAfterDrawPhaseObservable, newProps.onAfterDrawPhaseObservable, 'onAfterDrawPhaseObservable', 'BabylonjsCoreObservable<BabylonjsCoreScene>', changedProps)\r\n        checkObservableDiff(oldProps.onAfterParticlesRenderingObservable, newProps.onAfterParticlesRenderingObservable, 'onAfterParticlesRenderingObservable', 'BabylonjsCoreObservable<BabylonjsCoreScene>', changedProps)\r\n        checkObservableDiff(oldProps.onAfterRenderCameraObservable, newProps.onAfterRenderCameraObservable, 'onAfterRenderCameraObservable', 'BabylonjsCoreObservable<BabylonjsCoreCamera>', changedProps)\r\n        checkObservableDiff(oldProps.onAfterRenderingGroupObservable, newProps.onAfterRenderingGroupObservable, 'onAfterRenderingGroupObservable', 'BabylonjsCoreObservable<BabylonjsCoreRenderingGroupInfo>', changedProps)\r\n        checkObservableDiff(oldProps.onAfterRenderObservable, newProps.onAfterRenderObservable, 'onAfterRenderObservable', 'BabylonjsCoreObservable<BabylonjsCoreScene>', changedProps)\r\n        checkObservableDiff(oldProps.onAfterRenderTargetsRenderObservable, newProps.onAfterRenderTargetsRenderObservable, 'onAfterRenderTargetsRenderObservable', 'BabylonjsCoreObservable<BabylonjsCoreScene>', changedProps)\r\n        checkObservableDiff(oldProps.onAfterStepObservable, newProps.onAfterStepObservable, 'onAfterStepObservable', 'BabylonjsCoreObservable<BabylonjsCoreScene>', changedProps)\r\n        checkObservableDiff(oldProps.onAnimationFileImportedObservable, newProps.onAnimationFileImportedObservable, 'onAnimationFileImportedObservable', 'BabylonjsCoreObservable<BabylonjsCoreScene>', changedProps)\r\n        checkObservableDiff(oldProps.onBeforeActiveMeshesEvaluationObservable, newProps.onBeforeActiveMeshesEvaluationObservable, 'onBeforeActiveMeshesEvaluationObservable', 'BabylonjsCoreObservable<BabylonjsCoreScene>', changedProps)\r\n        checkObservableDiff(oldProps.onBeforeAnimationsObservable, newProps.onBeforeAnimationsObservable, 'onBeforeAnimationsObservable', 'BabylonjsCoreObservable<BabylonjsCoreScene>', changedProps)\r\n        checkObservableDiff(oldProps.onBeforeCameraRenderObservable, newProps.onBeforeCameraRenderObservable, 'onBeforeCameraRenderObservable', 'BabylonjsCoreObservable<BabylonjsCoreCamera>', changedProps)\r\n        checkObservableDiff(oldProps.onBeforeDrawPhaseObservable, newProps.onBeforeDrawPhaseObservable, 'onBeforeDrawPhaseObservable', 'BabylonjsCoreObservable<BabylonjsCoreScene>', changedProps)\r\n        checkObservableDiff(oldProps.onBeforeParticlesRenderingObservable, newProps.onBeforeParticlesRenderingObservable, 'onBeforeParticlesRenderingObservable', 'BabylonjsCoreObservable<BabylonjsCoreScene>', changedProps)\r\n        checkObservableDiff(oldProps.onBeforeRenderingGroupObservable, newProps.onBeforeRenderingGroupObservable, 'onBeforeRenderingGroupObservable', 'BabylonjsCoreObservable<BabylonjsCoreRenderingGroupInfo>', changedProps)\r\n        checkObservableDiff(oldProps.onBeforeRenderObservable, newProps.onBeforeRenderObservable, 'onBeforeRenderObservable', 'BabylonjsCoreObservable<BabylonjsCoreScene>', changedProps)\r\n        checkObservableDiff(oldProps.onBeforeRenderTargetsRenderObservable, newProps.onBeforeRenderTargetsRenderObservable, 'onBeforeRenderTargetsRenderObservable', 'BabylonjsCoreObservable<BabylonjsCoreScene>', changedProps)\r\n        checkObservableDiff(oldProps.onBeforeStepObservable, newProps.onBeforeStepObservable, 'onBeforeStepObservable', 'BabylonjsCoreObservable<BabylonjsCoreScene>', changedProps)\r\n        checkObservableDiff(oldProps.onCameraRemovedObservable, newProps.onCameraRemovedObservable, 'onCameraRemovedObservable', 'BabylonjsCoreObservable<BabylonjsCoreCamera>', changedProps)\r\n        checkObservableDiff(oldProps.onDataLoadedObservable, newProps.onDataLoadedObservable, 'onDataLoadedObservable', 'BabylonjsCoreObservable<BabylonjsCoreScene>', changedProps)\r\n        checkLambdaDiff(oldProps.onDispose, newProps.onDispose, 'onDispose', '() => void', changedProps)\r\n        checkObservableDiff(oldProps.onDisposeObservable, newProps.onDisposeObservable, 'onDisposeObservable', 'BabylonjsCoreObservable<BabylonjsCoreScene>', changedProps)\r\n        checkObservableDiff(oldProps.onGeometryRemovedObservable, newProps.onGeometryRemovedObservable, 'onGeometryRemovedObservable', 'BabylonjsCoreObservable<BabylonjsCoreGeometry>', changedProps)\r\n        checkObservableDiff(oldProps.onKeyboardObservable, newProps.onKeyboardObservable, 'onKeyboardObservable', 'BabylonjsCoreObservable<BabylonjsCoreKeyboardInfo>', changedProps)\r\n        checkObservableDiff(oldProps.onLightRemovedObservable, newProps.onLightRemovedObservable, 'onLightRemovedObservable', 'BabylonjsCoreObservable<BabylonjsCoreLight>', changedProps)\r\n        checkObservableDiff(oldProps.onMaterialRemovedObservable, newProps.onMaterialRemovedObservable, 'onMaterialRemovedObservable', 'BabylonjsCoreObservable<BabylonjsCoreMaterial>', changedProps)\r\n        checkObservableDiff(oldProps.onMeshImportedObservable, newProps.onMeshImportedObservable, 'onMeshImportedObservable', 'BabylonjsCoreObservable<BabylonjsCoreAbstractMesh>', changedProps)\r\n        checkObservableDiff(oldProps.onMeshRemovedObservable, newProps.onMeshRemovedObservable, 'onMeshRemovedObservable', 'BabylonjsCoreObservable<BabylonjsCoreAbstractMesh>', changedProps)\r\n        checkObservableDiff(oldProps.onNewCameraAddedObservable, newProps.onNewCameraAddedObservable, 'onNewCameraAddedObservable', 'BabylonjsCoreObservable<BabylonjsCoreCamera>', changedProps)\r\n        checkObservableDiff(oldProps.onNewGeometryAddedObservable, newProps.onNewGeometryAddedObservable, 'onNewGeometryAddedObservable', 'BabylonjsCoreObservable<BabylonjsCoreGeometry>', changedProps)\r\n        checkObservableDiff(oldProps.onNewLightAddedObservable, newProps.onNewLightAddedObservable, 'onNewLightAddedObservable', 'BabylonjsCoreObservable<BabylonjsCoreLight>', changedProps)\r\n        checkObservableDiff(oldProps.onNewMaterialAddedObservable, newProps.onNewMaterialAddedObservable, 'onNewMaterialAddedObservable', 'BabylonjsCoreObservable<BabylonjsCoreMaterial>', changedProps)\r\n        checkObservableDiff(oldProps.onNewMeshAddedObservable, newProps.onNewMeshAddedObservable, 'onNewMeshAddedObservable', 'BabylonjsCoreObservable<BabylonjsCoreAbstractMesh>', changedProps)\r\n        checkObservableDiff(oldProps.onNewSkeletonAddedObservable, newProps.onNewSkeletonAddedObservable, 'onNewSkeletonAddedObservable', 'BabylonjsCoreObservable<BabylonjsCoreSkeleton>', changedProps)\r\n        checkObservableDiff(oldProps.onNewTextureAddedObservable, newProps.onNewTextureAddedObservable, 'onNewTextureAddedObservable', 'BabylonjsCoreObservable<BabylonjsCoreBaseTexture>', changedProps)\r\n        checkObservableDiff(oldProps.onNewTransformNodeAddedObservable, newProps.onNewTransformNodeAddedObservable, 'onNewTransformNodeAddedObservable', 'BabylonjsCoreObservable<BabylonjsCoreTransformNode>', changedProps)\r\n        checkLambdaDiff(oldProps.onPointerDown, newProps.onPointerDown, 'onPointerDown', '(evt: PointerEvent, pickInfo: BabylonjsCorePickingInfo, type: BabylonjsCorePointerEventTypes) => void', changedProps)\r\n        checkLambdaDiff(oldProps.onPointerMove, newProps.onPointerMove, 'onPointerMove', '(evt: PointerEvent, pickInfo: BabylonjsCorePickingInfo, type: BabylonjsCorePointerEventTypes) => void', changedProps)\r\n        checkObservableDiff(oldProps.onPointerObservable, newProps.onPointerObservable, 'onPointerObservable', 'BabylonjsCoreObservable<BabylonjsCorePointerInfo>', changedProps)\r\n        checkLambdaDiff(oldProps.onPointerPick, newProps.onPointerPick, 'onPointerPick', '(evt: PointerEvent, pickInfo: BabylonjsCorePickingInfo) => void', changedProps)\r\n        checkLambdaDiff(oldProps.onPointerUp, newProps.onPointerUp, 'onPointerUp', '(evt: PointerEvent, pickInfo: BabylonjsCorePickingInfo, type: BabylonjsCorePointerEventTypes) => void', changedProps)\r\n        checkObservableDiff(oldProps.onPreKeyboardObservable, newProps.onPreKeyboardObservable, 'onPreKeyboardObservable', 'BabylonjsCoreObservable<BabylonjsCoreKeyboardInfoPre>', changedProps)\r\n        checkObservableDiff(oldProps.onPrePointerObservable, newProps.onPrePointerObservable, 'onPrePointerObservable', 'BabylonjsCoreObservable<BabylonjsCorePointerInfoPre>', changedProps)\r\n        checkObservableDiff(oldProps.onReadyObservable, newProps.onReadyObservable, 'onReadyObservable', 'BabylonjsCoreObservable<BabylonjsCoreScene>', changedProps)\r\n        checkObservableDiff(oldProps.onSkeletonRemovedObservable, newProps.onSkeletonRemovedObservable, 'onSkeletonRemovedObservable', 'BabylonjsCoreObservable<BabylonjsCoreSkeleton>', changedProps)\r\n        checkObservableDiff(oldProps.onTextureRemovedObservable, newProps.onTextureRemovedObservable, 'onTextureRemovedObservable', 'BabylonjsCoreObservable<BabylonjsCoreBaseTexture>', changedProps)\r\n        checkObservableDiff(oldProps.onTransformNodeRemovedObservable, newProps.onTransformNodeRemovedObservable, 'onTransformNodeRemovedObservable', 'BabylonjsCoreObservable<BabylonjsCoreTransformNode>', changedProps)\r\n        checkPrimitiveDiff(oldProps.particlesEnabled, newProps.particlesEnabled, 'particlesEnabled', 'boolean', changedProps)\r\n        checkLambdaDiff(oldProps.pointerDownPredicate, newProps.pointerDownPredicate, 'pointerDownPredicate', '(Mesh: BabylonjsCoreAbstractMesh) => boolean', changedProps)\r\n        checkLambdaDiff(oldProps.pointerMovePredicate, newProps.pointerMovePredicate, 'pointerMovePredicate', '(Mesh: BabylonjsCoreAbstractMesh) => boolean', changedProps)\r\n        checkLambdaDiff(oldProps.pointerUpPredicate, newProps.pointerUpPredicate, 'pointerUpPredicate', '(Mesh: BabylonjsCoreAbstractMesh) => boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.pointerX, newProps.pointerX, 'pointerX', 'number', changedProps)\r\n        checkPrimitiveDiff(oldProps.pointerY, newProps.pointerY, 'pointerY', 'number', changedProps)\r\n        // type: 'BabylonjsCorePostProcess[]' property (not coded) BabylonjsCoreScene.postProcesses.\r\n        checkPrimitiveDiff(oldProps.postProcessesEnabled, newProps.postProcessesEnabled, 'postProcessesEnabled', 'boolean', changedProps)\r\n        // type: 'BabylonjsCorePostProcessManager' property (not coded) BabylonjsCoreScene.postProcessManager.\r\n        checkPrimitiveDiff(oldProps.preventDefaultOnPointerDown, newProps.preventDefaultOnPointerDown, 'preventDefaultOnPointerDown', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.preventDefaultOnPointerUp, newProps.preventDefaultOnPointerUp, 'preventDefaultOnPointerUp', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.probesEnabled, newProps.probesEnabled, 'probesEnabled', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.proceduralTexturesEnabled, newProps.proceduralTexturesEnabled, 'proceduralTexturesEnabled', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.renderTargetsEnabled, newProps.renderTargetsEnabled, 'renderTargetsEnabled', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.requireLightSorting, newProps.requireLightSorting, 'requireLightSorting', 'boolean', changedProps)\r\n        // type: 'any' property (not coded) BabylonjsCoreScene.reservedDataStore.\r\n        checkPrimitiveDiff(oldProps.shadowsEnabled, newProps.shadowsEnabled, 'shadowsEnabled', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.skeletonsEnabled, newProps.skeletonsEnabled, 'skeletonsEnabled', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.skipFrustumClipping, newProps.skipFrustumClipping, 'skipFrustumClipping', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.spritesEnabled, newProps.spritesEnabled, 'spritesEnabled', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.texturesEnabled, newProps.texturesEnabled, 'texturesEnabled', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.useConstantAnimationDeltaTime, newProps.useConstantAnimationDeltaTime, 'useConstantAnimationDeltaTime', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.useDelayedTextureLoading, newProps.useDelayedTextureLoading, 'useDelayedTextureLoading', 'boolean', changedProps)\r\n        checkPrimitiveDiff(oldProps.useRightHandedSystem, newProps.useRightHandedSystem, 'useRightHandedSystem', 'boolean', changedProps)\r\n        checkMethodDiff(oldProps.addActionManager, newProps.addActionManager, 'addActionManager', '(newActionManager?: BabylonjsCoreAbstractActionManager) => void', changedProps)\r\n        checkMethodDiff(oldProps.addAnimation, newProps.addAnimation, 'addAnimation', '(newAnimation?: BabylonjsCoreAnimation) => void', changedProps)\r\n        checkMethodDiff(oldProps.addAnimationGroup, newProps.addAnimationGroup, 'addAnimationGroup', '(newAnimationGroup?: BabylonjsCoreAnimationGroup) => void', changedProps)\r\n        checkMethodDiff(oldProps.addCamera, newProps.addCamera, 'addCamera', '(newCamera?: BabylonjsCoreCamera) => void', changedProps)\r\n        checkMethodDiff(oldProps.addExternalData, newProps.addExternalData, 'addExternalData', '(key?: string, data?: T) => boolean', changedProps)\r\n        checkMethodDiff(oldProps.addGeometry, newProps.addGeometry, 'addGeometry', '(newGeometry?: BabylonjsCoreGeometry) => void', changedProps)\r\n        checkMethodDiff(oldProps.addLight, newProps.addLight, 'addLight', '(newLight?: BabylonjsCoreLight) => void', changedProps)\r\n        checkMethodDiff(oldProps.addMaterial, newProps.addMaterial, 'addMaterial', '(newMaterial?: BabylonjsCoreMaterial) => void', changedProps)\r\n        checkMethodDiff(oldProps.addMesh, newProps.addMesh, 'addMesh', '(newMesh?: BabylonjsCoreAbstractMesh, recursive?: boolean) => void', changedProps)\r\n        checkMethodDiff(oldProps.addMorphTargetManager, newProps.addMorphTargetManager, 'addMorphTargetManager', '(newMorphTargetManager?: BabylonjsCoreMorphTargetManager) => void', changedProps)\r\n        checkMethodDiff(oldProps.addMultiMaterial, newProps.addMultiMaterial, 'addMultiMaterial', '(newMultiMaterial?: BabylonjsCoreMultiMaterial) => void', changedProps)\r\n        checkMethodDiff(oldProps.addParticleSystem, newProps.addParticleSystem, 'addParticleSystem', '(newParticleSystem?: BabylonjsCoreIParticleSystem) => void', changedProps)\r\n        checkMethodDiff(oldProps.addSkeleton, newProps.addSkeleton, 'addSkeleton', '(newSkeleton?: BabylonjsCoreSkeleton) => void', changedProps)\r\n        checkMethodDiff(oldProps.addTexture, newProps.addTexture, 'addTexture', '(newTexture?: BabylonjsCoreBaseTexture) => void', changedProps)\r\n        checkMethodDiff(oldProps.addTransformNode, newProps.addTransformNode, 'addTransformNode', '(newTransformNode?: BabylonjsCoreTransformNode) => void', changedProps)\r\n        checkMethodDiff(oldProps.setActiveCameraByID, newProps.setActiveCameraByID, 'setActiveCameraByID', '(id?: string) => BabylonjsCoreCamera', changedProps)\r\n        checkMethodDiff(oldProps.setActiveCameraByName, newProps.setActiveCameraByName, 'setActiveCameraByName', '(name?: string) => BabylonjsCoreCamera', changedProps)\r\n        checkMethodDiff(oldProps.setPointerOverMesh, newProps.setPointerOverMesh, 'setPointerOverMesh', '(mesh?: BabylonjsCoreAbstractMesh) => void', changedProps)\r\n        checkMethodDiff(oldProps.setRenderingAutoClearDepthStencil, newProps.setRenderingAutoClearDepthStencil, 'setRenderingAutoClearDepthStencil', '(renderingGroupId?: number, autoClearDepthStencil?: boolean, depth?: boolean, stencil?: boolean) => void', changedProps)\r\n        checkMethodDiff(oldProps.setRenderingOrder, newProps.setRenderingOrder, 'setRenderingOrder', '(renderingGroupId?: number, opaqueSortCompareFn?: (a: BabylonjsCoreSubMesh, b: BabylonjsCoreSubMesh) => number, alphaTestSortCompareFn?: (a: BabylonjsCoreSubMesh, b: BabylonjsCoreSubMesh) => number, transparentSortCompareFn?: (a: BabylonjsCoreSubMesh, b: BabylonjsCoreSubMesh) => number) => void', changedProps)\r\n        checkMethodDiff(oldProps.setStepId, newProps.setStepId, 'setStepId', '(newStepId?: number) => void', changedProps)\r\n        checkMethodDiff(oldProps.setTransformMatrix, newProps.setTransformMatrix, 'setTransformMatrix', '(viewL?: BabylonjsCoreMatrix, projectionL?: BabylonjsCoreMatrix, viewR?: BabylonjsCoreMatrix, projectionR?: BabylonjsCoreMatrix) => void', changedProps)\r\n        return changedProps.length === 0 ? null : changedProps;\r\n    }\r\n}\r\n\r\nexport const ADTForMesh: string = 'ADTForMesh', ADTFullscreenUI: string = 'ADTFullscreenUI', AbstractButton3D: string = 'AbstractButton3D', AbstractMesh: string = 'AbstractMesh', AdvancedDynamicTexture: string = 'AdvancedDynamicTexture', AnaglyphArcRotateCamera: string = 'AnaglyphArcRotateCamera', AnaglyphFreeCamera: string = 'AnaglyphFreeCamera', AnaglyphGamepadCamera: string = 'AnaglyphGamepadCamera', AnaglyphUniversalCamera: string = 'AnaglyphUniversalCamera', ArcFollowCamera: string = 'ArcFollowCamera', ArcRotateCamera: string = 'ArcRotateCamera', AttachToBoxBehavior: string = 'AttachToBoxBehavior', AutoRotationBehavior: string = 'AutoRotationBehavior', BackgroundMaterial: string = 'BackgroundMaterial', BaseSlider: string = 'BaseSlider', BaseTexture: string = 'BaseTexture', BouncingBehavior: string = 'BouncingBehavior', Box: string = 'Box', Button: string = 'Button', Button3D: string = 'Button3D', Camera: string = 'Camera', Checkbox: string = 'Checkbox', ColorGradingTexture: string = 'ColorGradingTexture', ColorPicker: string = 'ColorPicker', Container: string = 'Container', Container3D: string = 'Container3D', Control: string = 'Control', Control3D: string = 'Control3D', CubeTexture: string = 'CubeTexture', CustomProceduralTexture: string = 'CustomProceduralTexture', Cylinder: string = 'Cylinder', CylinderPanel: string = 'CylinderPanel', DashedLines: string = 'DashedLines', Decal: string = 'Decal', DeviceOrientationCamera: string = 'DeviceOrientationCamera', DirectionalLight: string = 'DirectionalLight', Disc: string = 'Disc', DisplayGrid: string = 'DisplayGrid', DynamicTerrain: string = 'DynamicTerrain', DynamicTexture: string = 'DynamicTexture', EffectLayer: string = 'EffectLayer', Ellipse: string = 'Ellipse', EnvironmentHelper: string = 'EnvironmentHelper', EquiRectangularCubeTexture: string = 'EquiRectangularCubeTexture', ExtrudePolygon: string = 'ExtrudePolygon', ExtrudeShape: string = 'ExtrudeShape', ExtrudeShapeCustom: string = 'ExtrudeShapeCustom', FadeInOutBehavior: string = 'FadeInOutBehavior', FluentMaterial: string = 'FluentMaterial', FlyCamera: string = 'FlyCamera', FollowCamera: string = 'FollowCamera', FramingBehavior: string = 'FramingBehavior', FreeCamera: string = 'FreeCamera', GUI3DManager: string = 'GUI3DManager', GamepadCamera: string = 'GamepadCamera', GlowLayer: string = 'GlowLayer', Grid: string = 'Grid', Ground: string = 'Ground', GroundFromHeightMap: string = 'GroundFromHeightMap', HDRCubeTexture: string = 'HDRCubeTexture', HemisphericLight: string = 'HemisphericLight', HighlightLayer: string = 'HighlightLayer', HolographicButton: string = 'HolographicButton', HtmlElementTexture: string = 'HtmlElementTexture', IcoSphere: string = 'IcoSphere', Image: string = 'Image', ImageBasedSlider: string = 'ImageBasedSlider', ImageScrollBar: string = 'ImageScrollBar', InputPassword: string = 'InputPassword', InputText: string = 'InputText', Lathe: string = 'Lathe', Light: string = 'Light', Line: string = 'Line', LineSystem: string = 'LineSystem', Lines: string = 'Lines', Material: string = 'Material', Mesh: string = 'Mesh', MeshButton3D: string = 'MeshButton3D', MirrorTexture: string = 'MirrorTexture', Model: string = 'Model', MultiLine: string = 'MultiLine', MultiMaterial: string = 'MultiMaterial', MultiPointerScaleBehavior: string = 'MultiPointerScaleBehavior', MultiRenderTarget: string = 'MultiRenderTarget', MultiviewRenderTarget: string = 'MultiviewRenderTarget', Node: string = 'Node', NodeMaterial: string = 'NodeMaterial', NoiseProceduralTexture: string = 'NoiseProceduralTexture', PBRBaseMaterial: string = 'PBRBaseMaterial', PBRBaseSimpleMaterial: string = 'PBRBaseSimpleMaterial', PBRMaterial: string = 'PBRMaterial', PBRMetallicRoughnessMaterial: string = 'PBRMetallicRoughnessMaterial', PBRSpecularGlossinessMaterial: string = 'PBRSpecularGlossinessMaterial', PhysicsImpostor: string = 'PhysicsImpostor', Plane: string = 'Plane', PlanePanel: string = 'PlanePanel', PointLight: string = 'PointLight', PointerDragBehavior: string = 'PointerDragBehavior', Polygon: string = 'Polygon', Polyhedron: string = 'Polyhedron', ProceduralTexture: string = 'ProceduralTexture', PushMaterial: string = 'PushMaterial', RadioButton: string = 'RadioButton', RawCubeTexture: string = 'RawCubeTexture', RawTexture: string = 'RawTexture', RawTexture2DArray: string = 'RawTexture2DArray', RawTexture3D: string = 'RawTexture3D', Rectangle: string = 'Rectangle', RefractionTexture: string = 'RefractionTexture', RenderTargetTexture: string = 'RenderTargetTexture', Ribbon: string = 'Ribbon', ScatterPanel: string = 'ScatterPanel', ScrollBar: string = 'ScrollBar', ScrollViewer: string = 'ScrollViewer', SelectionPanel: string = 'SelectionPanel', ShaderMaterial: string = 'ShaderMaterial', ShadowGenerator: string = 'ShadowGenerator', ShadowLight: string = 'ShadowLight', SixDofDragBehavior: string = 'SixDofDragBehavior', Slider: string = 'Slider', Sphere: string = 'Sphere', SpherePanel: string = 'SpherePanel', SpotLight: string = 'SpotLight', StackPanel: string = 'StackPanel', StackPanel3D: string = 'StackPanel3D', StandardMaterial: string = 'StandardMaterial', StereoscopicArcRotateCamera: string = 'StereoscopicArcRotateCamera', StereoscopicFreeCamera: string = 'StereoscopicFreeCamera', StereoscopicGamepadCamera: string = 'StereoscopicGamepadCamera', StereoscopicUniversalCamera: string = 'StereoscopicUniversalCamera', TargetCamera: string = 'TargetCamera', TextBlock: string = 'TextBlock', Texture: string = 'Texture', TiledBox: string = 'TiledBox', TiledGround: string = 'TiledGround', TiledPlane: string = 'TiledPlane', Torus: string = 'Torus', TorusKnot: string = 'TorusKnot', TouchCamera: string = 'TouchCamera', TransformNode: string = 'TransformNode', Tube: string = 'Tube', UniversalCamera: string = 'UniversalCamera', VRDeviceOrientationArcRotateCamera: string = 'VRDeviceOrientationArcRotateCamera', VRDeviceOrientationFreeCamera: string = 'VRDeviceOrientationFreeCamera', VRDeviceOrientationGamepadCamera: string = 'VRDeviceOrientationGamepadCamera', VRExperienceHelper: string = 'VRExperienceHelper', VideoTexture: string = 'VideoTexture', VirtualJoysticksCamera: string = 'VirtualJoysticksCamera', VirtualKeyboard: string = 'VirtualKeyboard', VolumeBasedPanel: string = 'VolumeBasedPanel', WebVRFreeCamera: string = 'WebVRFreeCamera', WebXRCamera: string = 'WebXRCamera', _ScrollViewerWindow: string = '_ScrollViewerWindow';\r\nconst classesMap: object = {\r\n    dynamicTerrain: ExtensionsDynamicTerrain, DynamicTerrain: ExtensionsDynamicTerrain,\r\n    abstractScene: BabylonjsCoreAbstractScene, AbstractScene: BabylonjsCoreAbstractScene,\r\n    node: BabylonjsCoreNode, Node: BabylonjsCoreNode,\r\n    scene: BabylonjsCoreScene, Scene: BabylonjsCoreScene,\r\n    camera: BabylonjsCoreCamera, Camera: BabylonjsCoreCamera,\r\n    environmentHelper: BabylonjsCoreEnvironmentHelper, EnvironmentHelper: BabylonjsCoreEnvironmentHelper,\r\n    effectLayer: BabylonjsCoreEffectLayer, EffectLayer: BabylonjsCoreEffectLayer,\r\n    light: BabylonjsCoreLight, Light: BabylonjsCoreLight,\r\n    material: BabylonjsCoreMaterial, Material: BabylonjsCoreMaterial,\r\n    mesh: BabylonjsCoreMesh, Mesh: BabylonjsCoreMesh,\r\n    meshBuilder: BabylonjsCoreMeshBuilder, MeshBuilder: BabylonjsCoreMeshBuilder,\r\n    physicsImpostor: BabylonjsCorePhysicsImpostor, PhysicsImpostor: BabylonjsCorePhysicsImpostor,\r\n    advancedDynamicTexture: BabylonjsGuiAdvancedDynamicTexture, AdvancedDynamicTexture: BabylonjsGuiAdvancedDynamicTexture,\r\n    gui3DManager: BabylonjsGuiGUI3DManager, GUI3DManager: BabylonjsGuiGUI3DManager,\r\n    autoRotationBehavior: BabylonjsCoreAutoRotationBehavior, AutoRotationBehavior: BabylonjsCoreAutoRotationBehavior,\r\n    bouncingBehavior: BabylonjsCoreBouncingBehavior, BouncingBehavior: BabylonjsCoreBouncingBehavior,\r\n    framingBehavior: BabylonjsCoreFramingBehavior, FramingBehavior: BabylonjsCoreFramingBehavior,\r\n    attachToBoxBehavior: BabylonjsCoreAttachToBoxBehavior, AttachToBoxBehavior: BabylonjsCoreAttachToBoxBehavior,\r\n    fadeInOutBehavior: BabylonjsCoreFadeInOutBehavior, FadeInOutBehavior: BabylonjsCoreFadeInOutBehavior,\r\n    multiPointerScaleBehavior: BabylonjsCoreMultiPointerScaleBehavior, MultiPointerScaleBehavior: BabylonjsCoreMultiPointerScaleBehavior,\r\n    pointerDragBehavior: BabylonjsCorePointerDragBehavior, PointerDragBehavior: BabylonjsCorePointerDragBehavior,\r\n    sixDofDragBehavior: BabylonjsCoreSixDofDragBehavior, SixDofDragBehavior: BabylonjsCoreSixDofDragBehavior,\r\n    vrExperienceHelper: BabylonjsCoreVRExperienceHelper, VRExperienceHelper: BabylonjsCoreVRExperienceHelper,\r\n    shadowGenerator: BabylonjsCoreShadowGenerator, ShadowGenerator: BabylonjsCoreShadowGenerator,\r\n    baseTexture: BabylonjsCoreBaseTexture, BaseTexture: BabylonjsCoreBaseTexture,\r\n    control: BabylonjsGuiControl, Control: BabylonjsGuiControl,\r\n    textBlock: BabylonjsGuiTextBlock, TextBlock: BabylonjsGuiTextBlock,\r\n    control3D: BabylonjsGuiControl3D, Control3D: BabylonjsGuiControl3D,\r\n    transformNode: BabylonjsCoreTransformNode, TransformNode: BabylonjsCoreTransformNode,\r\n    abstractMesh: BabylonjsCoreAbstractMesh, AbstractMesh: BabylonjsCoreAbstractMesh,\r\n    renderTargetTexture: BabylonjsCoreRenderTargetTexture, RenderTargetTexture: BabylonjsCoreRenderTargetTexture,\r\n    targetCamera: BabylonjsCoreTargetCamera, TargetCamera: BabylonjsCoreTargetCamera,\r\n    freeCamera: BabylonjsCoreFreeCamera, FreeCamera: BabylonjsCoreFreeCamera,\r\n    touchCamera: BabylonjsCoreTouchCamera, TouchCamera: BabylonjsCoreTouchCamera,\r\n    universalCamera: BabylonjsCoreUniversalCamera, UniversalCamera: BabylonjsCoreUniversalCamera,\r\n    gamepadCamera: BabylonjsCoreGamepadCamera, GamepadCamera: BabylonjsCoreGamepadCamera,\r\n    anaglyphGamepadCamera: BabylonjsCoreAnaglyphGamepadCamera, AnaglyphGamepadCamera: BabylonjsCoreAnaglyphGamepadCamera,\r\n    stereoscopicGamepadCamera: BabylonjsCoreStereoscopicGamepadCamera, StereoscopicGamepadCamera: BabylonjsCoreStereoscopicGamepadCamera,\r\n    anaglyphUniversalCamera: BabylonjsCoreAnaglyphUniversalCamera, AnaglyphUniversalCamera: BabylonjsCoreAnaglyphUniversalCamera,\r\n    stereoscopicUniversalCamera: BabylonjsCoreStereoscopicUniversalCamera, StereoscopicUniversalCamera: BabylonjsCoreStereoscopicUniversalCamera,\r\n    deviceOrientationCamera: BabylonjsCoreDeviceOrientationCamera, DeviceOrientationCamera: BabylonjsCoreDeviceOrientationCamera,\r\n    vrDeviceOrientationFreeCamera: BabylonjsCoreVRDeviceOrientationFreeCamera, VRDeviceOrientationFreeCamera: BabylonjsCoreVRDeviceOrientationFreeCamera,\r\n    vrDeviceOrientationGamepadCamera: BabylonjsCoreVRDeviceOrientationGamepadCamera, VRDeviceOrientationGamepadCamera: BabylonjsCoreVRDeviceOrientationGamepadCamera,\r\n    anaglyphFreeCamera: BabylonjsCoreAnaglyphFreeCamera, AnaglyphFreeCamera: BabylonjsCoreAnaglyphFreeCamera,\r\n    stereoscopicFreeCamera: BabylonjsCoreStereoscopicFreeCamera, StereoscopicFreeCamera: BabylonjsCoreStereoscopicFreeCamera,\r\n    virtualJoysticksCamera: BabylonjsCoreVirtualJoysticksCamera, VirtualJoysticksCamera: BabylonjsCoreVirtualJoysticksCamera,\r\n    webVrFreeCamera: BabylonjsCoreWebVRFreeCamera, WebVRFreeCamera: BabylonjsCoreWebVRFreeCamera,\r\n    webXrCamera: BabylonjsCoreWebXRCamera, WebXRCamera: BabylonjsCoreWebXRCamera,\r\n    arcRotateCamera: BabylonjsCoreArcRotateCamera, ArcRotateCamera: BabylonjsCoreArcRotateCamera,\r\n    anaglyphArcRotateCamera: BabylonjsCoreAnaglyphArcRotateCamera, AnaglyphArcRotateCamera: BabylonjsCoreAnaglyphArcRotateCamera,\r\n    stereoscopicArcRotateCamera: BabylonjsCoreStereoscopicArcRotateCamera, StereoscopicArcRotateCamera: BabylonjsCoreStereoscopicArcRotateCamera,\r\n    vrDeviceOrientationArcRotateCamera: BabylonjsCoreVRDeviceOrientationArcRotateCamera, VRDeviceOrientationArcRotateCamera: BabylonjsCoreVRDeviceOrientationArcRotateCamera,\r\n    flyCamera: BabylonjsCoreFlyCamera, FlyCamera: BabylonjsCoreFlyCamera,\r\n    followCamera: BabylonjsCoreFollowCamera, FollowCamera: BabylonjsCoreFollowCamera,\r\n    arcFollowCamera: BabylonjsCoreArcFollowCamera, ArcFollowCamera: BabylonjsCoreArcFollowCamera,\r\n    shaderMaterial: BabylonjsCoreShaderMaterial, ShaderMaterial: BabylonjsCoreShaderMaterial,\r\n    texture: BabylonjsCoreTexture, Texture: BabylonjsCoreTexture,\r\n    multiMaterial: BabylonjsCoreMultiMaterial, MultiMaterial: BabylonjsCoreMultiMaterial,\r\n    pushMaterial: BabylonjsCorePushMaterial, PushMaterial: BabylonjsCorePushMaterial,\r\n    standardMaterial: BabylonjsCoreStandardMaterial, StandardMaterial: BabylonjsCoreStandardMaterial,\r\n    backgroundMaterial: BabylonjsCoreBackgroundMaterial, BackgroundMaterial: BabylonjsCoreBackgroundMaterial,\r\n    shadowLight: BabylonjsCoreShadowLight, ShadowLight: BabylonjsCoreShadowLight,\r\n    pbrBaseMaterial: BabylonjsCorePBRBaseMaterial, PBRBaseMaterial: BabylonjsCorePBRBaseMaterial,\r\n    pbrBaseSimpleMaterial: BabylonjsCorePBRBaseSimpleMaterial, PBRBaseSimpleMaterial: BabylonjsCorePBRBaseSimpleMaterial,\r\n    pbrMetallicRoughnessMaterial: BabylonjsCorePBRMetallicRoughnessMaterial, PBRMetallicRoughnessMaterial: BabylonjsCorePBRMetallicRoughnessMaterial,\r\n    pbrSpecularGlossinessMaterial: BabylonjsCorePBRSpecularGlossinessMaterial, PBRSpecularGlossinessMaterial: BabylonjsCorePBRSpecularGlossinessMaterial,\r\n    pbrMaterial: BabylonjsCorePBRMaterial, PBRMaterial: BabylonjsCorePBRMaterial,\r\n    nodeMaterial: BabylonjsCoreNodeMaterial, NodeMaterial: BabylonjsCoreNodeMaterial,\r\n    fluentMaterial: BabylonjsGuiFluentMaterial, FluentMaterial: BabylonjsGuiFluentMaterial,\r\n    directionalLight: BabylonjsCoreDirectionalLight, DirectionalLight: BabylonjsCoreDirectionalLight,\r\n    pointLight: BabylonjsCorePointLight, PointLight: BabylonjsCorePointLight,\r\n    spotLight: BabylonjsCoreSpotLight, SpotLight: BabylonjsCoreSpotLight,\r\n    hemisphericLight: BabylonjsCoreHemisphericLight, HemisphericLight: BabylonjsCoreHemisphericLight,\r\n    container: BabylonjsGuiContainer, Container: BabylonjsGuiContainer,\r\n    rectangle: BabylonjsGuiRectangle, Rectangle: BabylonjsGuiRectangle,\r\n    'babylon-button': BabylonjsGuiButton, Button: BabylonjsGuiButton,\r\n    selectionPanel: BabylonjsGuiSelectionPanel, SelectionPanel: BabylonjsGuiSelectionPanel,\r\n    scrollViewer: BabylonjsGuiScrollViewer, ScrollViewer: BabylonjsGuiScrollViewer,\r\n    'babylon-image': BabylonjsGuiImage, Image: BabylonjsGuiImage,\r\n    stackPanel: BabylonjsGuiStackPanel, StackPanel: BabylonjsGuiStackPanel,\r\n    virtualKeyboard: BabylonjsGuiVirtualKeyboard, VirtualKeyboard: BabylonjsGuiVirtualKeyboard,\r\n    'babylon-ellipse': BabylonjsGuiEllipse, Ellipse: BabylonjsGuiEllipse,\r\n    grid: BabylonjsGuiGrid, Grid: BabylonjsGuiGrid,\r\n    scrollViewerWindow: BabylonjsGui_ScrollViewerWindow, _ScrollViewerWindow: BabylonjsGui_ScrollViewerWindow,\r\n    checkbox: BabylonjsGuiCheckbox, Checkbox: BabylonjsGuiCheckbox,\r\n    colorPicker: BabylonjsGuiColorPicker, ColorPicker: BabylonjsGuiColorPicker,\r\n    inputText: BabylonjsGuiInputText, InputText: BabylonjsGuiInputText,\r\n    inputPassword: BabylonjsGuiInputPassword, InputPassword: BabylonjsGuiInputPassword,\r\n    'babylon-line': BabylonjsGuiLine, Line: BabylonjsGuiLine,\r\n    multiLine: BabylonjsGuiMultiLine, MultiLine: BabylonjsGuiMultiLine,\r\n    radioButton: BabylonjsGuiRadioButton, RadioButton: BabylonjsGuiRadioButton,\r\n    baseSlider: BabylonjsGuiBaseSlider, BaseSlider: BabylonjsGuiBaseSlider,\r\n    scrollBar: BabylonjsGuiScrollBar, ScrollBar: BabylonjsGuiScrollBar,\r\n    imageScrollBar: BabylonjsGuiImageScrollBar, ImageScrollBar: BabylonjsGuiImageScrollBar,\r\n    slider: BabylonjsGuiSlider, Slider: BabylonjsGuiSlider,\r\n    imageBasedSlider: BabylonjsGuiImageBasedSlider, ImageBasedSlider: BabylonjsGuiImageBasedSlider,\r\n    displayGrid: BabylonjsGuiDisplayGrid, DisplayGrid: BabylonjsGuiDisplayGrid,\r\n    container3D: BabylonjsGuiContainer3D, Container3D: BabylonjsGuiContainer3D,\r\n    volumeBasedPanel: BabylonjsGuiVolumeBasedPanel, VolumeBasedPanel: BabylonjsGuiVolumeBasedPanel,\r\n    cylinderPanel: BabylonjsGuiCylinderPanel, CylinderPanel: BabylonjsGuiCylinderPanel,\r\n    planePanel: BabylonjsGuiPlanePanel, PlanePanel: BabylonjsGuiPlanePanel,\r\n    scatterPanel: BabylonjsGuiScatterPanel, ScatterPanel: BabylonjsGuiScatterPanel,\r\n    spherePanel: BabylonjsGuiSpherePanel, SpherePanel: BabylonjsGuiSpherePanel,\r\n    stackPanel3D: BabylonjsGuiStackPanel3D, StackPanel3D: BabylonjsGuiStackPanel3D,\r\n    abstractButton3D: BabylonjsGuiAbstractButton3D, AbstractButton3D: BabylonjsGuiAbstractButton3D,\r\n    button3D: BabylonjsGuiButton3D, Button3D: BabylonjsGuiButton3D,\r\n    holographicButton: BabylonjsGuiHolographicButton, HolographicButton: BabylonjsGuiHolographicButton,\r\n    meshButton3D: BabylonjsGuiMeshButton3D, MeshButton3D: BabylonjsGuiMeshButton3D,\r\n    glowLayer: BabylonjsCoreGlowLayer, GlowLayer: BabylonjsCoreGlowLayer,\r\n    highlightLayer: BabylonjsCoreHighlightLayer, HighlightLayer: BabylonjsCoreHighlightLayer,\r\n    cubeTexture: BabylonjsCoreCubeTexture, CubeTexture: BabylonjsCoreCubeTexture,\r\n    rawCubeTexture: BabylonjsCoreRawCubeTexture, RawCubeTexture: BabylonjsCoreRawCubeTexture,\r\n    rawTexture: BabylonjsCoreRawTexture, RawTexture: BabylonjsCoreRawTexture,\r\n    proceduralTexture: BabylonjsCoreProceduralTexture, ProceduralTexture: BabylonjsCoreProceduralTexture,\r\n    customProceduralTexture: BabylonjsCoreCustomProceduralTexture, CustomProceduralTexture: BabylonjsCoreCustomProceduralTexture,\r\n    noiseProceduralTexture: BabylonjsCoreNoiseProceduralTexture, NoiseProceduralTexture: BabylonjsCoreNoiseProceduralTexture,\r\n    mirrorTexture: BabylonjsCoreMirrorTexture, MirrorTexture: BabylonjsCoreMirrorTexture,\r\n    multiRenderTarget: BabylonjsCoreMultiRenderTarget, MultiRenderTarget: BabylonjsCoreMultiRenderTarget,\r\n    refractionTexture: BabylonjsCoreRefractionTexture, RefractionTexture: BabylonjsCoreRefractionTexture,\r\n    multiviewRenderTarget: BabylonjsCoreMultiviewRenderTarget, MultiviewRenderTarget: BabylonjsCoreMultiviewRenderTarget,\r\n    videoTexture: BabylonjsCoreVideoTexture, VideoTexture: BabylonjsCoreVideoTexture,\r\n    dynamicTexture: BabylonjsCoreDynamicTexture, DynamicTexture: BabylonjsCoreDynamicTexture,\r\n    rawTexture3D: BabylonjsCoreRawTexture3D, RawTexture3D: BabylonjsCoreRawTexture3D,\r\n    rawTexture2DArray: BabylonjsCoreRawTexture2DArray, RawTexture2DArray: BabylonjsCoreRawTexture2DArray,\r\n    colorGradingTexture: BabylonjsCoreColorGradingTexture, ColorGradingTexture: BabylonjsCoreColorGradingTexture,\r\n    equiRectangularCubeTexture: BabylonjsCoreEquiRectangularCubeTexture, EquiRectangularCubeTexture: BabylonjsCoreEquiRectangularCubeTexture,\r\n    hdrCubeTexture: BabylonjsCoreHDRCubeTexture, HDRCubeTexture: BabylonjsCoreHDRCubeTexture,\r\n    htmlElementTexture: BabylonjsCoreHtmlElementTexture, HtmlElementTexture: BabylonjsCoreHtmlElementTexture\r\n};\r\nexport const intrinsicClassMap: object = {\r\n    dynamicTerrain: 'DynamicTerrain',\r\n    abstractScene: 'AbstractScene',\r\n    node: 'Node',\r\n    scene: 'Scene',\r\n    camera: 'Camera',\r\n    environmentHelper: 'EnvironmentHelper',\r\n    effectLayer: 'EffectLayer',\r\n    light: 'Light',\r\n    material: 'Material',\r\n    mesh: 'Mesh',\r\n    meshBuilder: 'MeshBuilder',\r\n    physicsImpostor: 'PhysicsImpostor',\r\n    advancedDynamicTexture: 'AdvancedDynamicTexture',\r\n    gui3DManager: 'GUI3DManager',\r\n    autoRotationBehavior: 'AutoRotationBehavior',\r\n    bouncingBehavior: 'BouncingBehavior',\r\n    framingBehavior: 'FramingBehavior',\r\n    attachToBoxBehavior: 'AttachToBoxBehavior',\r\n    fadeInOutBehavior: 'FadeInOutBehavior',\r\n    multiPointerScaleBehavior: 'MultiPointerScaleBehavior',\r\n    pointerDragBehavior: 'PointerDragBehavior',\r\n    sixDofDragBehavior: 'SixDofDragBehavior',\r\n    vrExperienceHelper: 'VRExperienceHelper',\r\n    shadowGenerator: 'ShadowGenerator',\r\n    baseTexture: 'BaseTexture',\r\n    control: 'Control',\r\n    textBlock: 'TextBlock',\r\n    control3D: 'Control3D',\r\n    transformNode: 'TransformNode',\r\n    abstractMesh: 'AbstractMesh',\r\n    renderTargetTexture: 'RenderTargetTexture',\r\n    targetCamera: 'TargetCamera',\r\n    freeCamera: 'FreeCamera',\r\n    touchCamera: 'TouchCamera',\r\n    universalCamera: 'UniversalCamera',\r\n    gamepadCamera: 'GamepadCamera',\r\n    anaglyphGamepadCamera: 'AnaglyphGamepadCamera',\r\n    stereoscopicGamepadCamera: 'StereoscopicGamepadCamera',\r\n    anaglyphUniversalCamera: 'AnaglyphUniversalCamera',\r\n    stereoscopicUniversalCamera: 'StereoscopicUniversalCamera',\r\n    deviceOrientationCamera: 'DeviceOrientationCamera',\r\n    vrDeviceOrientationFreeCamera: 'VRDeviceOrientationFreeCamera',\r\n    vrDeviceOrientationGamepadCamera: 'VRDeviceOrientationGamepadCamera',\r\n    anaglyphFreeCamera: 'AnaglyphFreeCamera',\r\n    stereoscopicFreeCamera: 'StereoscopicFreeCamera',\r\n    virtualJoysticksCamera: 'VirtualJoysticksCamera',\r\n    webVrFreeCamera: 'WebVRFreeCamera',\r\n    webXrCamera: 'WebXRCamera',\r\n    arcRotateCamera: 'ArcRotateCamera',\r\n    anaglyphArcRotateCamera: 'AnaglyphArcRotateCamera',\r\n    stereoscopicArcRotateCamera: 'StereoscopicArcRotateCamera',\r\n    vrDeviceOrientationArcRotateCamera: 'VRDeviceOrientationArcRotateCamera',\r\n    flyCamera: 'FlyCamera',\r\n    followCamera: 'FollowCamera',\r\n    arcFollowCamera: 'ArcFollowCamera',\r\n    shaderMaterial: 'ShaderMaterial',\r\n    texture: 'Texture',\r\n    multiMaterial: 'MultiMaterial',\r\n    pushMaterial: 'PushMaterial',\r\n    standardMaterial: 'StandardMaterial',\r\n    backgroundMaterial: 'BackgroundMaterial',\r\n    shadowLight: 'ShadowLight',\r\n    pbrBaseMaterial: 'PBRBaseMaterial',\r\n    pbrBaseSimpleMaterial: 'PBRBaseSimpleMaterial',\r\n    pbrMetallicRoughnessMaterial: 'PBRMetallicRoughnessMaterial',\r\n    pbrSpecularGlossinessMaterial: 'PBRSpecularGlossinessMaterial',\r\n    pbrMaterial: 'PBRMaterial',\r\n    nodeMaterial: 'NodeMaterial',\r\n    fluentMaterial: 'FluentMaterial',\r\n    directionalLight: 'DirectionalLight',\r\n    pointLight: 'PointLight',\r\n    spotLight: 'SpotLight',\r\n    hemisphericLight: 'HemisphericLight',\r\n    container: 'Container',\r\n    rectangle: 'Rectangle',\r\n    'babylon-button': 'Button',\r\n    selectionPanel: 'SelectionPanel',\r\n    scrollViewer: 'ScrollViewer',\r\n    'babylon-image': 'Image',\r\n    stackPanel: 'StackPanel',\r\n    virtualKeyboard: 'VirtualKeyboard',\r\n    'babylon-ellipse': 'Ellipse',\r\n    grid: 'Grid',\r\n    scrollViewerWindow: '_ScrollViewerWindow',\r\n    checkbox: 'Checkbox',\r\n    colorPicker: 'ColorPicker',\r\n    inputText: 'InputText',\r\n    inputPassword: 'InputPassword',\r\n    'babylon-line': 'Line',\r\n    multiLine: 'MultiLine',\r\n    radioButton: 'RadioButton',\r\n    baseSlider: 'BaseSlider',\r\n    scrollBar: 'ScrollBar',\r\n    imageScrollBar: 'ImageScrollBar',\r\n    slider: 'Slider',\r\n    imageBasedSlider: 'ImageBasedSlider',\r\n    displayGrid: 'DisplayGrid',\r\n    container3D: 'Container3D',\r\n    volumeBasedPanel: 'VolumeBasedPanel',\r\n    cylinderPanel: 'CylinderPanel',\r\n    planePanel: 'PlanePanel',\r\n    scatterPanel: 'ScatterPanel',\r\n    spherePanel: 'SpherePanel',\r\n    stackPanel3D: 'StackPanel3D',\r\n    abstractButton3D: 'AbstractButton3D',\r\n    button3D: 'Button3D',\r\n    holographicButton: 'HolographicButton',\r\n    meshButton3D: 'MeshButton3D',\r\n    glowLayer: 'GlowLayer',\r\n    highlightLayer: 'HighlightLayer',\r\n    cubeTexture: 'CubeTexture',\r\n    rawCubeTexture: 'RawCubeTexture',\r\n    rawTexture: 'RawTexture',\r\n    proceduralTexture: 'ProceduralTexture',\r\n    customProceduralTexture: 'CustomProceduralTexture',\r\n    noiseProceduralTexture: 'NoiseProceduralTexture',\r\n    mirrorTexture: 'MirrorTexture',\r\n    multiRenderTarget: 'MultiRenderTarget',\r\n    refractionTexture: 'RefractionTexture',\r\n    multiviewRenderTarget: 'MultiviewRenderTarget',\r\n    videoTexture: 'VideoTexture',\r\n    dynamicTexture: 'DynamicTexture',\r\n    rawTexture3D: 'RawTexture3D',\r\n    rawTexture2DArray: 'RawTexture2DArray',\r\n    colorGradingTexture: 'ColorGradingTexture',\r\n    equiRectangularCubeTexture: 'EquiRectangularCubeTexture',\r\n    hdrCubeTexture: 'HDRCubeTexture',\r\n    htmlElementTexture: 'HtmlElementTexture',\r\n    adtForMesh: 'ADTForMesh',\r\n    adtFullscreenUi: 'ADTFullscreenUI',\r\n    box: 'Box',\r\n    cylinder: 'Cylinder',\r\n    dashedLines: 'DashedLines',\r\n    decal: 'Decal',\r\n    disc: 'Disc',\r\n    extrudePolygon: 'ExtrudePolygon',\r\n    extrudeShape: 'ExtrudeShape',\r\n    extrudeShapeCustom: 'ExtrudeShapeCustom',\r\n    ground: 'Ground',\r\n    groundFromHeightMap: 'GroundFromHeightMap',\r\n    icoSphere: 'IcoSphere',\r\n    lathe: 'Lathe',\r\n    lines: 'Lines',\r\n    lineSystem: 'LineSystem',\r\n    plane: 'Plane',\r\n    'babylon-polygon': 'Polygon',\r\n    polyhedron: 'Polyhedron',\r\n    ribbon: 'Ribbon',\r\n    sphere: 'Sphere',\r\n    tiledBox: 'TiledBox',\r\n    tiledGround: 'TiledGround',\r\n    tiledPlane: 'TiledPlane',\r\n    torus: 'Torus',\r\n    torusKnot: 'TorusKnot',\r\n    tube: 'Tube'\r\n};\r\n\r\nexport function babylonClassFactory(importAlias: string): any {\r\n    return (classesMap as any)[importAlias];\r\n}\r\n","import React, { createContext, useContext } from 'react'\r\nimport {\r\n  Nullable,\r\n  Engine as BabylonJSEngine,\r\n  EngineOptions,\r\n  ThinEngine as BabylonJSThinEngine,\r\n  Observable,\r\n} from '@babylonjs/core'\r\n\r\n\r\n// TODO: copy engineOptions/antialias/etc and canvas options from original Scene.tsx\r\nexport interface WithBabylonJSContext {\r\n  engine: Nullable<BabylonJSEngine>\r\n  canvas: Nullable<HTMLCanvasElement | WebGLRenderingContext>\r\n}\r\n\r\n// TODO: build a fallback mechanism when typeof React.createContext !== 'function'\r\n// this will allow (16.0 <= react versions < 16.3) to work.\r\nexport const BabylonJSContext = createContext<WithBabylonJSContext>({\r\n  engine: null,\r\n  canvas: null\r\n})\r\n\r\ntype Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\r\n\r\nexport function withBabylonJS<\r\n  P extends { babylonJSContext: WithBabylonJSContext },\r\n  R = Omit<P, 'babylonJSContext'>\r\n  >(\r\n  Component: React.ComponentClass<P> | React.FunctionComponent<P>\r\n  ): React.FunctionComponent<R> {\r\n  return function BoundComponent(props: R) {\r\n    return (\r\n      <BabylonJSContext.Consumer>\r\n        {ctx => <Component {...props as any} babylonJSContext={ctx} />}\r\n      </BabylonJSContext.Consumer>\r\n    );\r\n  };\r\n}\r\n\r\nexport const useBabylonEngine = (): Nullable<BabylonJSEngine> => useContext(BabylonJSContext).engine\r\nexport const useBabylonCanvas = (): Nullable<HTMLCanvasElement | WebGLRenderingContext> => useContext(BabylonJSContext).canvas\r\n\r\nexport type EngineProps = {\r\n  babylonJSContext?: WithBabylonJSContext,\r\n  portalCanvas?: HTMLCanvasElement,\r\n  /**\r\n   * true to disable Server Side Rendering\r\n   */\r\n  noSSR?: boolean | React.ReactChild,\r\n  shadersRepository?: string,\r\n  engineOptions?: EngineOptions,\r\n  antialias?: boolean,\r\n  enableOfflineSupport?: boolean,\r\n  adaptToDeviceRatio?: boolean,\r\n  width?: number,\r\n  height?: number,\r\n  canvasStyle?: any,\r\n\r\n  /**\r\n   * By default touch-action: 'none' will be on the canvas.  Use this to disable.\r\n   */\r\n  touchActionNone?: boolean,\r\n  /**\r\n   * Useful if you want to attach CSS to the canvas by css #id selector.\r\n   */\r\n  canvasId?: string,\r\n  debug?: boolean,\r\n  // onCreated?: (engine: Engine) => void\r\n}\r\n\r\nexport type EngineState = {\r\n  canRender: boolean\r\n}\r\n\r\nclass Engine extends React.Component<EngineProps, EngineState> {\r\n\r\n  private _engine?: Nullable<BabylonJSEngine> = null;\r\n  private _canvas: Nullable<HTMLCanvasElement | WebGLRenderingContext> = null;\r\n\r\n  public onBeforeRenderLoopObservable: Observable<BabylonJSEngine> = new Observable<BabylonJSEngine>();\r\n  public onEndRenderLoopObservable: Observable<BabylonJSEngine> = new Observable<BabylonJSEngine>();\r\n\r\n  constructor(props: EngineProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      canRender: false\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this._engine = new BabylonJSEngine(\r\n      this._canvas,\r\n      this.props.antialias === true ? true : false, // default false\r\n      this.props.engineOptions,\r\n      this.props.adaptToDeviceRatio === true ? true : false // default false\r\n    )\r\n\r\n    this._engine.runRenderLoop(() => {\r\n      if (this.onBeforeRenderLoopObservable.hasObservers()) {\r\n        this.onBeforeRenderLoopObservable.notifyObservers(this._engine!);\r\n      }\r\n      this._engine!.scenes.forEach(scene => {\r\n        scene.render()\r\n      })\r\n      if (this.onEndRenderLoopObservable.hasObservers()) {\r\n        this.onEndRenderLoopObservable.notifyObservers(this._engine!);\r\n      }\r\n    })\r\n\r\n    this._engine.onContextLostObservable.add((eventData: BabylonJSThinEngine) => {\r\n      console.log('context loss observable from Engine: ', eventData);\r\n    })\r\n\r\n    window.addEventListener('resize', this.onResizeWindow)\r\n\r\n    this.setState({canRender: true});\r\n  }\r\n\r\n  onCanvasRef = (c : HTMLCanvasElement) => {\r\n    // We are not using the react.createPortal(...), as it adds a ReactDOM dependency, but also\r\n    // it was not flowing the context through to HOCs properly.\r\n    if (this.props.portalCanvas) {\r\n      this._canvas = document.getElementById('portal-canvas') as  HTMLCanvasElement\r\n      console.error('set canvas', this._canvas);\r\n    } else {\r\n      if (c) { // null when called from unmountComponent()\r\n        // c.addEventListener('mouseover', this.focus)\r\n        // c.addEventListener('mouseout', this.blur)\r\n        this._canvas = c\r\n      }\r\n    }\r\n    // console.error('onCanvas:', c); // trying to diagnose why HMR keep rebuilding entire Scene!  Look at ProxyComponent v4.\r\n  }\r\n\r\n  componentWillUnmount () {\r\n    window.removeEventListener('resize', this.onResizeWindow);\r\n  }\r\n\r\n  render () {\r\n    if (this.state.canRender === false && (this.props.noSSR !== undefined && this.props.noSSR !== false)) {\r\n      if (typeof this.props.noSSR === 'boolean') {\r\n        return null;\r\n      }\r\n      return this.props.noSSR;\r\n    }\r\n\r\n    let { touchActionNone, width, height, canvasStyle, canvasId, ...rest } = this.props\r\n\r\n    let opts: any = {}\r\n\r\n    if (touchActionNone !== false) {\r\n      opts['touch-action'] = 'none';\r\n    }\r\n\r\n    if (width !== undefined && height !== undefined) {\r\n      opts.width = width\r\n      opts.height = height\r\n    }\r\n\r\n    if (canvasId) {\r\n      opts.id = canvasId;\r\n    }\r\n\r\n    if (canvasStyle) {\r\n      opts.style = canvasStyle;\r\n    }\r\n\r\n    // TODO: this.props.portalCanvas does not need to render a canvas.\r\n    return <BabylonJSContext.Provider value={{ engine: this._engine!, canvas: this._canvas}}>\r\n      <canvas {...opts} ref={this.onCanvasRef}>\r\n      {this._engine !== null &&\r\n        this.props.children\r\n      }\r\n      </canvas>\r\n    </BabylonJSContext.Provider>\r\n  }\r\n\r\n  onResizeWindow = () => {\r\n    if (this._engine) {\r\n      this._engine.resize()\r\n    }\r\n  }\r\n}\r\n\r\nexport default Engine\r\n","import { IParticleSystem, Skeleton, AnimationGroup, AbstractMesh, Nullable, Vector3, BoundingInfo } from \"@babylonjs/core\"\r\nimport \"@babylonjs/loaders\"\r\n\r\nexport enum LoaderStatus {\r\n  Loading,\r\n  Loaded,\r\n  Error\r\n}\r\n\r\nexport class LoadedModel {\r\n  public status?: LoaderStatus\r\n  public rootMesh?: AbstractMesh\r\n  public errorMessage?: string\r\n  public loaderName?: string\r\n  public meshes?: AbstractMesh[]\r\n  public particleSystems?: IParticleSystem[]\r\n  public skeletons?: Skeleton[]\r\n  public animationGroups?: AnimationGroup[]\r\n  public scaleToDimension?: number\r\n\r\n  public get boundingInfo(): Nullable<BoundingInfo> {\r\n    if (!this.rootMesh) {\r\n      return null\r\n    }\r\n\r\n    // meshes are already parented to root mesh, so we do not need to look further.\r\n    let min: Nullable<Vector3> = null\r\n    let max: Nullable<Vector3> = null\r\n\r\n    this.rootMesh.getChildMeshes().forEach(childMesh => {\r\n      const { minimumWorld, maximumWorld } = childMesh.getBoundingInfo().boundingBox\r\n      if (min === null) {\r\n        min = minimumWorld\r\n      } else {\r\n        min = Vector3.Minimize(min, minimumWorld)\r\n      }\r\n\r\n      if (max === null) {\r\n        max = maximumWorld\r\n      } else {\r\n        max = Vector3.Maximize(max, maximumWorld)\r\n      }\r\n    })\r\n\r\n    if (min !== null && max != null) {\r\n      return new BoundingInfo(min, max)\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Clean up all resources.\r\n   */\r\n  public dispose() {\r\n    if (this.meshes) {\r\n      this.meshes.forEach(mesh => {\r\n        mesh.dispose(false /* not recursive */, true /* materials + textures */)\r\n      })\r\n      this.meshes = []\r\n    }\r\n\r\n    if (this.particleSystems) {\r\n      this.particleSystems.forEach(ps => {\r\n        // ps.stop();\r\n        ps.dispose()\r\n      })\r\n      this.particleSystems = []\r\n    }\r\n\r\n    if (this.skeletons) {\r\n      this.skeletons.forEach(skeleton => skeleton.dispose())\r\n      this.skeletons = []\r\n    }\r\n\r\n    if (this.animationGroups) {\r\n      this.animationGroups.forEach(animationGroup => animationGroup.dispose())\r\n      this.animationGroups = []\r\n    }\r\n  }\r\n}\r\n","import { Vector3, Color3, Color4 } from '@babylonjs/core'\r\nimport { PropertyUpdate, PropsHandler, PropChangeType } from \"./PropsHandler\"\r\nimport { CreatedInstance } from \"./CreatedInstance\"\r\n\r\nexport const applyUpdateToInstance = (hostInstance: any, update: PropertyUpdate, type: string | undefined): void => {\r\n  let target = update.target !== undefined ? hostInstance[update.target] : hostInstance\r\n\r\n  switch (update.changeType) {\r\n    case PropChangeType.Primitive:\r\n    case PropChangeType.FresnelParameters:\r\n    case PropChangeType.LambdaExpression:\r\n    case PropChangeType.Texture:\r\n      // console.log(` > ${type}: updating ${update.type} on ${update.propertyName} to ${update.value}`)\r\n      target[update.propertyName] = update.value;\r\n      break;\r\n    case PropChangeType.Vector3:\r\n      if (target[update.propertyName]) {\r\n        (target[update.propertyName] as Vector3).copyFrom(update.value);\r\n      } else if (update.value) {\r\n        target[update.propertyName] = update.value.clone();\r\n      } else {\r\n        target[update.propertyName] = update.value; // ie: undefined/null?\r\n      }\r\n      break\r\n    case PropChangeType.Color3:\r\n    case PropChangeType.Color4:\r\n      if (target[update.propertyName]) {\r\n        switch (update.changeType) {\r\n          case PropChangeType.Color3:\r\n            (target[update.propertyName] as Color3).copyFrom(update.value);\r\n            break;\r\n          case PropChangeType.Color4:\r\n            (target[update.propertyName] as Color4).copyFrom(update.value);\r\n            break;\r\n        }\r\n      } else if (update.value) {\r\n        target[update.propertyName] = update.value.clone();;\r\n      } else {\r\n        target[update.propertyName] = update.value;\r\n      }\r\n      break\r\n    case PropChangeType.Control:\r\n      target[update.propertyName] = update.value;\r\n      break;\r\n    case PropChangeType.NumericArray:\r\n      target[update.propertyName] = update.value;\r\n      break;\r\n    case PropChangeType.Observable:\r\n      target[update.propertyName].add(update.value);\r\n      break;\r\n    case PropChangeType.Method:\r\n      if (typeof target[update.propertyName] === \"function\") {\r\n        if (Array.isArray(update.value)) {\r\n          target[update.propertyName](...update.value)\r\n        } else if (Object(update.value) !== update.value) {\r\n          // primitive, undefined & null.  Comparison is 7x slower than instanceof check,\r\n          // TODO: should be: update.value === undefined || typeof(update.value) === 'number' || ...\r\n          target[update.propertyName](update.value)\r\n        } else {\r\n          // TODO: there is a bug here in that setTarget={new Vector3(0, 1, 0)} will throw an exception...\r\n          console.error('need to make sure this isn\\'t something like a Vector3 before destructuring')\r\n          target[update.propertyName](...Object.values(update.value))\r\n        }\r\n      } else {\r\n        console.error(`Cannot call [not a function] ${update.propertyName}(...) on:`, update.type, target)\r\n      }\r\n      break;\r\n    default:\r\n      console.error(`Unhandled property update of type ${update.changeType} -> ${update.type}`);\r\n      break;\r\n  }\r\n}\r\n\r\n/**\r\n * Only applied in this way immediately after instantiation (not on deltas)\r\n *\r\n * @param instance\r\n * @param props\r\n * @param scene\r\n */\r\nexport const applyInitialPropsToInstance = (instance: CreatedInstance<any>, props: any) => {\r\n  if (!instance.propsHandlers) {\r\n    return;\r\n  }\r\n\r\n  // console.log('applying initial props:', props);\r\n  let initPayload: PropertyUpdate[] = []\r\n  instance.propsHandlers.getPropsHandlers().forEach((propHandler: PropsHandler<any>) => {\r\n    // NOTE: this can actually be WRONG, because here we want to compare the props with the object.\r\n    // This is only needed right after object instantiation.\r\n    let handlerUpdates: PropertyUpdate[] | null = propHandler.getPropertyUpdates(\r\n      {}, // Here we will reapply things like 'name', so we could get default props from 'babylonObject'.\r\n      props\r\n    )\r\n    if (handlerUpdates !== null) {\r\n      initPayload.push(...handlerUpdates)\r\n    }\r\n  })\r\n\r\n  if (initPayload.length > 0) {\r\n    initPayload.forEach(update => {\r\n      applyUpdateToInstance(instance.hostInstance, update, instance.metadata!.className)\r\n    })\r\n  }\r\n}\r\n","import { Engine, Scene } from \"@babylonjs/core\"\r\nimport { CreatedInstance } from \"../CreatedInstance\"\r\nimport { LifecycleListener } from \"../LifecycleListener\"\r\n\r\n/**\r\n * This is a host component.  Much like a span or div for ReactDOM.render();\r\n */\r\nexport default class HostWithEventsFiber<T> implements LifecycleListener<T> {\r\n  private _scene: Scene\r\n  private _engine: Engine\r\n  private _hostContextData: any\r\n\r\n  private _onParented?: (scene: Scene, engine: Engine, parent: CreatedInstance<any>) => any\r\n  private _onChildAdded?: (scene: Scene, engine: Engine, child: CreatedInstance<any>, hostContextData: any) => any\r\n  private _onMount?: (scene: Scene, engine: Engine, instance: CreatedInstance<T>, hostContextData: any) => any\r\n  private _onUnmount?: (scene: Scene, engine: Engine, /*instance: CreatedInstance<any>,*/ hostContextData: any) => any\r\n\r\n  public constructor(scene: Scene, engine: Engine, props: any) {\r\n    this._scene = scene\r\n    this._engine = engine\r\n\r\n    if (props.onParented && typeof props.onParented === \"function\") {\r\n      this._onParented = props.onParented\r\n    }\r\n\r\n    if (props.onChildAdded && typeof props.onChildAdded === \"function\") {\r\n      this._onChildAdded = props.onChildAdded\r\n    }\r\n\r\n    if (props.onMount && typeof props.onMount === \"function\") {\r\n      this._onMount = props.onMount\r\n    }\r\n\r\n    if (props.onUnmount && typeof props.onUnmount === \"function\") {\r\n      this._onUnmount = props.onUnmount;\r\n    }\r\n  }\r\n\r\n  public onParented(parent: CreatedInstance<any> | undefined) {\r\n    if (parent !== undefined && this._onParented !== undefined) {\r\n      this._hostContextData = this._onParented(this._scene, this._engine, parent)\r\n    }\r\n  }\r\n\r\n  public onChildAdded(child: CreatedInstance<any>): void {\r\n    if (this._onChildAdded) {\r\n      this._hostContextData = this._onChildAdded(this._scene, this._engine, child, this._hostContextData)\r\n    }\r\n  }\r\n\r\n  public onMount(instance: CreatedInstance<T>): void {\r\n    if (this._onMount) {\r\n      this._hostContextData = this._onMount(this._scene, this._engine, instance, this._hostContextData)\r\n    }\r\n  }\r\n\r\n  public dispose(): void {\r\n    if (this._onUnmount) {\r\n      this._onUnmount(this._scene, this._engine, this._hostContextData)\r\n    }\r\n  }\r\n\r\n  public onUnmount(): void {/* empty */}\r\n}\r\n","// These are only used by the reconciler.  We export them as strings (as we do for all generated code as well)\r\n// For declaring your own custom components externally you just need the 'string' version from /exportedCustomComponents\r\nexport { default as HostWithEventsFiber } from \"./hostWithEventsFiber\"\r\n\r\nexport const HostWithEvents: string = \"HostWithEvents\"\r\n","import { CreatedInstance } from \"../CreatedInstance\"\r\nimport { LifecycleListener } from \"../LifecycleListener\"\r\nimport { Color3, Scene, StandardMaterial, Mesh } from \"@babylonjs/core\"\r\nimport { FiberAdvancedDynamicTextureProps } from \"../generatedProps\"\r\nimport { AdvancedDynamicTexture } from \"@babylonjs/gui/2D/advancedDynamicTexture\";\r\n\r\n\r\n\r\nexport default class AdvancedDynamicTextureLifecycleListener implements LifecycleListener<AdvancedDynamicTexture> {\r\n  protected props: FiberAdvancedDynamicTextureProps;\r\n  protected scene: Scene\r\n\r\n  constructor(scene: Scene, props: any) {\r\n    this.scene = scene\r\n    this.props = props\r\n  }\r\n\r\n  onParented(parent: CreatedInstance<any>, child: CreatedInstance<any>): any { /* empty */}\r\n\r\n  onChildAdded(child: CreatedInstance<any>, parent: CreatedInstance<any>): any { /* empty */}\r\n\r\n  onMount(instance: CreatedInstance<AdvancedDynamicTexture>): void {\r\n    this.addControls(instance)\r\n\r\n    if (instance.customProps.createForParentMesh) {\r\n      // console.log('for parent mesh', instance.parent ? instance.parent.babylonJsObject : 'error: no parent object')\r\n\r\n      let mesh: Mesh = instance.parent!.hostInstance // should crawl parent hierarchy for a mesh\r\n      // console.error('we will be attaching the mesh:', mesh.name, mesh);\r\n\r\n      const material = new StandardMaterial(\"AdvancedDynamicTextureMaterial\", mesh.getScene())\r\n      material.backFaceCulling = false\r\n      material.diffuseColor = Color3.Black()\r\n      material.specularColor = Color3.Black()\r\n\r\n      if(instance.hostInstance === undefined) {\r\n        console.error('missing instance')\r\n      } else {\r\n        if (this.props.hasAlpha) {\r\n          material.diffuseTexture = instance.hostInstance\r\n          material.emissiveTexture = instance.hostInstance\r\n          instance.hostInstance.hasAlpha = true\r\n        } else {\r\n          material.emissiveTexture = instance.hostInstance\r\n          material.opacityTexture = instance.hostInstance\r\n        }\r\n      }\r\n\r\n      mesh.material = material\r\n\r\n      // set to true unless explicitly not wanted.\r\n      // connects the texture to a hosting mesh to enable interactions\r\n      let supportPointerMove = (this.props as any).supportPointerMove !== false ? true : false\r\n\r\n      instance.hostInstance!.attachToMesh(mesh, supportPointerMove)\r\n    }\r\n  }\r\n\r\n  addControls(instance: CreatedInstance<AdvancedDynamicTexture>) {\r\n    // When there is a panel, it must be added before the children. Otherwise there is no UtilityLayer to attach to.\r\n    // This project before 'react-reconciler' was added from parent up the tree.  'react-reconciler' wants to do the opposite.\r\n    instance.children.forEach(child => {\r\n      if (child.metadata.isGUI2DControl === true) {\r\n        instance.hostInstance!.addControl(child.hostInstance)\r\n        child.state = { added: true }\r\n      }\r\n    })\r\n\r\n    if (instance.customProps.connectControlNames !== undefined && Array.isArray(instance.customProps.connectControlNames)) {\r\n      let controlNames: string[] = instance.customProps.connectControlNames\r\n      let root = instance\r\n      while (root.parent !== null) {\r\n        root = root.parent\r\n      }\r\n      this.connect(\r\n        instance,\r\n        root,\r\n        controlNames\r\n      )\r\n    }\r\n\r\n    instance.children.forEach(child => {\r\n      this.addControls(child)\r\n    })\r\n  }\r\n\r\n  connect(keyboard: CreatedInstance<any>, searchInstance: CreatedInstance<any>, controlNames: string[]) {\r\n    if (searchInstance.metadata.isGUI2DControl && searchInstance.hostInstance && controlNames.indexOf(searchInstance.hostInstance.name) !== -1) {\r\n      // console.log(keyboard.hostInstance, '.connect(->', searchInstance.hostInstance)\r\n      keyboard.hostInstance.connect(searchInstance.hostInstance)\r\n    }\r\n\r\n    searchInstance.children.forEach(child =>\r\n      this.connect(\r\n        keyboard,\r\n        child,\r\n        controlNames\r\n      )\r\n    )\r\n  }\r\n\r\n  onUnmount(): void {/* empty */}\r\n}\r\n\r\n/**\r\n * This is attached by convention in react-reconciler HostConfig.\r\n */\r\nexport class ADTFullscreenUILifecycleListener extends AdvancedDynamicTextureLifecycleListener {/* empty */}\r\n","import { CreatedInstance } from \"../CreatedInstance\"\r\nimport { LifecycleListener } from \"../LifecycleListener\"\r\nimport { Scene, Camera, Nullable, TargetCamera } from \"@babylonjs/core\"\r\n\r\nexport default class CameraLifecycleListener implements LifecycleListener<Camera> {\r\n  private props: any\r\n  private canvas: HTMLCanvasElement\r\n  private scene: Nullable<Scene>\r\n\r\n  constructor(scene: Nullable<Scene>, props: any, canvas: HTMLCanvasElement) {\r\n    this.props = props\r\n    this.canvas = canvas\r\n    this.scene = scene\r\n  }\r\n\r\n  onParented(parent: CreatedInstance<any>, child: CreatedInstance<any>): any {\r\n    if (parent.metadata.isNode && child.metadata.isNode) {\r\n      // TODO: consider add option for setParent(), which parents and maintains mesh pos/rot in world space\r\n      // child.hostInstance.setParent(parent.hostInstance)\r\n      child.hostInstance.parent = parent.hostInstance\r\n    }\r\n  }\r\n\r\n  onChildAdded(child: CreatedInstance<any>, parent: CreatedInstance<any>): any {/* empty */}\r\n\r\n  onMount(instance: CreatedInstance<any>): void {\r\n    if (instance.hostInstance === undefined) {\r\n      console.error('Missing instance');\r\n      return;\r\n    }\r\n\r\n    // prevent default unless explicitly specified.\r\n    const camera = instance.hostInstance as Camera\r\n    const noPreventDefault = this.props.noPreventDefault === false ? false : true\r\n\r\n    // console.log(\"camera.attachControl:\", camera, this.canvas, noPreventDefault)\r\n    // should be a custom property for autoAttaching?  Will be an issue for multiple cameras.\r\n    camera.attachControl(this.canvas, noPreventDefault)\r\n\r\n    if (instance.metadata.isTargetable && this.props.lockedTargetMeshName) {\r\n      if (this.scene === null) {\r\n        console.error(\"no scene for targeting\")\r\n      } else {\r\n        const targetCamera = camera as TargetCamera\r\n        targetCamera.lockedTarget = this.scene.getMeshByName(this.props.lockedTargetMeshName)\r\n      }\r\n    }\r\n  }\r\n\r\n  onUnmount(): void {/* empty */}\r\n}\r\n","import { Scene, VRExperienceHelper, EnvironmentHelper } from \"@babylonjs/core\"\r\nimport { CreatedInstance } from \"../CreatedInstance\"\r\nimport { LifecycleListener } from \"../LifecycleListener\"\r\n\r\nexport default class EnvironmentHelperLifecycleListener implements LifecycleListener<EnvironmentHelper> {\r\n  private props: any\r\n  private scene: Scene\r\n\r\n  constructor(scene: Scene, props: any) {\r\n    this.scene = scene\r\n    this.props = props\r\n  }\r\n\r\n  onParented(parent: CreatedInstance<any>, child: CreatedInstance<any>): any {/* empty */}\r\n\r\n  onChildAdded(child: CreatedInstance<any>, parent: CreatedInstance<any>): any {/* empty */}\r\n\r\n  onMount(instance: CreatedInstance<EnvironmentHelper>): void {\r\n    if (instance.hostInstance === undefined) {\r\n      console.error('Missing instance');\r\n      return;\r\n    }\r\n\r\n    // for TypeScript people use <... setMainColor={[mainColor]} />\r\n    if (this.props.mainColor) {\r\n      instance.hostInstance.setMainColor(this.props.mainColor)\r\n    }\r\n\r\n    if (this.props.teleportEnvironmentGround) {\r\n      console.error(\"need to enable teleportation to ground (also from VRExperienceHelper, so call order has no impact.\")\r\n    }\r\n  }\r\n\r\n  onUnmount(): void {/* empty */}\r\n}\r\n","import { CreatedInstance } from \"../CreatedInstance\"\r\nimport { LifecycleListener } from \"../LifecycleListener\"\r\nimport { Control } from '@babylonjs/gui/2D/controls/control'\r\nimport { VirtualKeyboard } from \"@babylonjs/gui/2D/controls/virtualKeyboard\"\r\n\r\nexport default class GUI2DControlLifecycleListener implements LifecycleListener<Control> {\r\n  onParented(parent: CreatedInstance<any>, child: CreatedInstance<any>): any {/* empty */}\r\n\r\n  onChildAdded(child: CreatedInstance<any>, parent: CreatedInstance<any>): any {/* empty */}\r\n\r\n  onMount(instance?: CreatedInstance<Control>): void {\r\n    if (instance === undefined) {\r\n      console.error('Missing instance');\r\n      return;\r\n    }\r\n\r\n    if (instance.customProps.defaultKeyboard === true) {\r\n      if (instance.hostInstance instanceof VirtualKeyboard) {\r\n        // TODO: Generate from factory method.  VirtualKeyboard.CreateDefaultLayout()\r\n        instance.hostInstance.addKeysRow([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"\\u2190\"])\r\n        instance.hostInstance.addKeysRow([\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"])\r\n        instance.hostInstance.addKeysRow([\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \";\", \"'\", \"\\u21B5\"])\r\n        instance.hostInstance.addKeysRow([\"\\u21E7\", \"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \",\", \".\", \"/\"])\r\n        instance.hostInstance.addKeysRow([\" \"], [{ width: \"200px\" }])\r\n      }\r\n    }\r\n\r\n    if (instance.state && instance.state.added === true) {\r\n      return;\r\n    }\r\n\r\n    let addedParent: CreatedInstance<any> | null = null\r\n\r\n    let tmp = instance.parent\r\n    while (tmp) {\r\n      if (tmp.metadata.isGUI2DControl) {\r\n        if (tmp.state && tmp.state.added === true) {\r\n          addedParent = tmp\r\n          break\r\n        }\r\n      }\r\n      tmp = tmp.parent\r\n    }\r\n\r\n    if (addedParent) {\r\n      this.addControls(addedParent)\r\n    }\r\n  }\r\n\r\n  addControls(instance: CreatedInstance<any>) {\r\n    instance.children.forEach(child => {\r\n      if (child.metadata.isGUI2DControl === true) {\r\n        // console.warn(\"calling \", instance.hostInstance.name, \".addControl(\", child.hostInstance.name, \")\")\r\n        instance.hostInstance.addControl(child.hostInstance)\r\n        child.state = { added: true }\r\n      }\r\n    })\r\n\r\n    if (instance.customProps.connectControlNames !== undefined && Array.isArray(instance.customProps.connectControlNames)) {\r\n      // let controlNames: string[] = instance.customProps.connectControlNames\r\n      let root = instance\r\n      while (root.parent !== null) {\r\n        root = root.parent\r\n      }\r\n    }\r\n\r\n    instance.children.forEach(child => {\r\n      this.addControls(child)\r\n    })\r\n  }\r\n\r\n  onUnmount(): void {/* empty */}\r\n}\r\n","import { Scene, AbstractMesh, Nullable } from \"@babylonjs/core\"\r\nimport { CreatedInstance } from \"../CreatedInstance\"\r\nimport { LifecycleListener } from \"../LifecycleListener\"\r\nimport { Control3D } from '@babylonjs/gui/3D/controls/control3D'\r\n\r\nexport default class GUI3DControlLifecycleListener implements LifecycleListener<Control3D> {\r\n  private scene: Nullable<Scene>\r\n\r\n  constructor(scene: Nullable<Scene>) {\r\n    this.scene = scene\r\n  }\r\n\r\n  onParented(parent: CreatedInstance<any>, child: CreatedInstance<any>): any {/* empty */}\r\n\r\n  onChildAdded(child: CreatedInstance<any>, parent: CreatedInstance<any>): any {/* empty */}\r\n\r\n  onMount(instance: CreatedInstance<Control3D>): void {\r\n    if (instance.state && instance.state.added === true) {\r\n      return\r\n    }\r\n\r\n    let addedParent: CreatedInstance<any> | null = null\r\n\r\n    let tmp = instance.parent\r\n    while (tmp) {\r\n      if (tmp.metadata.isGUI3DControl === true) {\r\n        if (tmp.state && tmp.state.added === true) {\r\n          addedParent = tmp\r\n          break\r\n        }\r\n      }\r\n      tmp = tmp.parent\r\n    }\r\n\r\n    if (addedParent) {\r\n      this.addControls(addedParent, addedParent)\r\n    }\r\n  }\r\n\r\n  addControls(instance: CreatedInstance<any>, last3DGuiControl: CreatedInstance<any>) {\r\n    const last3d: CreatedInstance<any> = instance.metadata.isGUI3DControl === true ? instance : last3DGuiControl\r\n\r\n    instance.children.forEach(child => {\r\n      if (last3d.customProps.childrenAsContent === true) {\r\n        last3d.hostInstance.content = child.hostInstance // child.hostInstance will be GUI.Control (ie: 2D)\r\n        child.state = { added: true, content: true }\r\n      } else if (child.metadata.isGUI3DControl === true) {\r\n        last3d.hostInstance.addControl(child.hostInstance)\r\n\r\n        // NOTE: this must be called after .addControl(child.hostInstance).\r\n        if (child.customProps.linkToTransformNodeByName) {\r\n          const toLinkTo: Nullable<AbstractMesh> = this.scene!.getMeshByName(child.customProps.linkToTransformNodeByName)\r\n          if (toLinkTo !== null) {\r\n            child.hostInstance.linkToTransformNode(toLinkTo)\r\n            // toLinkTo.computeWorldMatrix()\r\n          } else {\r\n            console.error(\r\n              \"linkToTransformNode cannot find Mesh:\",\r\n              instance.customProps.linkToTransformNodeByName,\r\n              \" and does not have a scene listener for added meshes.\" + \" Declare Mesh earlier or add an issue on github (TransformNode does not work).\"\r\n            )\r\n          }\r\n        }\r\n\r\n        child.state = { added: true }\r\n      }\r\n    })\r\n\r\n    if (instance.children.length > 0) {\r\n      instance.children.forEach(child => {\r\n        if (!child.state || child.state.content !== true) {\r\n          if (child.state && child.state.added === true && child.customProps.onControlAdded) {\r\n            child.customProps.onControlAdded(child)\r\n          }\r\n\r\n          this.addControls(child, last3d)\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  onUnmount(): void {/* empty */}\r\n}\r\n","import { CreatedInstance } from \"../CreatedInstance\"\r\nimport { LifecycleListener } from \"../LifecycleListener\"\r\nimport { AbstractMesh, Nullable, Scene } from \"@babylonjs/core\"\r\nimport { GUI3DManager } from '@babylonjs/gui/3D/gui3DManager'\r\nexport default class GUI3DManagerLifecycleListener implements LifecycleListener<GUI3DManager> {\r\n  private scene: Scene\r\n\r\n  constructor(scene: Scene) {\r\n    this.scene = scene\r\n  }\r\n\r\n  onParented(parent: CreatedInstance<any>): void {/* empty */}\r\n  onChildAdded(child: CreatedInstance<any>): void {/* empty */}\r\n  onMount(instance?: CreatedInstance<GUI3DManager>): void {\r\n    if (instance === undefined) {\r\n      console.error('Missing instance');\r\n      return;\r\n    }\r\n\r\n    this.addControls(instance, instance)\r\n  }\r\n\r\n  /**\r\n   * We may have BoundComponents inbetween gui3d controls.\r\n   */\r\n  addControls(instance: CreatedInstance<any>, last3DGuiControl: CreatedInstance<any>) {\r\n    // When there is a panel, it must be added before the children. Otherwise there is no UtilityLayer to attach to.\r\n    // This project before 'react-reconciler' was added from parent up the tree.  'react-reconciler' wants to do the opposite.\r\n    instance.children.forEach((child: CreatedInstance<any>) => {\r\n      if (child.metadata.isGUI3DControl === true) {\r\n        if (last3DGuiControl.customProps.childrenAsContent === true) {\r\n          last3DGuiControl.hostInstance.content = child.hostInstance\r\n          child.state = { added: true, content: true }\r\n        } else {\r\n          last3DGuiControl.hostInstance.addControl(child.hostInstance)\r\n          child.state = { added: true }\r\n\r\n          // NOTE: this must be called after .addControl(child.hostInstance).\r\n          if (child.customProps.linkToTransformNodeByName) {\r\n            const toLinkTo: Nullable<AbstractMesh> = this.scene.getMeshByName(child.customProps.linkToTransformNodeByName)\r\n            if (toLinkTo !== null) {\r\n              child.hostInstance.linkToTransformNode(toLinkTo)\r\n            } else {\r\n              console.error(\r\n                \"linkToTransformNode cannot find \",\r\n                instance.customProps.linkToTransformNodeByName,\r\n                \" and does not have a scene listener for added meshes.  Declare earlier or add an issue on github.\"\r\n              )\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      if (child.state && child.state.added === true && child.customProps.onControlAdded) {\r\n        child.customProps.onControlAdded(child)\r\n      }\r\n\r\n      if (!child.state || child.state.content !== true) {\r\n        const last3d: CreatedInstance<any> = child.metadata.isGUI3DControl === true ? child : last3DGuiControl\r\n        this.addControls(child, last3d)\r\n      }\r\n    })\r\n\r\n    // Here we can now do a transform with an anchor point.\r\n    console.error(\"transform gui3dmanager anchor missing\")\r\n  }\r\n\r\n  onUnmount(): void { /* empty */ }\r\n}\r\n","import { CreatedInstance } from \"../CreatedInstance\"\r\nimport { LifecycleListener } from \"../LifecycleListener\"\r\nimport { Scene, AbstractMesh } from \"@babylonjs/core\"\r\nimport { Material } from '@babylonjs/core/Materials'\r\n\r\nexport default class MaterialsLifecycleListener implements LifecycleListener<Material> {\r\n  onCreated(instance: CreatedInstance<Material>, scene: Scene) {\r\n    if (instance.customProps.attachToMeshesByName) {\r\n      if (!Array.isArray(instance.customProps.attachToMeshesByName)) {\r\n        console.error(\"AttachToMeshesByName must be an array (of strings).\", instance.customProps.attachToMeshesByName)\r\n        return\r\n      }\r\n\r\n      if (instance.hostInstance === undefined) {\r\n        console.error('instance not assigned');\r\n        return;\r\n      }\r\n\r\n      let meshNamesToAttachTo: string[] = instance.customProps.attachToMeshesByName.slice(0)\r\n\r\n      // TODO: also need a listener for models or if we want to add a predicate:\r\n      scene.onNewMeshAddedObservable.add((mesh: AbstractMesh) => {\r\n        if (meshNamesToAttachTo.indexOf(mesh.name) >= 0) {\r\n          setTimeout(() => {\r\n            mesh.material = instance.hostInstance!\r\n          }, 0)\r\n        }\r\n      })\r\n\r\n      scene.meshes.forEach((mesh: AbstractMesh) => {\r\n        if (meshNamesToAttachTo.indexOf(mesh.name) >= 0) {\r\n          mesh.material = instance.hostInstance!\r\n        }\r\n      })\r\n    }\r\n  }\r\n  onParented(parent: CreatedInstance<any>) {/* empty */}\r\n  onChildAdded(child: CreatedInstance<any>) {/* empty */}\r\n  onMount(instance?: CreatedInstance<Material>) {\r\n    if (instance === undefined) {\r\n      console.error('Missing instance');\r\n      return;\r\n    }\r\n\r\n    if (!instance.customProps.attachToMeshesByName) {\r\n      let material = instance.hostInstance\r\n      let tmp: CreatedInstance<any> | null = instance.parent\r\n\r\n      while (tmp !== null) {\r\n        if (tmp.metadata && tmp.metadata.acceptsMaterials === true) {\r\n          if (instance.customProps.assignTo) {\r\n            const propsList: string[] = instance.customProps.assignTo.split('.');\r\n            let propToAssign = tmp.hostInstance;\r\n            propsList.forEach((prop: string, index: number) => {\r\n              if (propToAssign[prop] === undefined) {\r\n                // create property if it doesn't exist.\r\n                console.warn('Assign to created property', prop, 'on', propToAssign)\r\n                propToAssign[prop] = {}\r\n              }\r\n\r\n              if (index === propsList.length - 1) {\r\n                propToAssign[prop] = material;\r\n              } else {\r\n                propToAssign = propToAssign[prop]\r\n              }\r\n            })\r\n          } else {\r\n            tmp.hostInstance.material = material\r\n          }\r\n          break\r\n        }\r\n        tmp = tmp.parent\r\n      }\r\n    }\r\n  }\r\n\r\n  onUnmount(): void {/* empty */}\r\n}\r\n","import { Scene, Vector3, SceneLoaderProgressEvent, AbstractMesh, Mesh } from \"@babylonjs/core\"\r\nimport { LoadedModel } from \"./Model\"\r\nimport { FiberMeshPropsHandler, FiberAbstractMeshPropsHandler, FiberTransformNodePropsHandler, FiberNodePropsHandler } from \"../generatedCode\"\r\nimport BasePropsHandler from \"../BasePropsHandler\"\r\nimport { UpdatePayload, PropsHandler, PropertyUpdate } from \"../PropsHandler\"\r\n\r\nexport type ModelProps = {\r\n  meshNames?: any\r\n  receiveShadows?: boolean\r\n  rootUrl: string\r\n  sceneFilename: string\r\n  pluginExtension?: string // currently not used\r\n  position?: Vector3\r\n  scaling?: Vector3\r\n  rotation?: Vector3\r\n  showBoundingBox?: boolean\r\n\r\n  /**\r\n   * Only used on init.  Will not update dynamically (scaling will update dynamically and override this)\r\n   */\r\n  scaleToDimension?: number\r\n  onModelLoaded?: (model: LoadedModel) => void\r\n  onModelError?: (model: LoadedModel) => void\r\n  onLoadProgress?: (event: SceneLoaderProgressEvent) => void\r\n  onCreated?: (rootMesh: AbstractMesh) => void\r\n}\r\n\r\nexport class FiberModel extends BasePropsHandler<ModelProps> {\r\n  constructor() {\r\n    super([new ModelPropsHandler()])\r\n  }\r\n}\r\n\r\nexport class ModelPropsHandler implements PropsHandler<ModelProps> {\r\n  getPropertyUpdates(oldProps: ModelProps, newProps: ModelProps): UpdatePayload {\r\n    const propsHandlers: PropsHandler<any>[] = [\r\n      new FiberMeshPropsHandler(),\r\n      new FiberAbstractMeshPropsHandler(),\r\n      new FiberTransformNodePropsHandler(),\r\n      new FiberNodePropsHandler()\r\n    ]\r\n\r\n    let meshUpdates: PropertyUpdate[] = []\r\n    propsHandlers.forEach(propHandler => {\r\n      // NOTE: this is actually WRONG, because here we want to compare the props with the object.\r\n      let handlerUpdates: PropertyUpdate[] | null = propHandler.getPropertyUpdates(oldProps, newProps)\r\n      if (handlerUpdates !== null) {\r\n        meshUpdates.push(...handlerUpdates)\r\n      }\r\n    })\r\n\r\n    if (meshUpdates.length === 0) {\r\n      return null\r\n    }\r\n\r\n    // add target\r\n    meshUpdates.forEach(propertyUpdate => (propertyUpdate.target = \"rootMesh\"))\r\n    return meshUpdates\r\n  }\r\n}\r\n","import { HasPropsHandlers, PropsHandler } from \"./PropsHandler\"\r\n\r\n/**\r\n * TODO: Integrate this into the generated code, which duplicates for every class.\r\n */\r\nexport default class BasePropsHandler<U> implements HasPropsHandlers<U> {\r\n  private propsHandlers: PropsHandler<U>[]\r\n\r\n  constructor(propsHandlers: PropsHandler<U>[]) {\r\n    this.propsHandlers = propsHandlers\r\n  }\r\n\r\n  getPropsHandlers(): PropsHandler<U>[] {\r\n    return this.propsHandlers\r\n  }\r\n\r\n  addPropsHandler(propHandler: PropsHandler<U>): void {\r\n    this.propsHandlers.push(propHandler)\r\n  }\r\n}\r\n","import {\r\n  Scene,\r\n  IParticleSystem,\r\n  Skeleton,\r\n  AnimationGroup,\r\n  AbstractMesh,\r\n  SceneLoader,\r\n  Nullable,\r\n  ISceneLoaderPlugin,\r\n  ISceneLoaderPluginAsync,\r\n  SceneLoaderProgressEvent\r\n} from \"@babylonjs/core\"\r\nimport \"@babylonjs/loaders\"\r\nimport { applyUpdateToInstance } from \"../UpdateInstance\"\r\nimport { CreatedInstance } from \"../CreatedInstance\"\r\nimport { LifecycleListener } from \"../LifecycleListener\"\r\n\r\nimport { LoaderStatus, LoadedModel, ModelPropsHandler } from \"../model\"\r\nimport { UpdatePayload } from \"../PropsHandler\"\r\n\r\n/**\r\n * This listener has no underlying babylonjs type.  We are handling loading a 3D model with underlying mesh(es).\r\n */\r\nexport default class ModelLifecycleListener implements LifecycleListener<LoadedModel> {\r\n  private props: any\r\n  private scene: Scene\r\n\r\n  constructor(scene: Scene, props: any) {\r\n    this.props = props\r\n    this.scene = scene\r\n  }\r\n\r\n  onParented(parent: CreatedInstance<any>, child: CreatedInstance<any>): any { /* empty */}\r\n\r\n  onChildAdded(child: CreatedInstance<any>, parent: CreatedInstance<any>): any { /* empty */}\r\n\r\n  onMount(instance: CreatedInstance<LoadedModel>): void {\r\n    let loadedModel = new LoadedModel()\r\n\r\n    loadedModel.status = LoaderStatus.Loading\r\n    instance.hostInstance = loadedModel\r\n\r\n    let loader: Nullable<ISceneLoaderPlugin | ISceneLoaderPluginAsync> = SceneLoader.ImportMesh(\r\n      undefined,\r\n      this.props.rootUrl,\r\n      this.props.sceneFilename,\r\n      this.scene,\r\n      (meshes: AbstractMesh[], particleSystems: IParticleSystem[], skeletons: Skeleton[], animationGroups: AnimationGroup[]): void => {\r\n        loadedModel.rootMesh = new AbstractMesh(this.props.sceneFilename + \"-root-model\", this.scene)\r\n        loadedModel.rootMesh.alwaysSelectAsActiveMesh = true\r\n\r\n        loadedModel.meshes = []\r\n        meshes.forEach(mesh => {\r\n          loadedModel.meshes!.push(mesh)\r\n\r\n          // leave meshes already parented to maintain model hierarchy:\r\n          if (!mesh.parent) {\r\n            mesh.parent = loadedModel.rootMesh!\r\n          }\r\n          if (this.props.receiveShadows === true) {\r\n            mesh.receiveShadows = true\r\n          }\r\n        })\r\n        loadedModel.particleSystems = particleSystems\r\n        loadedModel.skeletons = skeletons\r\n        loadedModel.animationGroups = animationGroups\r\n\r\n        if (this.props.onModelLoaded) {\r\n          this.props.onModelLoaded(loadedModel)\r\n        }\r\n\r\n        loadedModel.status = LoaderStatus.Loaded\r\n\r\n        // we want to trigger after mesh is loaded (ie: position/rotation)\r\n        const updates: UpdatePayload = new ModelPropsHandler().getPropertyUpdates({ rootUrl: \"\", sceneFilename: \"\" }, this.props)\r\n\r\n        if (updates !== null) {\r\n          updates.forEach(update => applyUpdateToInstance(instance.hostInstance, update, \"model\"))\r\n        }\r\n\r\n        if (this.props.scaleToDimension && loadedModel && loadedModel.scaleToDimension !== this.props.scaleToDimension) {\r\n          const boundingInfo = loadedModel.boundingInfo // will be null when no meshes are loaded\r\n          if (boundingInfo) {\r\n            const longestDimension = Math.max(\r\n              Math.abs(boundingInfo.minimum.x - boundingInfo.maximum.x),\r\n              Math.abs(boundingInfo.minimum.y - boundingInfo.maximum.y),\r\n              Math.abs(boundingInfo.minimum.z - boundingInfo.maximum.z)\r\n            )\r\n\r\n            const dimension = this.props.scaleToDimension / longestDimension\r\n\r\n            loadedModel.rootMesh.scaling.scaleInPlace(dimension)\r\n            loadedModel.scaleToDimension = this.props.scaleToDimension\r\n          }\r\n        }\r\n      },\r\n      (event: SceneLoaderProgressEvent): void => {\r\n        if (this.props.onLoadProgress) {\r\n          this.props.onLoadProgress(event)\r\n        }\r\n      },\r\n      (scene: Scene, message: string, exception?: any): void => {\r\n        loadedModel.status = LoaderStatus.Error\r\n        loadedModel.errorMessage = `error: ${message} -> ${exception ? exception.message : \"no exception\"}`\r\n        if (this.props.onModelError) {\r\n          this.props.onModelError(loadedModel)\r\n        }\r\n      },\r\n      this.props.pluginExtension\r\n    )\r\n\r\n    if (loader) {\r\n      loadedModel.loaderName = loader.name\r\n    } else {\r\n      loadedModel.loaderName = \"no loader found\"\r\n    }\r\n  }\r\n\r\n  onUnmount(): void {/* empty */}\r\n}\r\n","import { CreatedInstance } from \"../CreatedInstance\"\r\nimport { LifecycleListener } from \"../LifecycleListener\"\r\nimport { Scene, Nullable } from \"@babylonjs/core\"\r\nimport { PropertyUpdate } from \"../PropsHandler\"\r\nimport { applyUpdateToInstance, applyInitialPropsToInstance } from \"../UpdateInstance\"\r\n\r\nexport default abstract class DeferredCreationLifecycleListener<T> implements LifecycleListener<T> {\r\n\r\n  constructor(protected scene: Scene, private props: any) {/* empty */}\r\n\r\n  abstract onParented(parent: CreatedInstance<any>, child: CreatedInstance<any>): any;\r\n\r\n  abstract onChildAdded(child: CreatedInstance<any>, parent: CreatedInstance<any>): any;\r\n\r\n  /**\r\n   * Not part of LifecycleListener interface - needed by template method 'onMount'.\r\n   */\r\n  abstract createInstance: (instance: CreatedInstance<T>, scene: Scene, props: any) => Nullable<T>;\r\n\r\n  onMount(instance: CreatedInstance<T>): void {\r\n    const createdInstance = this.createInstance(instance, this.scene, this.props);\r\n    if (createdInstance === undefined) {\r\n        console.warn('was unable to create deferred instance');\r\n    } else {\r\n        // Meed to assign deferred props (from delayed creation) or they are lost:\r\n        if (instance.deferredCreationProps && instance.propsHandlers) {\r\n            applyInitialPropsToInstance(instance, instance.deferredCreationProps);\r\n        } else {\r\n        console.warn('cannot assign deferred props.  they are lost.');\r\n        }\r\n        instance.deferredCreationProps = undefined;\r\n    }\r\n  }\r\n\r\n  abstract onUnmount(): void;\r\n}\r\n","import { CreatedInstance } from \"../CreatedInstance\"\r\nimport { IPhysicsEnabledObject, Nullable, Scene, PhysicsImpostor, PhysicsImpostorParameters } from \"@babylonjs/core\"\r\nimport DeferredCreationLifecycleListener from \"./DeferredCreationLifecycleListener\";\r\n\r\n/**\r\n * There is a lot going on in the PhysicsImpostor constructor, so we delay instantiation so that we have a target\r\n * 'object' before creation.\r\n */\r\nexport default class PhysicsImpostorLifecycleListener extends DeferredCreationLifecycleListener<PhysicsImpostor> {\r\n\r\n  private _parent: IPhysicsEnabledObject | undefined;\r\n\r\n  constructor(scene: Scene, props: any) {\r\n    super(scene, props)\r\n  }\r\n\r\n  createInstance = (instance: CreatedInstance<PhysicsImpostor>, scene: Scene, props: any) : Nullable<PhysicsImpostor> => {\r\n    if (!this._parent) {\r\n      return null;\r\n    }\r\n    // these should be set from the props handler.  TODO: test.\r\n    const options: PhysicsImpostorParameters = props._options // constructor has a default { mass: 0 }\r\n\r\n    instance.hostInstance = new PhysicsImpostor(this._parent, props.type, options, this.scene!);\r\n    instance.hostInstance.object = this._parent;\r\n    (this._parent as any).physicsImpostor = instance.hostInstance;\r\n    // TODO: need to assign deferredCreationProps (@see ShadowGeneratorLifecycleListener).\r\n    \r\n    return instance.hostInstance;\r\n  }\r\n\r\n  onParented(parent: CreatedInstance<any>, child: CreatedInstance<any>): any {\r\n      // IPhysicsEnabledObject requires only position and rotationQuaternion\r\n      if (parent.hostInstance.position === undefined || parent.hostInstance.rotationQuaternion === undefined) {\r\n          console.warn('PhysicsImpostor is parented to an element that does not appear to implement IPhysicsEnabledObject');\r\n      }\r\n      this._parent = parent.hostInstance;  \r\n  }\r\n\r\n  onChildAdded(child: CreatedInstance<any>, parent: CreatedInstance<any>): any { /* empty */ }\r\n\r\n  onUnmount(): void {/* empty */}\r\n}\r\n","import { CreatedInstance } from \"../CreatedInstance\"\r\nimport { ShadowGenerator, Scene, AbstractMesh, Observer, Nullable } from \"@babylonjs/core\"\r\nimport DeferredCreationLifecycleListener from \"./DeferredCreationLifecycleListener\"\r\n\r\nexport default class ShadowGeneratorLifecycleListener extends DeferredCreationLifecycleListener<ShadowGenerator> {\r\n \r\n  private onMeshAddedObservable: Nullable<Observer<AbstractMesh>> = null;\r\n  private onMeshRemovedObservable: Nullable<Observer<AbstractMesh>> = null;\r\n\r\n  constructor(scene: Scene, props: any) {\r\n    super(scene, props)\r\n  }\r\n\r\n  createInstance = (instance: CreatedInstance<ShadowGenerator>, scene: Scene, props: any) : Nullable<ShadowGenerator> => {\r\n    let tmp: CreatedInstance<any> | null = instance.parent\r\n    let result: Nullable<ShadowGenerator> = null;\r\n\r\n    while (tmp !== null) {\r\n      if (tmp.metadata.isShadowLight) {\r\n        // console.log(\"Creating ShadowGenerator.  size:\", this.props.mapSize, \"light\", tmp.hostInstance)\r\n        instance.hostInstance = result = new ShadowGenerator(props.mapSize, tmp.hostInstance, props.useFullFloatFirst)\r\n        break\r\n      }\r\n      tmp = tmp.parent\r\n    }\r\n\r\n    if (instance.hostInstance === undefined) {\r\n      console.error(\"ShadowGenerator has no light source.\");\r\n      return null;\r\n    }\r\n\r\n    if (instance.customProps.shadowCasters) {\r\n      if (!Array.isArray(instance.customProps.shadowCasters)) {\r\n        console.error(\"Shadow casters must be an array (of strings).\", instance.customProps.shadowCasters);\r\n        return null;\r\n      }\r\n\r\n      let shadowCasters: string[] = instance.customProps.shadowCasters;\r\n\r\n      // TODO: also need a listener for models or if we want to add a predicate:\r\n      this.onMeshAddedObservable = scene.onNewMeshAddedObservable.add((mesh: AbstractMesh) => {\r\n        if (shadowCasters.indexOf(mesh.name) >= 0) {\r\n          instance.hostInstance!.addShadowCaster(mesh);\r\n        }\r\n      })\r\n\r\n      this.onMeshRemovedObservable = scene.onMeshRemovedObservable.add((mesh: AbstractMesh) => {\r\n        if (shadowCasters.indexOf(mesh.name) >= 0) {\r\n          instance.hostInstance!.removeShadowCaster(mesh);\r\n        }\r\n      });\r\n\r\n      scene.meshes.forEach((mesh: AbstractMesh) => {\r\n        if (shadowCasters.indexOf(mesh.name) >= 0) {\r\n          instance.hostInstance!.addShadowCaster(mesh);\r\n        }\r\n      })\r\n    } else if (instance.customProps.shadowCastersExcluding) {\r\n      if (!Array.isArray(instance.customProps.shadowCastersExcluding)) {\r\n        console.error(\"Shadow casters excluding must be an array (of strings).\", instance.customProps.shadowCastersExcluding);\r\n      } else {\r\n        let shadowCastersExcluding: string[] = instance.customProps.shadowCastersExcluding;\r\n\r\n        // TODO: also need a listener for models or if we want to add a predicate:\r\n        this.onMeshAddedObservable = scene.onNewMeshAddedObservable.add((mesh: AbstractMesh) => {\r\n          if (shadowCastersExcluding.indexOf(mesh.name) === -1) {\r\n            instance.hostInstance!.addShadowCaster(mesh);\r\n          }\r\n        })\r\n        \r\n        this.onMeshRemovedObservable = scene.onMeshRemovedObservable.add((mesh: AbstractMesh) => {\r\n          if (shadowCastersExcluding.indexOf(mesh.name) === -1) {\r\n            instance.hostInstance!.removeShadowCaster(mesh);\r\n          }\r\n        });\r\n\r\n        scene.meshes.forEach((mesh: AbstractMesh) => {\r\n          if (shadowCastersExcluding.indexOf(mesh.name) === -1) {\r\n            instance.hostInstance!.addShadowCaster(mesh);\r\n          }\r\n        })\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  onParented(parent: CreatedInstance<any>, child: CreatedInstance<any>): any {/* empty */}\r\n\r\n  onChildAdded(child: CreatedInstance<any>, parent: CreatedInstance<any>): any {/* empty */}\r\n\r\n  onUnmount(): void {\r\n    if (this.onMeshAddedObservable !== null) {\r\n      this.scene.onNewMeshAddedObservable.remove(this.onMeshAddedObservable);\r\n      this.onMeshAddedObservable = null;\r\n    }\r\n\r\n    if (this.onMeshRemovedObservable !== null) {\r\n      this.scene.onMeshRemovedObservable.remove(this.onMeshRemovedObservable);\r\n      this.onMeshRemovedObservable = null;\r\n    }\r\n  }\r\n}\r\n","import React from \"react\"\r\nimport { Texture } from \"@babylonjs/core/Materials/Textures\"\r\n\r\ninterface SkyboxProps {\r\n  rootUrl: string\r\n  size?: number\r\n  name?: string\r\n}\r\n\r\nconst Skybox: React.FC<SkyboxProps> = (props: SkyboxProps) => \r\n   <box name={name ? `skybox-${name}` : 'skybox'} size={props.size ?? 100} infiniteDistance={true} renderingGroupId={0}>\r\n     <standardMaterial name={name ? `skybox-material-${name}` : 'skybox-material'} backFaceCulling={false} disableLighting={true}>\r\n       <cubeTexture key={`cube-texture-${props.rootUrl}`} rootUrl={props.rootUrl} coordinatesMode={Texture.SKYBOX_MODE} assignTo={'reflectionTexture'} />\r\n     </standardMaterial>\r\n   </box>\r\n\r\nexport default Skybox\r\n","import { Scene } from '@babylonjs/core'\r\nimport { UpdatePayload, PropertyUpdate, PropsHandler, PropChangeType } from \"../PropsHandler\"\r\n\r\n// This does not work when declared component with \"lockedTargetMeshName\" is before the mesh with that name.\r\n// Need to wait for full commit mount of entire tree, so use in conjunction with LifecycleListner is best option.\r\nexport default class TargetPropsHandler implements PropsHandler<any> {\r\n\r\n  constructor(private scene: Scene) {}\r\n\r\n  getPropertyUpdates(oldProps: any, newProps: any): UpdatePayload {\r\n    const propertyUpdates: PropertyUpdate[] = []\r\n    if (!oldProps.lockedTargetMeshName || oldProps.lockedTargetMeshName !== newProps.lockedTargetMeshName) {\r\n      if (typeof newProps.lockedTargetMeshName === \"string\") {\r\n        propertyUpdates.push({\r\n          type: \"BabylonjsCoreMesh\",\r\n          value: this.scene.getMeshByName(newProps.lockedTargetMeshName),\r\n          changeType: PropChangeType.Primitive,\r\n          propertyName: \"lockedTarget\"\r\n        })\r\n      }\r\n    }\r\n\r\n    return propertyUpdates\r\n  }\r\n}\r\n","/**\r\n * Assign value to an object property\r\n *\r\n * @param value: What you are assigning\r\n * @param target: Target to assign value to\r\n * @param propertyPath Where to assign value to on target (path to assign.  ie: \"baseTexture\" or \"mesh.material\")\r\n *\r\n */\r\nexport function assignProperty(value: any, target: any, propertyPath: string) {\r\n  const propsList: string[] = propertyPath.split('.');\r\n\r\n  propsList.forEach((prop: string, index: number) => {\r\n    if (target[prop] === undefined) {\r\n      // create property if it doesn't exist.\r\n      console.warn(`Created property ${prop} on: (from ${propsList})`, target)\r\n      target[prop] = {}\r\n    }\r\n\r\n    if (index === propsList.length - 1) {\r\n      target[prop] = value;\r\n    } else {\r\n      target = target[prop]\r\n    }\r\n  })\r\n}\r\n\r\n","import { LifecycleListener } from \"../LifecycleListener\"\r\nimport { CreatedInstance } from \"../CreatedInstance\"\r\nimport { Texture } from '@babylonjs/core'\r\nimport {assignProperty} from \"../helper/property\";\r\n\r\nexport default class TexturesLifecycleListener implements LifecycleListener<Texture> {\r\n  onParented(parent: CreatedInstance<any>) {/* empty */}\r\n  onChildAdded(child: CreatedInstance<any>) {/* empty */}\r\n  onMount(instance: CreatedInstance<Texture>) {\r\n    const {assignTo} = instance.customProps;\r\n    const texture = instance.hostInstance;\r\n\r\n    let tmp: CreatedInstance<any> | null = instance.parent\r\n\r\n    while (tmp !== null) {\r\n      if (tmp.metadata && tmp.metadata.isMaterial === true) {\r\n        if (assignTo) {\r\n          assignProperty(texture, tmp.hostInstance, assignTo);\r\n        } else {\r\n          // maybe below case is more common, so let it default\r\n          tmp.hostInstance.diffuseTexture = texture;\r\n        }\r\n        break\r\n      }\r\n      tmp = tmp.parent\r\n    }\r\n  }\r\n  onUnmount(): void {/* empty */}\r\n}\r\n","import { LifecycleListener } from \"../LifecycleListener\"\r\nimport { CreatedInstance } from \"../CreatedInstance\"\r\nimport { VRExperienceHelper } from \"@babylonjs/core\"\r\n\r\nexport default class VRExperienceHelperLifecycleListener implements LifecycleListener<VRExperienceHelper> {\r\n  private props: any\r\n\r\n  constructor(props: any) {\r\n    this.props = props\r\n  }\r\n\r\n  onParented(parent: CreatedInstance<any>, child: CreatedInstance<any>): any {/* empty */}\r\n\r\n  onChildAdded(child: CreatedInstance<any>, parent: CreatedInstance<any>): any {/* empty */}\r\n\r\n  onMount(instance: CreatedInstance<VRExperienceHelper>): void {\r\n    if (this.props.enableInteractions) {\r\n        instance.hostInstance!.enableInteractions()\r\n    }\r\n  }\r\n\r\n  onUnmount(): void {/* empty */}\r\n}\r\n","import { CreatedInstance } from \"../CreatedInstance\"\r\nimport { LifecycleListener } from \"../LifecycleListener\"\r\nimport { Node } from '@babylonjs/core/node'\r\n\r\nexport default class NodeLifecycleListener implements LifecycleListener<Node> {\r\n    onParented(parent: CreatedInstance<any>, child: CreatedInstance<any>) {\r\n        if (parent.metadata.isNode && child.metadata.isNode) {\r\n            // TODO: consider add option for setParent(), which parents and maintains mesh pos/rot in world space\r\n            // child.hostInstance.setParent(parent.hostInstance)\r\n            child.hostInstance.parent = parent.hostInstance\r\n          }\r\n    }\r\n    onChildAdded(parent: CreatedInstance<any>, child: CreatedInstance<any>) {/* empty */}\r\n    onMount(instance: CreatedInstance<Node>) {/* empty */}\r\n    onUnmount(): void {/* empty */}\r\n}\r\n","import { CreatedInstance } from \"../CreatedInstance\"\r\nimport { LifecycleListener } from \"../LifecycleListener\"\r\nimport {Behavior, IBehaviorAware, Nullable} from \"@babylonjs/core\";\r\n\r\nexport default class BehaviorLifecycleListener implements LifecycleListener<Behavior<any>> {\r\n  private behaviorAware: Nullable<IBehaviorAware<any>> = null;\r\n  private behavior: Nullable<Behavior<any>> = null;\r\n\r\n  onParented(parent: CreatedInstance<any>, child: CreatedInstance<any>) {\r\n    if (parent.metadata.isNode && parent.hostInstance?.addBehavior /* TODO: verify if this needs to be a mesh */ && child.metadata.isBehavior /* always true? */) {\r\n      parent.hostInstance.addBehavior(child.hostInstance);\r\n      this.behaviorAware = parent.hostInstance\r\n      this.behavior = child.hostInstance\r\n    } else {\r\n      console.warn('Could not locate IBehaviorAware on Behavior parent.')\r\n    }\r\n  }\r\n  onChildAdded(parent: CreatedInstance<any>, child: CreatedInstance<any>) {/* empty */}\r\n  onMount(instance: CreatedInstance<Behavior<any>>) {/* empty */}\r\n  onUnmount(): void {\r\n    if (this.behaviorAware) {\r\n      this.behaviorAware.removeBehavior(this.behavior!);\r\n    }\r\n  }\r\n}\r\n","export interface GeneratedParameter {\r\n  name: string\r\n  type: string | GeneratedParameter[]\r\n  optional: boolean\r\n}\r\n\r\nexport class CreationType {\r\n  public static readonly FactoryMethod: string = \"FactoryMethod\"\r\n  public static readonly Constructor: string = \"Constructor\"\r\n}\r\n\r\nexport interface CreateInfo {\r\n  libraryLocation: string // ie: `${libraryLocation}`\r\n  /**\r\n   * so far only '@babylonjs/core', '@babylonjs/gui', or 'BABYLONEXT' (for Terrain)\r\n   */\r\n  namespace: string\r\n  factoryMethod?: string // required for 'Factory' creation type.\r\n  creationType: string // TODO: enum\r\n  parameters: GeneratedParameter[]\r\n}\r\n","import ReactReconciler, { HostConfig } from \"react-reconciler\"\r\nimport {Scene, Engine, Nullable, Node} from '@babylonjs/core'\r\nimport * as BABYLONEXT from \"./extensions\"\r\nimport * as GENERATED from './generatedCode'\r\nimport * as CUSTOM_HOSTS from \"./customHosts\"\r\nimport * as CUSTOM_COMPONENTS from \"./customComponents\"\r\n\r\nimport { FiberModel, LoadedModel } from \"./model\"\r\nimport { CreatedInstance, CreatedInstanceMetadata, CustomProps } from \"./CreatedInstance\"\r\nimport { HasPropsHandlers, PropertyUpdate, UpdatePayload, PropsHandler } from \"./PropsHandler\"\r\nimport { LifecycleListener } from \"./LifecycleListener\"\r\nimport { GeneratedParameter, CreateInfo, CreationType } from \"./codeGenerationDescriptors\"\r\nimport { applyUpdateToInstance, applyInitialPropsToInstance } from \"./UpdateInstance\"\r\n\r\n// ** TODO: switch to node module 'scheduler', but compiler is not finding 'require()' exports currently...\r\ntype RequestIdleCallbackHandle = any\r\ntype RequestIdleCallbackOptions = {\r\n  timeout: number\r\n}\r\ntype RequestIdleCallbackDeadline = {\r\n  readonly didTimeout: boolean\r\n  timeRemaining: (() => number)\r\n}\r\n\r\ndeclare global {\r\n  interface Window {\r\n    requestIdleCallback: ((callback: ((deadline: RequestIdleCallbackDeadline) => void), opts?: RequestIdleCallbackOptions) => RequestIdleCallbackHandle)\r\n    cancelIdleCallback: ((handle: RequestIdleCallbackHandle) => void)\r\n  }\r\n}\r\n// ** END WINDOW\r\n\r\ntype HostCreatedInstance<T> = CreatedInstance<T> | undefined\r\n\r\ntype Props = {\r\n  scene: Scene\r\n} & any\r\n\r\nexport type Container = {\r\n  engine: Nullable<Engine>\r\n  canvas: Nullable<HTMLCanvasElement | WebGLRenderingContext>\r\n  scene: Nullable<Scene>\r\n  rootInstance: CreatedInstance<any>\r\n}\r\n\r\ntype HostContext = {} & Container\r\ntype TimeoutHandler = number | undefined\r\ntype NoTimeout = number\r\n\r\nfunction createCreatedInstance<T, U extends HasPropsHandlers<any>>(\r\n  className: string,\r\n  hostInstance: T,\r\n  propsHandlers: U,\r\n  metadata: CreatedInstanceMetadata,\r\n  customProps?: CustomProps,\r\n  lifecycleListener?: LifecycleListener<T>\r\n): CreatedInstance<T> {\r\n  let createdMetadata = metadata\r\n\r\n  // TODO: move how this is generated as a boolean to a metadata on objects themselves (and the next 3 lines!).\r\n  if ((propsHandlers as any).isTargetable === true) {\r\n    createdMetadata.isTargetable = true\r\n  }\r\n\r\n  return {\r\n    hostInstance,\r\n    metadata: createdMetadata,\r\n    parent: null, // set later in lifecycle\r\n    children: [], // set later in lifecycle\r\n    propsHandlers,\r\n    lifecycleListener,\r\n    customProps\r\n  } as CreatedInstance<T>\r\n}\r\n\r\n/**\r\n * remove instance's children recursively\r\n *\r\n * @param parentInstance\r\n * @param child\r\n */\r\nfunction removeChild(parentInstance: CreatedInstance<any>, child: CreatedInstance<any>) {\r\n  if (child) {\r\n    const {hostInstance} = child;\r\n\r\n    if (child.lifecycleListener) {\r\n      child.lifecycleListener.onUnmount();\r\n    }\r\n\r\n    if (child.metadata.isNode) {\r\n      (hostInstance as Node).parent = null;\r\n    } else if (child.metadata.isGUI3DControl === true) {\r\n      console.error(\"3D remove control not implemented.\")\r\n    }\r\n\r\n    if (parentInstance.metadata && parentInstance.metadata.isGUI2DControl === true && child.metadata.isGUI2DControl === true) {\r\n      // NOTE: the if statement should be || and we may need to walk the tree to remove.\r\n      parentInstance.hostInstance.removeControl(child.hostInstance)\r\n    }\r\n\r\n    if(child.children) {\r\n      removeRecursive(child.children, child);\r\n    }\r\n\r\n    if (typeof child.hostInstance.dispose === \"function\") {\r\n      hostInstance.dispose() // TODO: Consider adding metadata/descriptors as some dispose methods have optional args.\r\n    }\r\n\r\n    // fix: old version rootInstance.children was not cleaned, so the children array maybe huge over time\r\n    parentInstance.children = parentInstance.children.filter(ci => ci !== child)\r\n    child.parent = null\r\n  }\r\n}\r\n\r\n/**\r\n * remove child recursive\r\n */\r\nfunction removeRecursive(array: any, parent:any, clone: boolean = false) {\r\n  if (array) {\r\n    const target = clone ? [...array] : array;\r\n    target.forEach((child:any) => removeChild(parent, child));\r\n  }\r\n}\r\n\r\nconst ReactBabylonJSHostConfig: HostConfig<\r\n  string,\r\n  Props,\r\n  Container,\r\n  HostCreatedInstance<any>,\r\n  {},\r\n  {},\r\n  {},\r\n  HostContext,\r\n  UpdatePayload,\r\n  {},\r\n  TimeoutHandler,\r\n  NoTimeout\r\n> & {\r\n   hideInstance: (instance: HostCreatedInstance<any>) => void;\r\n   unhideInstance: (instance: HostCreatedInstance<any>, props:Props) => void;\r\n} = {\r\n  // This has the reconciler include in call chain ie: appendChild, removeChild\r\n  get supportsMutation(): boolean {\r\n    return true\r\n  },\r\n\r\n  now: () => {\r\n    return Date.now() // TODO: use performance.now\r\n  },\r\n\r\n  // multiple renderers concurrently render using the same context objects. E.g. React DOM and React ART on the\r\n  // same page. DOM is the primary renderer; ART is the secondary renderer.\r\n  get isPrimaryRenderer(): boolean {\r\n    return false\r\n  },\r\n\r\n  get supportsPersistence(): boolean {\r\n    return false\r\n  },\r\n\r\n  // TODO: see if this will allow ie: improved HMR support.  Need to implement a lot of currently optional methods.\r\n  get supportsHydration(): boolean {\r\n    return false\r\n  },\r\n\r\n  // this enables refs\r\n  getPublicInstance: (instance: any) => {\r\n    return instance\r\n  },\r\n\r\n  getRootHostContext: (rootContainerInstance: Container): HostContext => {\r\n    // this is the context you pass to your chilren, as parameter 'parentHostContext' from \"root\".\r\n    // So, opportunity to share context here via HostConfig further up tree.\r\n    return {\r\n      canvas: rootContainerInstance.canvas,\r\n      engine: rootContainerInstance.engine,\r\n      scene: rootContainerInstance.scene,\r\n      rootInstance: {\r\n        hostInstance: undefined,\r\n        metadata: {\r\n          className: \"rootContainer\",\r\n          namespace: \"ignore\"\r\n        },\r\n        parent: null,\r\n        children: [], // we add root notes here\r\n        customProps: {}\r\n      } as CreatedInstance<any>\r\n    }\r\n  },\r\n\r\n  // this is the context you pass down to children.  without this root will not be available to attach to in appendChildToContainer.\r\n  getChildHostContext: (parentHostContext: HostContext, type: string, rootContainerInstance: Container): HostContext => {\r\n    return parentHostContext\r\n  },\r\n\r\n  prepareUpdate(\r\n    instance: HostCreatedInstance<any>,\r\n    type: string,\r\n    oldProps: Props,\r\n    newProps: Props,\r\n    rootContainerInstance: Container,\r\n    hostContext: HostContext\r\n  ): UpdatePayload {\r\n    if (!instance || (instance.metadata && instance.metadata.customType === true)) {\r\n      return null\r\n    }\r\n    let updatePayload: PropertyUpdate[] = []\r\n\r\n    // Only custom types will not have a fiber object to handle props changes\r\n    instance.propsHandlers!.getPropsHandlers().forEach((propHandler: PropsHandler<any>) => {\r\n      let handlerUpdates: PropertyUpdate[] | null = propHandler.getPropertyUpdates(\r\n        oldProps,\r\n        newProps\r\n      )\r\n      if (handlerUpdates !== null) {\r\n        updatePayload.push(...handlerUpdates)\r\n      }\r\n    })\r\n\r\n    return updatePayload.length === 0 ? null : updatePayload\r\n  },\r\n\r\n  /**\r\n   * This is called when something is dynamically added to root (not on initial appendChildToContainer)\r\n   */\r\n  insertInContainerBefore(container: Container, child: CreatedInstance<any>, beforeChild: CreatedInstance<any>) {\r\n    // same implementation as appendChildToContainer\r\n    if (child) {\r\n      // doubly link child to root.  we don't care about order - ie: 'beforeChild'\r\n      container.rootInstance.children.push(child)\r\n      child.parent = container.rootInstance\r\n    } else {\r\n      console.error(\"insertInContainerBefore. No child:\", child)\r\n    }\r\n  },\r\n\r\n  createInstance: (\r\n    type: string,\r\n    props: Props,\r\n    rootContainerInstance: Container,\r\n    hostContext: HostContext,\r\n    internalInstanceHandle: Object\r\n  ): CreatedInstance<any> | undefined => {\r\n    // TODO: Make a registry like React Native host config or just build a map in /customHosts/index.ts.\r\n    const customTypes: string[] = [CUSTOM_HOSTS.HostWithEvents]\r\n\r\n    // TODO: Check source for difference between hostContext and rootContainerInstance.\r\n    const { canvas, engine, scene } = rootContainerInstance\r\n\r\n    if (customTypes.indexOf(type) !== -1) {\r\n      let metadata = {\r\n        className: type,\r\n        customType: true,\r\n        ...props.metadata\r\n      }\r\n\r\n      let createdInstance: CreatedInstance<null> = {\r\n        hostInstance: null,\r\n        metadata,\r\n        parent: null,\r\n        children: [],\r\n        propsHandlers: undefined,\r\n        customProps: {},\r\n        lifecycleListener: new (CUSTOM_HOSTS as any)[type + \"Fiber\"](scene, engine, props)\r\n      }\r\n\r\n      // onCreated and other lifecycle hooks are not called for built-in host\r\n      return createdInstance\r\n    }\r\n\r\n    // so far this is the only non-babylonJS host component, but otherwise a more generic solution will be needed:\r\n    if (type.toLowerCase() === \"model\") {\r\n      let createdInstance: CreatedInstance<LoadedModel> = {\r\n        hostInstance: new LoadedModel() /* this is reassigned in Lifecycle Listener */,\r\n        metadata: {\r\n          className: \"Model\"\r\n        },\r\n        parent: null,\r\n        children: [],\r\n        propsHandlers: new FiberModel() as any,\r\n        lifecycleListener: new CUSTOM_COMPONENTS.ModelLifecycleListener(scene! /* should always be available */, props),\r\n        customProps: {}\r\n      }\r\n\r\n      // onCreated and other lifecycle hooks are not called for built-in host\r\n      return createdInstance\r\n    }\r\n\r\n    // some types (ie: button) are called 'babylonjs-button'.\r\n    const underlyingClassName = (GENERATED.intrinsicClassMap as any)[type] || type;\r\n\r\n    const classDefinition = (GENERATED as any)[`Fiber${underlyingClassName}`]\r\n\r\n    if (classDefinition === undefined) {\r\n      throw new Error(`Cannot generate type '${type}/${underlyingClassName}' inside 'react-babylonjs' (ie: no DOM rendering on HTMLCanvas)`)\r\n    }\r\n\r\n    let createInfoArgs: CreateInfo = classDefinition.CreateInfo\r\n    let metadata: CreatedInstanceMetadata = classDefinition.Metadata\r\n\r\n    // console.log(`creating: ${createInfoArgs.namespace}.${type}`)\r\n    let generatedParameters: GeneratedParameter[] = createInfoArgs.parameters\r\n\r\n    // console.log(\"generated params:\", generatedParameters)\r\n\r\n    let args = generatedParameters.map(generatedParameter => {\r\n      if (Array.isArray(generatedParameter.type)) {\r\n        // TODO: if all props are missing, warn if main prop (ie: options) is required.\r\n        let newParameter = {} as any\r\n        generatedParameter.type.forEach(subParameter => {\r\n          let subPropValue = props[subParameter.name]\r\n          if (subPropValue === undefined && subParameter.optional === false && generatedParameter.optional === false) {\r\n            console.warn(\"Missing a required secondary property:\", subParameter.name)\r\n          } else {\r\n            newParameter[subParameter.name] = subPropValue\r\n          }\r\n        })\r\n        return newParameter\r\n      } else {\r\n        let value = props[generatedParameter.name]\r\n        if (value === undefined) {\r\n          // NOTE: we removed the hosted Scene component, which needs (generatedParameter.type == \"BabylonjsCoreEngine\")\r\n          // SceneOrEngine type is Scene\r\n          if (generatedParameter.type.includes(\"BabylonjsCoreScene\") || (generatedParameter.type === \"any\" && generatedParameter.name === \"scene\")) {\r\n            // MeshBuild.createSphere(name: string, options: {...}, scene: any)\r\n            // console.log('Assigning scene to:', type, generatedParameter)\r\n            value = scene\r\n          } else if (generatedParameter.optional === false) {\r\n            console.warn(`required parameter for ${type} unassigned -> ${generatedParameter.name}:${generatedParameter.type}`);\r\n          }\r\n        }\r\n\r\n        if (value === undefined && generatedParameter.optional === false) {\r\n          console.warn(`On ${type} you are missing a non-optional parameter '${generatedParameter.name}' of type '${generatedParameter.type}'`)\r\n        }\r\n\r\n        return value\r\n      }\r\n    })\r\n\r\n    let babylonObject: any | undefined = undefined\r\n\r\n    if (createInfoArgs.creationType === CreationType.FactoryMethod) {\r\n      // console.warn(`creating from Factory: ${createInfoArgs.libraryLocation}.${createInfoArgs.factoryMethod}(...args).  args:`, args)\r\n      babylonObject = GENERATED.babylonClassFactory(createInfoArgs.libraryLocation)[createInfoArgs.factoryMethod!](...args)\r\n    } else {\r\n      if (metadata.delayCreation !== true) {\r\n        if(createInfoArgs.namespace.startsWith('@babylonjs/')) {\r\n            const clazz: any = GENERATED.babylonClassFactory(type);\r\n            if (clazz === undefined) {\r\n              throw new Error(`Cannot generate '${type}' (react-babylonjs):`);\r\n            }\r\n            babylonObject = new clazz(...args)\r\n        } else if (createInfoArgs.namespace.startsWith('./extensions/')) {\r\n            const extClassName = (GENERATED.intrinsicClassMap as any)[type] || type;\r\n            babylonObject = new (BABYLONEXT as any)[extClassName](...args)\r\n        } else {\r\n            console.error(\"metadata defines (or does not) a namespace that is known\", createInfoArgs.namespace)\r\n        }\r\n      }\r\n    }\r\n\r\n    // Developer accessible lifecycle phase.  ie: access propery/method exposed in props.\r\n    if (typeof props.onCreated === \"function\") {\r\n      props.onCreated(babylonObject)\r\n    }\r\n\r\n    const fiberObject: HasPropsHandlers<any> = new (GENERATED as any)[`Fiber${underlyingClassName}`]()\r\n\r\n    let lifecycleListener: LifecycleListener<any> | undefined = undefined\r\n\r\n    // TODO: Add these to just the 'type' of component they apply to.\r\n    let customProps: CustomProps = {\r\n      childrenAsContent: props.childrenAsContent === true, // ie: Button3D.container instead of .addControl()\r\n      createForParentMesh: props.createForParentMesh === true, // AdvancedDynamicTexture attached to parent mesh (TODO: add forMeshByName=\"\")\r\n      onControlAdded: typeof props.onControlAdded === \"function\" ? props.onControlAdded : undefined,\r\n      connectControlNames: props.connectControlNames, // VirtualKeyboard to connect inputs by name.\r\n      defaultKeyboard: props.defaultKeyboard === true,\r\n      linkToTransformNodeByName: props.linkToTransformNodeByName,\r\n      shadowCasters: props.shadowCasters,\r\n      shadowCastersExcluding: props.shadowCastersExcluding,\r\n      attachToMeshesByName: props.attachToMeshesByName, // for materials - otherwise will attach to first parent that accepts materials\r\n      assignTo: props.assignTo // here a lifecycle listener can dynamically attach to another property (ie: Mesh to DynamicTerrain -> 'mesh.material')\r\n    }\r\n\r\n    // Consider these being dynamically attached to a list, much like PropsHandlers<T>\r\n    if (metadata.isMaterial === true) {\r\n      lifecycleListener = new CUSTOM_COMPONENTS.MaterialsLifecycleListener()\r\n    } else if (metadata.isGUI3DControl === true) {\r\n      lifecycleListener = new CUSTOM_COMPONENTS.GUI3DControlLifecycleListener(scene)\r\n    } else if (metadata.isGUI2DControl === true) {\r\n      lifecycleListener = new CUSTOM_COMPONENTS.GUI2DControlLifecycleListener()\r\n    } else if (metadata.isTexture === true) {\r\n      lifecycleListener = new CUSTOM_COMPONENTS.TexturesLifecycleListener()\r\n    } else if (metadata.isCamera === true) {\r\n      lifecycleListener = new CUSTOM_COMPONENTS.CameraLifecycleListener(scene, props, canvas as HTMLCanvasElement)\r\n    } else if (metadata.isNode) {\r\n      lifecycleListener = new CUSTOM_COMPONENTS.NodeLifecycleListener();\r\n    } else if (metadata.isBehavior) {\r\n      lifecycleListener = new CUSTOM_COMPONENTS.BehaviorLifecycleListener();\r\n    }\r\n\r\n    // here we dynamically assign listeners for specific types.\r\n    // TODO: need to double-check because we are using 'camelCase'\r\n    if ((CUSTOM_COMPONENTS as any)[underlyingClassName + \"LifecycleListener\"] !== undefined) {\r\n      lifecycleListener = new (CUSTOM_COMPONENTS as any)[underlyingClassName + \"LifecycleListener\"](scene, props)\r\n    }\r\n\r\n    let createdReference = createCreatedInstance(underlyingClassName, babylonObject, fiberObject, metadata, customProps, lifecycleListener)\r\n\r\n    if (lifecycleListener && lifecycleListener.onCreated) {\r\n      lifecycleListener.onCreated(createdReference, scene!)\r\n    }\r\n\r\n    // Here we dynamically attach known props handlers.  Will be adding more in code generation for GUI - also for lifecycle mgmt.\r\n    if (createdReference.metadata && createdReference.metadata.isTargetable === true) {\r\n      fiberObject.addPropsHandler(new CUSTOM_COMPONENTS.TargetPropsHandler(scene!))\r\n    }\r\n\r\n    if (metadata.delayCreation !== true) {\r\n      applyInitialPropsToInstance(createdReference, props);\r\n    } else {\r\n      createdReference.deferredCreationProps = props;\r\n    }\r\n    return createdReference\r\n  },\r\n\r\n  shouldDeprioritizeSubtree: (type: string, props: Props): boolean => {\r\n    return false\r\n  },\r\n\r\n  hideInstance(instance: HostCreatedInstance<any>) {},\r\n\r\n  unhideInstance(instance: HostCreatedInstance<any>, props: Props) {},\r\n\r\n  createTextInstance: (): any => {\r\n    return undefined\r\n  },\r\n\r\n  scheduleDeferredCallback(callback: (deadline: RequestIdleCallbackDeadline) => void, opts?: RequestIdleCallbackOptions | undefined): any {\r\n    return window.requestIdleCallback(callback, opts) // ReactDOMHostConfig has: unstable_scheduleCallback as scheduleDeferredCallback\r\n  },\r\n\r\n  cancelDeferredCallback(handle: any): void {\r\n    return window.cancelIdleCallback(handle)\r\n  },\r\n\r\n  setTimeout(handler: (...args: any[]) => void, timeout: number): TimeoutHandler {\r\n    return window.setTimeout(handler)\r\n  },\r\n\r\n  clearTimeout(handle?: number | undefined): void {\r\n    window.clearTimeout(handle)\r\n  },\r\n\r\n  // https://github.com/facebook/react/blob/master/packages/react-dom/src/client/ReactDOMHostConfig.js#L288\r\n  noTimeout: -1,\r\n\r\n  // Called based on return value of: finalizeInitialChildren.  in-memory render tree created, but not yet attached.\r\n  prepareForCommit: (containerInfo: Container): void => { /* empty */ },\r\n\r\n  // Called after the in-memory tree has been committed (ie: after attaching again to root element)\r\n  resetAfterCommit: (containerInfo: Container): void => { /* empty */ },\r\n\r\n  appendInitialChild: (parent: HostCreatedInstance<any>, child: CreatedInstance<any>) => {\r\n    // Here we are traversing downwards.  Beyond parent has not been initialized, but all children have been.\r\n    if (parent) {\r\n      if (!child) {\r\n        console.error('undefined child', parent);\r\n      } else {\r\n        // doubly linking child to parent\r\n        parent.children.push(child) // TODO: need to remove from children as well when removing.\r\n        child.parent = parent\r\n      }\r\n    }\r\n\r\n    if (child && child.lifecycleListener && child.lifecycleListener.onParented) {\r\n      child.lifecycleListener.onParented(parent!, child)\r\n    }\r\n\r\n    if (parent && parent.lifecycleListener && parent.lifecycleListener.onChildAdded) {\r\n      parent.lifecycleListener.onChildAdded(child, parent)\r\n    }\r\n  },\r\n\r\n  appendChild: (parent: CreatedInstance<any>, child: CreatedInstance<any>): void => {\r\n    parent.children.push(child)\r\n    child.parent = parent\r\n  },\r\n\r\n  canHydrateInstance: (instance: any, type: string, props: Props): null | CreatedInstance<any> => {\r\n    // console.log(\"canHydrateInstance\", instance, type, props)\r\n    return null\r\n  },\r\n\r\n  // The parent of this node has not yet been instantiated.  The reconciler will continue by calling:\r\n  // createInstance → appendInitialChild → finalizeInitialChildren on the parent.\r\n  // When that has reached the top of the recursion tree (root), then prepareForCommit() will be called.\r\n  // NOTE: All children of this component, however, HAVE been initialized.\r\n  finalizeInitialChildren: (): boolean => {\r\n    return true /* callCommitMountForThisInstance */\r\n  },\r\n\r\n  commitMount: (instance: HostCreatedInstance<any>, type: string, newProps: any, internalInstanceHandle: ReactReconciler.Fiber): void => {\r\n    if (instance && instance.lifecycleListener && instance.lifecycleListener.onMount) {\r\n      instance.lifecycleListener.onMount(instance)\r\n    }\r\n  },\r\n\r\n  // NOTE: only called if supportsMutation = true;\r\n  // ReactDOM uses this for attaching child nodes to root DOM.  For us we want to link the all parts of tree together for tree crawling.\r\n  // same implementation as insertInContainerBefore\r\n  appendChildToContainer: (container: Container, child: HostCreatedInstance<any>): void => {\r\n    if (child) {\r\n      // doubly link child to root\r\n      container.rootInstance.children.push(child)\r\n      child.parent = container.rootInstance\r\n    }\r\n  },\r\n\r\n  commitUpdate(instance: HostCreatedInstance<any>, updatePayload: UpdatePayload, type: string /* old + new props are extra params here */) {\r\n    if (updatePayload !== null) {\r\n      updatePayload.forEach((update: PropertyUpdate) => {\r\n        applyUpdateToInstance(instance!.hostInstance, update, type)\r\n      })\r\n    }\r\n  },\r\n\r\n  removeChildFromContainer: (container: Container, child: HostCreatedInstance <any> ) => {\r\n    /**\r\n     * To fix two bugs when toggle meshes:\r\n     * 1.  model's mesh can't be destroyed.\r\n     * 2. `removeChildFromContainer()` only destroy babylon instance.\r\n     * The model is rootAbstractMesh's and Parent's child.\r\n     * `container.rootInstance.children` will be very large after few toggles.\r\n     */\r\n\r\n    if (child) {\r\n      removeChild(container.rootInstance, child)\r\n    }\r\n  },\r\n  removeChild,\r\n\r\n  // text-content nodes are not used.  treated as a leaf node.  children are not traversed.  calls methods like createTextInstance(...)\r\n  shouldSetTextContent: (type: string, props: any) => {\r\n    return false\r\n  }\r\n}\r\n\r\nexport default ReactBabylonJSHostConfig\r\n","/**\r\n * react-babylonjs\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE.txt file in the root directory of this source tree.\r\n */\r\n\r\nimport React, {createContext, useContext, useEffect, useRef, useState,} from 'react';\r\nimport ReactReconciler, {Reconciler} from \"react-reconciler\";\r\n\r\nimport {BabylonJSContext, withBabylonJS, WithBabylonJSContext} from './Engine';\r\nimport {\r\n  AbstractMesh,\r\n  Engine as BabylonJSEngine,\r\n  Nullable,\r\n  Observer,\r\n  PointerEventTypes,\r\n  PointerInfo,\r\n  Scene as BabylonJSScene,\r\n  SceneOptions\r\n} from '@babylonjs/core';\r\n\r\nimport {applyUpdateToInstance} from \"./UpdateInstance\";\r\nimport ReactBabylonJSHostConfig, {Container} from './ReactBabylonJSHostConfig';\r\nimport {FiberScenePropsHandler} from './generatedCode';\r\nimport {FiberSceneProps} from './generatedProps';\r\nimport {UpdatePayload} from './PropsHandler';\r\n\r\nexport interface WithSceneContext {\r\n  engine: Nullable<BabylonJSEngine>\r\n  canvas: Nullable<HTMLCanvasElement | WebGLRenderingContext>\r\n  scene: Nullable<BabylonJSScene>\r\n  sceneReady: boolean\r\n}\r\n\r\nexport declare type SceneEventArgs = {\r\n  scene: BabylonJSScene;\r\n  canvas: HTMLCanvasElement;\r\n};\r\n\r\n// TODO: build a fallback mechanism when typeof React.createContext !== 'function'\r\nexport const SceneContext = createContext<WithSceneContext>({\r\n  engine: null,\r\n  canvas: null,\r\n  scene: null,\r\n  sceneReady: false\r\n})\r\n\r\nexport const useBabylonScene = () => useContext(SceneContext).scene\r\n\r\ntype Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\r\n\r\nexport function withScene<P extends { sceneContext: WithSceneContext },\r\n  R = Omit<P, 'sceneContext'>>(\r\n  Component: React.ComponentClass<P> | React.FunctionComponent<P>\r\n): React.FunctionComponent<R> {\r\n  return function BoundComponent(props: R) {\r\n    return (\r\n      <SceneContext.Consumer>\r\n        {ctx => <Component {...props as any} sceneContext={ctx}/>}\r\n      </SceneContext.Consumer>\r\n    );\r\n  };\r\n}\r\n\r\ntype SceneProps = {\r\n  babylonJSContext: WithBabylonJSContext\r\n  onMeshPicked?: (mesh: AbstractMesh, scene: BabylonJSScene) => void\r\n  onScenePointerDown?: (evt: PointerInfo, scene: BabylonJSScene) => void\r\n  onScenePointerUp?: (evt: PointerInfo, scene: BabylonJSScene) => void\r\n  onScenePointerMove?: (evt: PointerInfo, scene: BabylonJSScene) => void\r\n  onSceneMount?: (sceneEventArgs: SceneEventArgs) => void\r\n  children: any,\r\n  sceneOptions?: SceneOptions\r\n} & FiberSceneProps\r\n\r\nconst usePrevious = <T extends any>(value: T) => {\r\n  const ref = useRef<T>();\r\n\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  }, [value]);\r\n\r\n  return ref.current;\r\n};\r\n\r\nconst Scene: React.FC<SceneProps> = (props: SceneProps, context?: any) => {\r\n  const {engine} = useContext(BabylonJSContext)\r\n\r\n  const [propsHandler] = useState(new FiberScenePropsHandler());\r\n  const [sceneReady, setSceneReady] = useState(false);\r\n  const [scene, setScene] = useState<Nullable<BabylonJSScene>>(null)\r\n  const [fiberRoot, setFiberRoot] = useState<any>(null);\r\n\r\n  // TODO: make this strongly typed\r\n  const [renderer, setRenderer] = useState<Nullable<Reconciler<any, any, any, any>>>(null);\r\n\r\n  const prevPropsRef = useRef({});\r\n\r\n  // initialize babylon scene\r\n  useEffect(() => {\r\n      // const onSceneReady = (eventData: BabylonJSScene, eventState: EventState) => {\r\n      //   setSceneReady(true);\r\n      // }\r\n\r\n      const scene = new BabylonJSScene(engine!, props.sceneOptions)\r\n      // const onReadyObservable: Nullable<Observer<BabylonJSScene>> = scene.onReadyObservable.add(onSceneReady);\r\n      if (scene.isReady()) {\r\n        // scene.onReadyObservable.remove(onReadyObservable);\r\n        setSceneReady(true)\r\n      } else {\r\n        console.error('Scene is not ready. Report issue in react-babylonjs repo')\r\n      }\r\n\r\n      setScene(scene);\r\n\r\n      const isAsync = false // Disables experimental async rendering\r\n\r\n      const container: Container = {\r\n        engine: props.babylonJSContext.engine,\r\n        canvas: props.babylonJSContext.canvas,\r\n        scene: scene,\r\n        rootInstance: {\r\n          hostInstance: null,\r\n          children: [],\r\n          parent: null,\r\n          metadata: {\r\n            className: \"root\"\r\n          },\r\n          customProps: {}\r\n        }\r\n      }\r\n\r\n      const renderer = ReactReconciler(ReactBabylonJSHostConfig);\r\n      setRenderer(renderer)\r\n      const fiberRoot = renderer.createContainer(container, isAsync, false /* hydrate true == better HMR? */)\r\n      setFiberRoot(fiberRoot);\r\n\r\n      renderer.injectIntoDevTools({\r\n        bundleType: process.env.NODE_ENV === 'production' ? 0 : 1,\r\n        version: '2.0.0',\r\n        rendererPackageName: 'react-babylonjs'\r\n      })\r\n\r\n      const pointerDownObservable: Nullable<Observer<PointerInfo>> = scene.onPointerObservable.add(\r\n        (evt: PointerInfo) => {\r\n          if (typeof props.onScenePointerDown === 'function') {\r\n            props.onScenePointerDown(evt, scene)\r\n          }\r\n\r\n          if (evt && evt.pickInfo && evt.pickInfo.hit && evt.pickInfo.pickedMesh) {\r\n            let mesh = evt.pickInfo.pickedMesh\r\n            if (typeof props.onMeshPicked === 'function') {\r\n              props.onMeshPicked(mesh, scene)\r\n            } else {\r\n              // console.log('onMeshPicked not being called')\r\n            }\r\n          }\r\n        },\r\n        PointerEventTypes.POINTERDOWN\r\n      );\r\n\r\n      // can only be assigned on init\r\n      let pointerUpObservable: Nullable<Observer<PointerInfo>> = null;\r\n      if (typeof props.onScenePointerUp === 'function') {\r\n        pointerUpObservable = scene.onPointerObservable.add(\r\n          (evt: PointerInfo) => {\r\n            props.onScenePointerUp!(evt, scene)\r\n          },\r\n          PointerEventTypes.POINTERUP\r\n        )\r\n      }\r\n      ;\r\n\r\n      // can only be assigned on init\r\n      let pointerMoveObservable: Nullable<Observer<PointerInfo>> = null;\r\n      if (typeof props.onScenePointerMove === 'function') {\r\n        pointerMoveObservable = scene.onPointerObservable.add(\r\n          (evt: PointerInfo) => {\r\n            props.onScenePointerMove!(evt, scene)\r\n          },\r\n          PointerEventTypes.POINTERMOVE)\r\n      }\r\n      ;\r\n\r\n      if (typeof props.onSceneMount === 'function') {\r\n        props.onSceneMount({\r\n          scene: scene,\r\n          canvas: scene.getEngine().getRenderingCanvas()!\r\n        });\r\n        // TODO: console.error if canvas is not attached. runRenderLoop() is expected to be part of onSceneMount().\r\n      }\r\n\r\n      // TODO: change enable physics to 'usePhysics' taking an object with a Vector3 and 'any'.\r\n      // NOTE: must be enabled for updating container (cannot add impostors w/o physics enabled)\r\n      if (Array.isArray(props.enablePhysics)) {\r\n        scene.enablePhysics(props.enablePhysics[0], props.enablePhysics[1]);\r\n      }\r\n\r\n      // update the root Container\r\n      renderer.updateContainer(\r\n        <SceneContext.Provider value={{\r\n          engine: props.babylonJSContext.engine,\r\n          canvas: props.babylonJSContext.canvas,\r\n          scene,\r\n          sceneReady\r\n        }}>\r\n          {props.children}\r\n        </SceneContext.Provider>, fiberRoot, undefined, () => { /* empty */\r\n        }\r\n      )\r\n\r\n      return () => {\r\n        if (pointerDownObservable) {\r\n          scene.onPointerObservable.remove(pointerDownObservable);\r\n        }\r\n\r\n        if (pointerUpObservable) {\r\n          scene.onPointerObservable.remove(pointerUpObservable);\r\n        }\r\n\r\n        if (pointerMoveObservable) {\r\n          scene.onPointerObservable.remove(pointerMoveObservable);\r\n        }\r\n\r\n        scene.dispose();\r\n      }\r\n    },\r\n    [/* no deps, so called only on un/mount */]\r\n  );\r\n\r\n\r\n  // update babylon scene\r\n  useEffect(() => {\r\n    if (engine === null || scene === null || renderer === null) {\r\n      return;\r\n    }\r\n\r\n    const prevProps = prevPropsRef.current;\r\n    const updates: UpdatePayload = propsHandler.getPropertyUpdates(prevProps, props);\r\n\r\n    if (updates !== null) {\r\n      updates.forEach(propertyUpdate => {\r\n        applyUpdateToInstance(scene, propertyUpdate, 'scene')\r\n      })\r\n    }\r\n\r\n    renderer.updateContainer(\r\n      <SceneContext.Provider value={{\r\n        engine: props.babylonJSContext.engine,\r\n        canvas: props.babylonJSContext.canvas,\r\n        scene,\r\n        sceneReady\r\n      }}>\r\n        {props.children}\r\n      </SceneContext.Provider>,\r\n      fiberRoot,\r\n      undefined,\r\n      () => { /* called after container is updated.  we may want an external observable here */\r\n      }\r\n    )\r\n\r\n    prevPropsRef.current = props;\r\n  });\r\n\r\n  return null;\r\n};\r\n\r\nexport default withBabylonJS(Scene)\r\n","import {MutableRefObject, useContext, useEffect, useRef, useState} from 'react';\r\nimport {\r\n  Nullable,\r\n  Observer,\r\n  Scene,\r\n  EventState,\r\n  ActionManager,\r\n  ActionEvent,\r\n  ExecuteCodeAction,\r\n  Mesh,\r\n  IAction,\r\n} from '@babylonjs/core';\r\n\r\nimport {Control} from '@babylonjs/gui/2D/controls/control';\r\n\r\nimport { SceneContext } from './Scene'\r\nimport { ICustomPropsHandler, CustomPropsHandler } from './PropsHandler';\r\nimport {CreatedInstance} from \"./CreatedInstance\";\r\n\r\nexport type OnFrameRenderFn = (eventData: Scene, eventState: EventState) => void\r\n\r\nexport function useBeforeRender(callback: OnFrameRenderFn, mask?: number, insertFirst?: boolean, callOnce?: boolean): void {\r\n    const {scene, sceneReady } = useContext(SceneContext);\r\n\r\n    useEffect(() => {\r\n        if (sceneReady !== true || scene === null) {\r\n            return;\r\n        }\r\n\r\n        const unregisterOnFirstCall: boolean = callOnce === true;\r\n        const sceneObserver: Nullable<Observer<Scene>> = scene.onBeforeRenderObservable.add(callback, mask, insertFirst, undefined, unregisterOnFirstCall);\r\n\r\n        if (unregisterOnFirstCall !== true) {\r\n            return () => {\r\n                scene.onBeforeRenderObservable.remove(sceneObserver);\r\n            }\r\n        }\r\n    })\r\n}\r\n\r\nexport function useAfterRender(callback: OnFrameRenderFn, mask?: number, insertFirst?: boolean, callOnce?: boolean): void {\r\n    const {scene, sceneReady } = useContext(SceneContext);\r\n\r\n    useEffect(() => {\r\n        if (sceneReady !== true || scene === null) {\r\n            return;\r\n        }\r\n\r\n        const unregisterOnFirstCall: boolean = callOnce === true;\r\n        const sceneObserver: Nullable<Observer<Scene>> = scene.onAfterRenderObservable.add(callback, mask, insertFirst, undefined, unregisterOnFirstCall);\r\n\r\n        if (unregisterOnFirstCall !== true) {\r\n            return () => {\r\n                scene.onAfterRenderObservable.remove(sceneObserver);\r\n            }\r\n        }\r\n    })\r\n}\r\n\r\nexport const useCustomPropsHandler = (propsHandler: ICustomPropsHandler<any, any>/*, deps?: React.DependencyList | undefined*/): void => {\r\n    const firstRun = useRef<boolean>(true);\r\n\r\n    if (firstRun.current === true) {\r\n      CustomPropsHandler.RegisterPropsHandler(propsHandler);\r\n      firstRun.current = false;\r\n    }\r\n\r\n    useEffect(() => {\r\n      return () => {\r\n        // console.warn('de-registering on unmount', propsHandler.name);\r\n        CustomPropsHandler.UnregisterPropsHandler(propsHandler);\r\n      }\r\n    }, [])\r\n}\r\n\r\nexport type MeshEventType = {\r\n  (ev: ActionEvent): void\r\n}\r\n\r\nexport type Gui2dEventType = {\r\n  (eventData: Control, eventState: EventState): void\r\n}\r\n\r\nexport type HoverType = MeshEventType | Gui2dEventType;\r\n\r\n/**\r\n * useHover hook\r\n * \r\n * TODO: support GUI 3D contols\r\n *\r\n * @param over expression when hover over starts\r\n * @param out expression when hover stops\r\n */\r\nexport const useHover = (over?: HoverType, out?: HoverType): [MutableRefObject<CreatedInstance<Mesh | Control | null>>, boolean] => {\r\n  const [value, setValue] = useState(false);\r\n\r\n  const ref = useRef<CreatedInstance<Mesh>>(null) as MutableRefObject<CreatedInstance<Mesh | Control | null>>;\r\n\r\n  useEffect(() => {\r\n    if (ref.current) {\r\n      const registeredMeshActions: Nullable<IAction>[] = [];\r\n      let observer2dGuiEnter: Nullable<Observer<Control>> = null;\r\n      let observer2dGuiOut: Nullable<Observer<Control>> = null;\r\n\r\n      if (ref.current.metadata.isMesh === true) {\r\n        const mesh = ref.current.hostInstance as Mesh;\r\n\r\n        if (!mesh.actionManager) {\r\n          mesh.actionManager = new ActionManager(mesh.getScene());\r\n        }\r\n\r\n        const onPointerOverAction: Nullable<IAction> = mesh.actionManager.registerAction(\r\n          new ExecuteCodeAction(\r\n            ActionManager.OnPointerOverTrigger, (ev) => {\r\n              over && (over as MeshEventType)(ev);\r\n              setValue(true);\r\n            }\r\n          )\r\n        );\r\n\r\n        const onPointerOutAction: Nullable<IAction> = mesh.actionManager.registerAction(\r\n          new ExecuteCodeAction(\r\n            ActionManager.OnPointerOutTrigger, (ev) => {\r\n              out && (out as MeshEventType)(ev);\r\n              setValue(false);\r\n            }\r\n          )\r\n        );\r\n\r\n        registeredMeshActions.push(onPointerOverAction);\r\n        registeredMeshActions.push(onPointerOutAction);\r\n      } else if (ref.current.metadata.isGUI2DControl === true) {\r\n        const control = ref.current.hostInstance as Control;\r\n        observer2dGuiEnter = control.onPointerEnterObservable.add(over as Gui2dEventType);\r\n        observer2dGuiOut = control.onPointerOutObservable.add(out as Gui2dEventType);\r\n      } else {\r\n        console.warn(\"Can only apply useHover to non-mesh/2D control currently.\", ref.current.metadata);\r\n      }\r\n\r\n      if (registeredMeshActions.length > 0 || observer2dGuiEnter !== null) {\r\n        return () => {\r\n          if (ref.current) {\r\n            if (registeredMeshActions.length > 0) {\r\n              registeredMeshActions.forEach((action: Nullable<IAction>) => {\r\n                if (action !== null) {\r\n                  const mesh = ref.current.hostInstance as Mesh;\r\n                  mesh.actionManager?.unregisterAction(action);\r\n                }\r\n              })\r\n              registeredMeshActions.splice(0, registeredMeshActions.length)\r\n            }\r\n\r\n            if (observer2dGuiEnter !== null) {\r\n              const control = ref.current.hostInstance as Control;\r\n              control.onPointerEnterObservable.remove(observer2dGuiEnter);\r\n              control.onPointerOutObservable.remove(observer2dGuiEnter);\r\n              observer2dGuiEnter = null;\r\n              observer2dGuiOut = null;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }, [ref.current]);\r\n  // todo: if use ref.current as dep,  duplicate register action.\r\n\r\n  return [ref, value];\r\n}\r\n\r\n/**\r\n * useClick hook\r\n * \r\n * TODO: support UI\r\n * @param onClick\r\n */\r\nexport function useClick(onClick: MeshEventType): [MutableRefObject<CreatedInstance<Mesh | null>>] {\r\n  const ref = useRef<CreatedInstance<Mesh>>(null) as MutableRefObject<CreatedInstance<Mesh | null>>;\r\n\r\n  useEffect(() => {\r\n    if (ref.current) {\r\n      if (ref.current.metadata.isMesh === true) {\r\n        const mesh = ref.current.hostInstance as Mesh;\r\n\r\n        if (!mesh.actionManager) {\r\n          mesh.actionManager = new ActionManager(mesh.getScene());\r\n        }\r\n\r\n        mesh.actionManager.registerAction(\r\n          new ExecuteCodeAction(\r\n            ActionManager.OnPickTrigger, function (ev) {\r\n              onClick(ev);\r\n            }\r\n          )\r\n        );\r\n      } else {\r\n        console.warn('onClick hook only supports referencing Meshes');\r\n      }\r\n    }\r\n  }, [ref]);\r\n  // todo: if use ref.current as dep,  duplicate register action.\r\n\r\n  return [ref];\r\n}\r\n","import {\r\n  ICustomPropsHandler,\r\n  PropChangeType,\r\n  PropertyUpdateProcessResult\r\n} from \"../../PropsHandler\";\r\nimport {Color3, Color4, Vector3} from \"@babylonjs/core\";\r\n\r\nfunction parseRgbaString(rgba: string): number[] {\r\n  const arr: string[] = rgba.replace(/[^\\d,]/g, '').split(',');\r\n  return arr.map(num => parseInt(num, 10) / 255);\r\n}\r\n\r\nconst Key = 'react-babylon-spring';\r\n\r\nexport class CustomColor3StringHandler implements ICustomPropsHandler<string, Color3> {\r\n  get name() {\r\n    return `${Key}:Color3String`\r\n  }\r\n\r\n  public propChangeType: string = PropChangeType.Color3;\r\n\r\n  accept(newProp: string): boolean {\r\n    return typeof (newProp) === 'string';\r\n  }\r\n\r\n  process(oldProp: string, newProp: string): PropertyUpdateProcessResult<Color3> {\r\n    if (oldProp !== newProp) {\r\n      return {\r\n        processed: true,\r\n        value: Color3.FromArray(parseRgbaString(newProp))\r\n      };\r\n    }\r\n\r\n    return {processed: false, value: null};\r\n  }\r\n}\r\n\r\nexport class CustomColor3ArrayHandler implements ICustomPropsHandler<number[], Color3> {\r\n  get name() {\r\n    return `${Key}:Color3Array`\r\n  }\r\n\r\n  public propChangeType: string = PropChangeType.Color3;\r\n\r\n  accept(newProp: []): boolean {\r\n    return Array.isArray(newProp);\r\n  }\r\n\r\n  process(oldProp: number[], newProp: number[]): PropertyUpdateProcessResult<Color3> {\r\n    if (oldProp === undefined || oldProp.length !== newProp.length) {\r\n      // console.log(`found diff length (${oldProp?.length}/${newProp?.length}) Color3Array new? ${oldProp === undefined}`)\r\n      return {\r\n        processed: true,\r\n        value: Color3.FromArray(newProp)\r\n      };\r\n    }\r\n\r\n    for (let i = 0; i < oldProp.length; i++) {\r\n      if (oldProp[i] !== newProp[i]) {\r\n        // console.log('found diff value Color3Array')\r\n        return {\r\n          processed: true,\r\n          value: Color3.FromArray(newProp)\r\n        };\r\n      }\r\n    }\r\n\r\n    return {processed: false, value: null};\r\n  }\r\n}\r\n\r\nexport class CustomColor4StringHandler implements ICustomPropsHandler<string, Color4> {\r\n\r\n  get name() {\r\n    return `${Key}:Color4String`\r\n  }\r\n\r\n  public propChangeType: string = PropChangeType.Color4;\r\n\r\n  accept(newProp: string): boolean {\r\n    return typeof (newProp) === 'string';\r\n  }\r\n\r\n  process(oldProp: string, newProp: string): PropertyUpdateProcessResult<Color4> {\r\n    if (oldProp !== newProp) {\r\n      // console.log('found diff Color4String')\r\n      return {\r\n        processed: true,\r\n        value: Color4.FromArray(parseRgbaString(newProp))\r\n      };\r\n    }\r\n\r\n    return {processed: false, value: null};\r\n  }\r\n}\r\n\r\n\r\nexport class CustomVector3ArrayHandler implements ICustomPropsHandler<number[], Vector3> {\r\n  get name() {\r\n    return `${Key}:Vector3Array`\r\n  }\r\n\r\n  public propChangeType: string = PropChangeType.Vector3;\r\n\r\n  accept(newProp: []): boolean {\r\n    return Array.isArray(newProp);\r\n  }\r\n\r\n  process(oldProp: number[], newProp: number[]): PropertyUpdateProcessResult<Vector3> {\r\n    if (oldProp === undefined || oldProp.length !== newProp.length) {\r\n      // console.log(`found diff length (${oldProp?.length}/${newProp?.length}) Color3Array new? ${oldProp === undefined}`)\r\n      return {\r\n        processed: true,\r\n        value: Vector3.FromArray(newProp)\r\n      };\r\n    }\r\n\r\n    for (let i = 0; i < oldProp.length; i++) {\r\n      if (oldProp[i] !== newProp[i]) {\r\n        return {\r\n          processed: true,\r\n          value: Vector3.FromArray(newProp)\r\n        };\r\n      }\r\n    }\r\n\r\n    return {processed: false, value: null};\r\n  }\r\n}\r\n\r\n// May be useful to include where they can be ES6 loaded via side-effect.\r\n// ie: import 'react-babylonjs/plugins/handlers'\r\n// CustomPropsHandler.RegisterPropsHandler(new CustomColor3StringHandler());\r\n// CustomPropsHandler.RegisterPropsHandler(new CustomColor3ArrayHandler());\r\n// CustomPropsHandler.RegisterPropsHandler(new CustomColor4StringHandler());\r\n// CustomPropsHandler.RegisterPropsHandler(new CustomVector3ArrayHandler());\r\n\r\n","import {extendAnimated, withAnimated} from '@react-spring/animated'\r\nimport {CSSProperties, ForwardRefExoticComponent} from 'react'\r\nimport {\r\n  AssignableKeys,\r\n  ComponentPropsWithRef,\r\n  ElementType,\r\n  SpringValue,\r\n} from '@react-spring/shared';\r\nimport {intrinsicClassMap} from \"../../generatedCode\";\r\n\r\n// TODO: Support type-checking for `animated` props\r\ntype BabylonComponents = { [key: string]: ElementType }\r\n\r\nconst elements = Object.keys(intrinsicClassMap);\r\n\r\n/**\r\n * TODO: Check the purpose of these types\r\n */\r\ntype CreateAnimated = <T extends ElementType>(\r\n  wrappedComponent: T\r\n) => AnimatedComponent<T>\r\n\r\n// Extend animated with all the available Babylon elements\r\nexport const animated: CreateAnimated & BabylonComponents = extendAnimated(\r\n  withAnimated,\r\n  [...elements],\r\n  true\r\n)\r\n\r\nexport {animated as a}\r\n\r\n/** The type of an `animated()` component */\r\nexport type AnimatedComponent<T extends ElementType> = ForwardRefExoticComponent<AnimatedProps<ComponentPropsWithRef<T>>>\r\n\r\n/** The props of an `animated()` component */\r\nexport type AnimatedProps<Props extends object> = {\r\n  [P in keyof Props]: (P extends 'ref' | 'key'\r\n    ? Props[P]\r\n    : AnimatedProp<Props[P]>)\r\n}\r\n\r\n// The animated prop value of a React element\r\ntype AnimatedProp<T> = [T, T] extends [infer T, infer DT]\r\n  ? [DT] extends [never]\r\n    ? never\r\n    : DT extends void\r\n      ? undefined\r\n      : DT extends object\r\n        ? [AssignableKeys<DT, CSSProperties>] extends [never]\r\n          ? DT extends ReadonlyArray<any>\r\n            ? AnimatedStyles<DT>\r\n            : DT\r\n          : AnimatedStyle<T>\r\n        : DT | AnimatedLeaf<T>\r\n  : never\r\n\r\n// An animated array of style objects\r\ntype AnimatedStyles<T extends ReadonlyArray<any>> = {\r\n  [P in keyof T]: [T[P]] extends [infer DT]\r\n    ? DT extends object\r\n      ? [AssignableKeys<DT, CSSProperties>] extends [never]\r\n        ? DT extends ReadonlyArray<any>\r\n          ? AnimatedStyles<DT>\r\n          : DT\r\n        : { [P in keyof DT]: AnimatedProp<DT[P]> }\r\n      : DT\r\n    : never\r\n}\r\n\r\n// An animated object of style attributes\r\ntype AnimatedStyle<T> = [T, T] extends [infer T, infer DT]\r\n  ? DT extends void\r\n    ? undefined\r\n    : [DT] extends [never]\r\n      ? never\r\n      : DT extends object\r\n        ? { [P in keyof DT]: AnimatedStyle<DT[P]> }\r\n        : DT | AnimatedLeaf<T>\r\n  : never\r\n\r\n// An animated value that is not an object\r\ntype AnimatedLeaf<T> = [T] extends [object]\r\n  ? never\r\n  : SpringValue<Exclude<T, object | void>>\r\n","import {Globals} from '@react-spring/core';\r\nimport {createStringInterpolator} from '@react-spring/shared/stringInterpolation';\r\nimport {applyInitialPropsToInstance} from \"../../UpdateInstance\";\r\nimport './customProps';\r\n\r\nGlobals.assign({\r\n  defaultElement: 'transformNode',\r\n  // todo: frameLoop can use runRenderLoop\r\n  applyAnimatedValues: (node, props) => {\r\n    /**\r\n     * used for update props\r\n     * initialization don't enter here\r\n     */\r\n    applyInitialPropsToInstance(node, props)\r\n  },\r\n  createStringInterpolator,\r\n});\r\n\r\nexport * from './animated';\r\nexport * from './customProps';\r\nexport * from '@react-spring/core';\r\n"],"names":["PropChangeType","CustomPropsHandler","propsHandler","propsChangeType","propChangeType","Array","isArray","_registeredPropsHandlers","registeredHandlers","match","find","h","undefined","console","warn","push","propsHandlerToUnregister","name","index","indexOf","slice","oldProp","newProp","NOT_ACCEPTED","accepted","registeredHandlers_1","_i","handler","accept","propertyUpdatedProcessResult","process","processed","value","ACCEPTED_NOT_PROCSSED","Object","freeze","propertyCheck","propertyName","propertyType","changedProps","templateMethod","processedResult","HandlePropsChange","type","changeType","e","error","checkVector3Diff","Vector3","equals","checkColor3Diff","Color3","checkColor4Diff","Color4","r","g","b","a","checkFresnelParametersDiff","FresnelParameters","bias","power","leftColor","rightColor","isEnabled","checkLambdaDiff","LambdaExpression","checkControlDiff","Control","checkPrimitiveDiff","Primitive","checkTextureDiff","Texture","log","checkNumericArrayDiff","NumericArray","length","checkObservableDiff","Observable","checkMethodDiff","Method","scene","options","this","x","z","Zero","_terrainSub","terrainSub","_mapData","mapData","_terrainIdx","_mapSubX","mapSubX","_mapSubZ","mapSubZ","_mapUVs","mapUVs","_mapColors","mapColors","_scene","_terrainCamera","camera","activeCamera","_inverted","invertSide","_SPmapData","SPmapData","_SPcolorData","SPcolorData","_SPuvData","SPuvData","_sps","sps","_datamap","_uvmap","_colormap","_mapSPData","_colorSPData","_uvSPData","Float32Array","_mapNormals","mapNormals","color","uv","terrainPath","posIndex","colIndex","uvIndex","terIndex","y","u","v","lg","terrainData","terrainColor","terrainUV","j","i","_mod","Vector2","Math","abs","_mapSizeX","_mapSizeZ","_averageSubSizeX","_averageSubSizeZ","ribbonOptions","pathArray","sideOrientation","Mesh","FRONTSIDE","BACKSIDE","colors","uvs","updatable","_terrain","MeshBuilder","CreateRibbon","_indices","getIndices","_positions","getVerticesData","VertexBuffer","PositionKind","_normals","NormalKind","_uvs","UVKind","_colors","ColorKind","computeNormalsFromMap","update","position","globalPosition","_terrainHalfSizeX","shiftFromCamera","_terrainHalfSizeZ","deltaNbSubX","deltaNbSubZ","_deltaSubX","floor","ceil","_deltaSubZ","onBeforeRenderObservable","add","refreshEveryFrame","_this","_refreshEveryFrame","beforeUpdate","afterUpdate","dataStride","_particleDataStride","mapSizeX","mapSizeZ","quads","_mapQuads","x0","z0","t","data","nb","pIdx","dIdx","col","quadIdx","computeBoundingBox","isAlwaysVisible","computeParticleColor","computeParticleTexture","spsTypeStartIndexes","_spsTypeStartIndexes","spsNbPerType","_spsNbPerType","nbAvailablePerType","_nbAvailablePerType","nbParticles","particles","count","p","isVisible","shapeId","DynamicTerrain","force","updateLOD","needsUpdate","updateForced","terrainPosition","cameraPosition","terrainHalfSizeX","terrainHalfSizeZ","deltaX","deltaZ","subToleranceX","_subToleranceX","subToleranceZ","_subToleranceZ","mod","oldCorrection","_cameraLODCorrection","updateCameraLOD","LODValue","_initialLOD","_LODValue","mapShiftX","mapShiftZ","mapFlgtNb","deltaSubX","deltaSubZ","signX","signZ","updateSize","_updateTerrain","centerLocal","copyFromFloats","_centerWorld","stepJ","stepI","LODLimitDown","LODLimitUp","axisLODValue","lodI","lodJ","bbMin","_bbMin","bbMax","_bbMax","terrain","positions","normals","mapSPData","nbPerType","colorStride","_particleColorStride","uvStride","_particleUVStride","LODLimits","_LODLimits","terrainIdx","datamap","uvmap","colormap","useCustomVertexFunction","_useCustomVertexFunction","updateVertex","dontComputeNormals","_computeNormals","LODpstvX","_LODPositiveX","LODngtvX","_LODNegativeX","LODpstvZ","_LODPositiveZ","LODngtvZ","_LODNegativeZ","averageSubSizeX","averageSubSizeZ","particleMap","particleColorMap","particleUVMap","l","posIndex1","posIndex2","posIndex3","ribbonInd","ribbonPosInd","ribbonUVInd","ribbonColInd","ribbonColInd1","ribbonColInd2","ribbonColInd3","ribbonColInd4","ribbonPosInd1","ribbonPosInd2","ribbonPosInd3","updateTerrainSize","FromFloatsToRef","Number","MAX_VALUE","terrainPos","vertex","_vertex","vertexPosition","vertexWorldPosition","worldPosition","vertexColor","vertexUvs","lodX","lodZ","mapIndex","quad","partIndexes","sp_colorData","sp_uvData","typeStartIndex","nbQuadParticles","nbInSPS","available","rem","used","min","px","idm","particle","pos","rot","rotation","scl","scaling","idc","iduv","uvs_1","w","setParticles","c","updateVerticesData","VertexData","ComputeNormals","_boundingInfo","reConstruct","_worldMatrix","remainder","next","lod","tsx","tsz","_terrainSizeX","_terrainSizeZ","_GetHeightFromMap","inverted","col1","row1","col2","row2","idx1","idx2","idx3","idx4","v1","_v1","v2","_v2","v3","_v3","v4","_v4","vB","vC","vAvB","_vAvB","vAvC","_vAvC","norm","_norm","vA","xv4v1","zv4v1","cd","subtractToRef","CrossToRef","normalize","scaleInPlace","normal","copyFrom","d","mapIndices","tmp1","tmp2","normal1","normal2","lastIdx","colStart","colEnd","getHeightFromMap","GetHeightFromMap","addInPlace","ComputeNormalsFromMapToRef","meshPosition","mesh","heightmapURL","subX","subZ","CreateMapFromHeightMapToRef","width","height","minHeight","maxHeight","offsetX","offsetZ","filter","colorFilter","onReady","Tools","LoadImage","img","canvas","document","createElement","context","getContext","bufferWidth","bufferHeight","drawImage","buffer","getImageData","row","gradient","idx","offlineProvider","CreateUVMapToRef","CreateUVMap","val","_centerLocal","ar","sort","_precomputeNormalsFromMap","_isAlwaysVisible","alwaysSelectAsActiveMesh","terrainCamera","FiberNodePropsHandler","oldProps","newProps","doNotSerialize","id","onDispose","onDisposeObservable","state","uniqueId","addBehavior","setEnabled","propsHandlers","FiberNode","propHandler","creationType","libraryLocation","namespace","parameters","optional","isNode","className","FiberTransformNodePropsHandler","billboardMode","ignoreNonUniformScaling","infiniteDistance","onAfterWorldMatrixUpdateObservable","preserveParentRotationForBillboard","reIntegrateRotationIntoRotationQuaternion","scalingDeterminant","addRotation","setAbsolutePosition","setDirection","setParent","setPivotMatrix","setPivotPoint","setPositionWithLocalVector","setPreTransformMatrix","translate","FiberTransformNode","FiberAbstractMeshPropsHandler","alphaIndex","applyFog","checkCollisions","collisionGroup","collisionMask","computeBonesUsingShaders","cullingStrategy","definedFacingForward","doNotSyncBoundingInfo","edgesColor","edgesWidth","ellipsoid","ellipsoidOffset","enablePointerMoveEvents","facetDepthSortFrom","hasVertexAlpha","isBlocker","isPickable","layerMask","mustDepthSortFacets","numBoneInfluencers","onCollide","onCollideObservable","onCollisionPositionChange","onCollisionPositionChangeObservable","onMaterialChangedObservable","onRebuildObservable","outlineColor","outlineWidth","overlayAlpha","overlayColor","partitioningBBoxRatio","partitioningSubdivisions","receiveShadows","renderingGroupId","showSubMeshesBoundingBox","useOctreeForCollisions","useOctreeForPicking","useOctreeForRenderingSelection","useVertexColors","visibility","addChild","setBoundingInfo","setIndices","setVerticesData","FiberAbstractMesh","FiberMeshPropsHandler","delayLoadingFile","delayLoadState","isUnIndexed","manualUpdateOfWorldMatrixInstancedBuffer","onBeforeDraw","onLODLevelSelection","overrideMaterialSideOrientation","overridenInstanceCount","addInstance","addLODLevel","setMaterialByID","setVerticesBuffer","FiberMesh","FiberCameraPropsHandler","cameraRigMode","fov","fovMode","inertia","interaxialDistance","isIntermediate","isRigCamera","isStereoscopicSideBySide","maxZ","minZ","mode","onAfterCheckInputsObservable","onProjectionMatrixChangedObservable","onRestoreStateObservable","onViewMatrixChangedObservable","orthoBottom","orthoLeft","orthoRight","orthoTop","upVector","setCameraRigMode","setCameraRigParameter","FiberCamera","isCamera","FiberTargetCameraPropsHandler","cameraDirection","noRotationConstraint","speed","updateUpVectorFromRotation","setTarget","FiberTargetCamera","FiberFreeCameraPropsHandler","angularSensibility","applyGravity","keysDown","keysLeft","keysRight","keysUp","FiberFreeCamera","FiberTouchCameraPropsHandler","touchAngularSensibility","touchMoveSensibility","FiberTouchCamera","FiberUniversalCameraPropsHandler","gamepadAngularSensibility","gamepadMoveSensibility","FiberUniversalCamera","FiberGamepadCameraPropsHandler","FiberGamepadCamera","FiberAnaglyphGamepadCameraPropsHandler","FiberAnaglyphGamepadCamera","FiberStereoscopicGamepadCameraPropsHandler","FiberStereoscopicGamepadCamera","FiberAnaglyphUniversalCameraPropsHandler","FiberAnaglyphUniversalCamera","FiberStereoscopicUniversalCameraPropsHandler","FiberStereoscopicUniversalCamera","FiberDeviceOrientationCameraPropsHandler","disablePointerInputWhenUsingDeviceOrientation","FiberDeviceOrientationCamera","FiberVRDeviceOrientationFreeCameraPropsHandler","FiberVRDeviceOrientationFreeCamera","FiberVRDeviceOrientationGamepadCameraPropsHandler","FiberVRDeviceOrientationGamepadCamera","FiberAnaglyphFreeCameraPropsHandler","FiberAnaglyphFreeCamera","FiberStereoscopicFreeCameraPropsHandler","FiberStereoscopicFreeCamera","FiberVirtualJoysticksCameraPropsHandler","FiberVirtualJoysticksCamera","FiberWebVRFreeCameraPropsHandler","devicePosition","deviceScaleFactor","onControllerMeshLoadedObservable","onControllersAttachedObservable","onPoseUpdatedFromDeviceObservable","rigParenting","FiberWebVRFreeCamera","FiberWebXRCameraPropsHandler","compensateOnFirstFrame","setTransformationFromNonVRCamera","FiberWebXRCamera","FiberArcRotateCameraPropsHandler","allowUpsideDown","alpha","angularSensibilityX","angularSensibilityY","beta","collisionRadius","inertialAlphaOffset","inertialBetaOffset","inertialPanningX","inertialPanningY","inertialRadiusOffset","lowerAlphaLimit","lowerBetaLimit","lowerRadiusLimit","onMeshTargetChangedObservable","panningAxis","panningDistanceLimit","panningInertia","panningOriginTarget","panningSensibility","pinchDeltaPercentage","pinchPrecision","pinchToPanMaxDistance","radius","target","upperAlphaLimit","upperBetaLimit","upperRadiusLimit","useAutoRotationBehavior","useBouncingBehavior","useFramingBehavior","useInputToRestoreState","useNaturalPinchZoom","wheelDeltaPercentage","wheelPrecision","zoomOnFactor","setPosition","FiberArcRotateCamera","FiberAnaglyphArcRotateCameraPropsHandler","FiberAnaglyphArcRotateCamera","FiberStereoscopicArcRotateCameraPropsHandler","FiberStereoscopicArcRotateCamera","FiberVRDeviceOrientationArcRotateCameraPropsHandler","FiberVRDeviceOrientationArcRotateCamera","FiberFlyCameraPropsHandler","bankedTurn","bankedTurnLimit","bankedTurnMultiplier","keysBackward","keysForward","rollCorrect","FiberFlyCamera","FiberFollowCameraPropsHandler","cameraAcceleration","heightOffset","lowerHeightOffsetLimit","lowerRotationOffsetLimit","maxCameraSpeed","rotationOffset","upperHeightOffsetLimit","upperRotationOffsetLimit","FiberFollowCamera","FiberArcFollowCameraPropsHandler","FiberArcFollowCamera","FiberBox","factoryMethod","acceptsMaterials","isMesh","FiberTiledBox","FiberSphere","FiberDisc","FiberIcoSphere","FiberRibbon","FiberCylinder","FiberTorus","FiberTorusKnot","FiberLineSystem","FiberLines","FiberDashedLines","FiberExtrudeShape","FiberExtrudeShapeCustom","FiberLathe","FiberTiledPlane","FiberPlane","FiberGround","FiberTiledGround","FiberGroundFromHeightMap","FiberPolygon","FiberExtrudePolygon","FiberTube","FiberPolyhedron","FiberDecal","FiberMaterialPropsHandler","alphaMode","backFaceCulling","checkReadyOnEveryCall","checkReadyOnlyOnce","depthFunction","disableDepthWrite","fillMode","fogEnabled","forceDepthWrite","getRenderTargetTextures","needDepthPrePass","onBind","onCompiled","onError","pointsCloud","pointSize","separateCullingPass","wireframe","zOffset","FiberMaterial","isMaterial","FiberShaderMaterialPropsHandler","setArray2","setArray3","setArray4","setColor3","setColor3Array","setColor4","setColor4Array","setFloat","setFloats","setInt","setMatrices","setMatrix","setMatrix2x2","setMatrix3x3","setTexture","setTextureArray","setVector2","setVector3","setVector4","FiberShaderMaterial","FiberMultiMaterialPropsHandler","FiberMultiMaterial","FiberPushMaterialPropsHandler","allowShaderHotSwapping","FiberPushMaterial","FiberStandardMaterialPropsHandler","alphaCutOff","ambientColor","ambientTexture","AmbientTextureEnabled","bumpTexture","BumpTextureEnabled","cameraColorCurvesEnabled","cameraColorGradingEnabled","cameraColorGradingTexture","cameraContrast","cameraExposure","cameraToneMappingEnabled","ColorGradingTextureEnabled","customShaderNameResolve","diffuseColor","diffuseFresnelParameters","diffuseTexture","DiffuseTextureEnabled","disableLighting","emissiveColor","emissiveFresnelParameters","emissiveTexture","EmissiveTextureEnabled","FresnelEnabled","indexOfRefraction","invertNormalMapX","invertNormalMapY","invertRefractionY","lightmapTexture","LightmapTextureEnabled","linkEmissiveWithDiffuse","maxSimultaneousLights","opacityFresnelParameters","opacityTexture","OpacityTextureEnabled","parallaxScaleBias","reflectionFresnelParameters","reflectionTexture","ReflectionTextureEnabled","refractionFresnelParameters","refractionTexture","RefractionTextureEnabled","roughness","specularColor","specularPower","specularTexture","SpecularTextureEnabled","twoSidedLighting","useAlphaFromDiffuseTexture","useEmissiveAsIllumination","useGlossinessFromSpecularMapAlpha","useLightmapAsShadowmap","useLogarithmicDepth","useObjectSpaceNormalMap","useParallax","useParallaxOcclusion","useReflectionFresnelFromSpecular","useReflectionOverAlpha","useSpecularOverAlpha","FiberStandardMaterial","FiberBackgroundMaterialPropsHandler","_perceptualColor","enableNoise","fovMultiplier","opacityFresnel","primaryColor","primaryColorHighlightLevel","primaryColorShadowLevel","reflectionAmount","reflectionBlur","reflectionFalloffDistance","reflectionFresnel","reflectionReflectance0","reflectionReflectance90","reflectionStandardFresnelWeight","sceneCenter","shadowLevel","switchToBGR","useEquirectangularFOV","useRGBColor","FiberBackgroundMaterial","FiberPBRBaseMaterialPropsHandler","debugMode","transparencyMode","FiberPBRBaseMaterial","FiberPBRBaseSimpleMaterialPropsHandler","doubleSided","environmentTexture","normalTexture","occlusionStrength","occlusionTexture","FiberPBRBaseSimpleMaterial","FiberPBRMetallicRoughnessMaterialPropsHandler","baseColor","baseTexture","metallic","metallicRoughnessTexture","FiberPBRMetallicRoughnessMaterial","FiberPBRSpecularGlossinessMaterialPropsHandler","glossiness","specularGlossinessTexture","FiberPBRSpecularGlossinessMaterial","FiberPBRMaterialPropsHandler","albedoColor","albedoTexture","ambientTextureImpactOnAnalyticalLights","ambientTextureStrength","directIntensity","disableBumpMap","emissiveIntensity","enableSpecularAntiAliasing","environmentBRDFTexture","environmentIntensity","forceAlphaTest","forceIrradianceInFragment","forceNormalForward","linkRefractionWithTransparency","metallicF0Factor","metallicTexture","microSurface","microSurfaceTexture","reflectionColor","reflectivityColor","reflectivityTexture","specularIntensity","unlit","useAlphaFresnel","useAlphaFromAlbedoTexture","useAmbientInGrayScale","useAmbientOcclusionFromMetallicTextureRed","useAutoMicroSurfaceFromReflectivityMap","useGLTFLightFalloff","useHorizonOcclusion","useLinearAlphaFresnel","useMetallicF0FactorFromMetallicTexture","useMetallnessFromMetallicTextureBlue","useMicroSurfaceFromReflectivityMapAlpha","usePhysicalLightFalloff","useRadianceOcclusion","useRadianceOverAlpha","useRoughnessFromMetallicTextureAlpha","useRoughnessFromMetallicTextureGreen","FiberPBRMaterial","FiberNodeMaterialPropsHandler","ignoreAlpha","onBuildObservable","addOutputNode","FiberNodeMaterial","FiberFluentMaterialPropsHandler","borderMinValue","borderWidth","edgeSmoothingValue","hoverColor","hoverPosition","hoverRadius","innerGlowColor","innerGlowColorIntensity","renderBorders","renderHoverLight","FiberFluentMaterial","FiberLightPropsHandler","diffuse","excludeWithLayerMask","falloffType","includeOnlyWithLayerMask","intensity","intensityMode","lightmapMode","range","renderPriority","shadowEnabled","specular","FiberLight","FiberShadowLightPropsHandler","customProjectionMatrixBuilder","direction","shadowMaxZ","shadowMinZ","transformedDirection","transformedPosition","setDirectionToTarget","setShadowProjectionMatrix","FiberShadowLight","isShadowLight","FiberDirectionalLightPropsHandler","autoCalcShadowZBounds","autoUpdateExtends","shadowFrustumSize","shadowOrthoScale","FiberDirectionalLight","FiberPointLightPropsHandler","shadowAngle","FiberPointLight","FiberSpotLightPropsHandler","angle","exponent","innerAngle","projectionTexture","projectionTextureLightFar","projectionTextureLightNear","projectionTextureUpDirection","shadowAngleScale","FiberSpotLight","FiberHemisphericLightPropsHandler","groundColor","FiberHemisphericLight","FiberControlPropsHandler","clipChildren","clipContent","disabledColor","disabledColorItem","fontFamily","fontSize","fontSizeInPixels","fontStyle","fontWeight","heightInPixels","horizontalAlignment","hoverCursor","isFocusInvisible","isHighlighted","isHitTestVisible","isPointerBlocker","left","leftInPixels","linkOffsetX","linkOffsetXInPixels","linkOffsetY","linkOffsetYInPixels","notRenderable","onAfterDrawObservable","onBeforeDrawObservable","onDirtyObservable","onPointerClickObservable","onPointerDownObservable","onPointerEnterObservable","onPointerMoveObservable","onPointerOutObservable","onPointerUpObservable","onWheelObservable","paddingBottom","paddingBottomInPixels","paddingLeft","paddingLeftInPixels","paddingRight","paddingRightInPixels","paddingTop","paddingTopInPixels","scaleX","scaleY","shadowBlur","shadowColor","shadowOffsetX","shadowOffsetY","top","topInPixels","transformCenterX","transformCenterY","useBitmapCache","verticalAlignment","widthInPixels","zIndex","FiberControl","isGUI2DControl","FiberContainerPropsHandler","adaptHeightToChildren","adaptWidthToChildren","background","logLayoutCycleErrors","maxLayoutCycle","addControl","FiberContainer","FiberRectanglePropsHandler","cornerRadius","thickness","FiberRectangle","FiberButtonPropsHandler","delegatePickingToChildren","pointerDownAnimation","pointerEnterAnimation","pointerOutAnimation","pointerUpAnimation","FiberButton","FiberSelectionPanelPropsHandler","barColor","barHeight","buttonBackground","buttonColor","headerColor","labelColor","spacerHeight","addGroup","addToGroupCheckbox","addToGroupRadio","addToGroupSlider","setHeaderName","FiberSelectionPanel","FiberScrollViewerPropsHandler","barBackground","barImageHeight","barSize","forceHorizontalBar","forceVerticalBar","freezeControls","horizontalBarImageHeight","scrollBackground","thumbHeight","thumbLength","verticalBarImageHeight","setBucketSizes","FiberScrollViewer","FiberStackPanelPropsHandler","ignoreLayoutWarnings","isVertical","FiberStackPanel","FiberVirtualKeyboardPropsHandler","defaultButtonBackground","defaultButtonColor","defaultButtonHeight","defaultButtonPaddingBottom","defaultButtonPaddingLeft","defaultButtonPaddingRight","defaultButtonPaddingTop","defaultButtonWidth","onKeyPressObservable","selectedShiftThickness","shiftButtonColor","shiftState","addKeysRow","FiberVirtualKeyboard","FiberEllipsePropsHandler","FiberEllipse","FiberGridPropsHandler","addColumnDefinition","addRowDefinition","setColumnDefinition","setRowDefinition","FiberGrid","Fiber_ScrollViewerWindowPropsHandler","parentClientHeight","parentClientWidth","Fiber_ScrollViewerWindow","FiberTextBlockPropsHandler","lineSpacing","onLinesReadyObservable","onTextChangedObservable","resizeToFit","text","textHorizontalAlignment","textVerticalAlignment","FiberTextBlock","FiberImagePropsHandler","autoScale","cellHeight","cellId","cellWidth","detectPointerOnOpaqueOnly","onImageLoadedObservable","onSVGAttributesComputedObservable","populateNinePatchSlicesFromImage","sliceBottom","sliceLeft","sliceRight","sliceTop","source","sourceHeight","sourceLeft","sourceTop","sourceWidth","stretch","FiberImage","FiberCheckboxPropsHandler","checkSizeRatio","isChecked","onIsCheckedChangedObservable","FiberCheckbox","FiberColorPickerPropsHandler","onValueChangedObservable","size","FiberColorPicker","FiberInputTextPropsHandler","addKey","autoStretchWidth","currentKey","deadKey","disableMobilePrompt","focusedBackground","focusedColor","highligherOpacity","highlightedText","margin","maxWidth","onBeforeKeyAddObservable","onBlurObservable","onFocusObservable","onFocusSelectAll","onKeyboardEventProcessedObservable","onTextCopyObservable","onTextCutObservable","onTextHighlightObservable","onTextPasteObservable","placeholderColor","placeholderText","promptMessage","textHighlightColor","FiberInputText","FiberInputPasswordPropsHandler","FiberInputPassword","FiberLinePropsHandler","connectedControl","dash","lineWidth","x1","x2","y1","y2","FiberLine","FiberMultiLinePropsHandler","onPointUpdate","FiberMultiLine","FiberRadioButtonPropsHandler","group","FiberRadioButton","FiberBaseSliderPropsHandler","barOffset","displayThumb","isThumbClamped","maximum","minimum","step","thumbWidth","FiberBaseSlider","FiberScrollBarPropsHandler","borderColor","FiberScrollBar","FiberImageScrollBarPropsHandler","num90RotationInVerticalMode","FiberImageScrollBar","FiberSliderPropsHandler","displayValueBar","isThumbCircle","FiberSlider","FiberImageBasedSliderPropsHandler","FiberImageBasedSlider","FiberDisplayGridPropsHandler","displayMajorLines","displayMinorLines","majorLineColor","majorLineFrequency","majorLineTickness","minorLineColor","minorLineTickness","FiberDisplayGrid","FiberControl3DPropsHandler","FiberControl3D","isGUI3DControl","FiberContainer3DPropsHandler","blockLayout","FiberContainer3D","FiberVolumeBasedPanelPropsHandler","columns","orientation","rows","FiberVolumeBasedPanel","FiberCylinderPanelPropsHandler","FiberCylinderPanel","FiberPlanePanelPropsHandler","FiberPlanePanel","FiberScatterPanelPropsHandler","iteration","FiberScatterPanel","FiberSpherePanelPropsHandler","FiberSpherePanel","FiberStackPanel3DPropsHandler","FiberStackPanel3D","FiberAbstractButton3DPropsHandler","FiberAbstractButton3D","FiberButton3DPropsHandler","content","contentResolution","contentScaleRatio","FiberButton3D","FiberHolographicButtonPropsHandler","imageUrl","tooltipText","FiberHolographicButton","FiberMeshButton3DPropsHandler","FiberMeshButton3D","FiberEffectLayerPropsHandler","neutralColor","onAfterComposeObservable","onAfterRenderMeshToEffect","onBeforeComposeObservable","onBeforeRenderMainTextureObservable","onBeforeRenderMeshToEffect","onSizeChangedObservable","FiberEffectLayer","isEffectLayer","FiberGlowLayerPropsHandler","blurKernelSize","customEmissiveColorSelector","customEmissiveTextureSelector","addExcludedMesh","addIncludedOnlyMesh","FiberGlowLayer","FiberHighlightLayerPropsHandler","blurHorizontalSize","blurVerticalSize","innerGlow","onAfterBlurObservable","onBeforeBlurObservable","outerGlow","addMesh","FiberHighlightLayer","FiberBaseTexturePropsHandler","anisotropicFilteringLevel","coordinatesIndex","coordinatesMode","gammaSpace","getAlphaFromRGB","hasAlpha","invertZ","irradianceTexture","is2DArray","is3D","isCube","isRenderTarget","isRGBD","level","linearSpecularLOD","lodGenerationOffset","lodGenerationScale","lodLevelInAlpha","wrapR","wrapU","wrapV","FiberBaseTexture","isTexture","FiberCubeTexturePropsHandler","boundingBoxPosition","boundingBoxSize","onLoadObservable","rotationY","url","setReflectionTextureMatrix","FiberCubeTexture","FiberRawCubeTexturePropsHandler","FiberRawCubeTexture","FiberTexturePropsHandler","isBlocking","uAng","uOffset","uRotationCenter","uScale","vAng","vOffset","vRotationCenter","vScale","wAng","wRotationCenter","FiberTexture","FiberRawTexturePropsHandler","format","FiberRawTexture","FiberProceduralTexturePropsHandler","autoClear","onGenerated","onGeneratedObservable","refreshRate","setFragment","FiberProceduralTexture","FiberCustomProceduralTexturePropsHandler","animate","FiberCustomProceduralTexture","FiberNoiseProceduralTexturePropsHandler","animationSpeedFactor","brightness","octaves","persistence","FiberNoiseProceduralTexture","FiberRenderTargetTexturePropsHandler","clearColor","customRenderFunction","getCustomRenderList","ignoreCameraViewport","onAfterRender","onAfterRenderObservable","onAfterUnbind","onAfterUnbindObservable","onBeforeBindObservable","onBeforeRender","onClear","onClearObservable","onResizeObservable","renderListPredicate","renderParticles","renderSprites","samples","useCameraPostProcesses","addPostProcess","setRenderingAutoClearDepthStencil","setRenderingOrder","FiberRenderTargetTexture","FiberMirrorTexturePropsHandler","adaptiveBlurKernel","blurKernel","blurKernelX","blurKernelY","blurRatio","FiberMirrorTexture","FiberMultiRenderTargetPropsHandler","FiberMultiRenderTarget","FiberRefractionTexturePropsHandler","depth","FiberRefractionTexture","FiberMultiviewRenderTargetPropsHandler","FiberMultiviewRenderTarget","FiberVideoTexturePropsHandler","FiberVideoTexture","FiberDynamicTexturePropsHandler","FiberDynamicTexture","FiberAdvancedDynamicTexturePropsHandler","clipboardData","idealHeight","idealWidth","isForeground","onBeginLayoutObservable","onBeginRenderObservable","onClipboardObservable","onControlPickedObservable","onEndLayoutObservable","onEndRenderObservable","premulAlpha","renderAtIdealSize","renderScale","useInvalidateRectOptimization","useSmallestIdeal","FiberAdvancedDynamicTexture","FiberADTForMesh","FiberADTFullscreenUI","FiberRawTexture3DPropsHandler","FiberRawTexture3D","FiberRawTexture2DArrayPropsHandler","FiberRawTexture2DArray","FiberColorGradingTexturePropsHandler","FiberColorGradingTexture","FiberEquiRectangularCubeTexturePropsHandler","FiberEquiRectangularCubeTexture","FiberHDRCubeTexturePropsHandler","FiberHDRCubeTexture","FiberHtmlElementTexturePropsHandler","FiberHtmlElementTexture","FiberGUI3DManagerPropsHandler","onPickedPointChangedObservable","FiberGUI3DManager","FiberShadowGeneratorPropsHandler","blurBoxOffset","blurScale","contactHardeningLightSizeUVRatio","darkness","depthScale","filteringQuality","forceBackFacesOnly","frustumEdgeFalloff","normalBias","onAfterShadowMapRenderMeshObservable","onAfterShadowMapRenderObservable","onBeforeShadowMapRenderMeshObservable","onBeforeShadowMapRenderObservable","transparencyShadow","useBlurCloseExponentialShadowMap","useBlurExponentialShadowMap","useCloseExponentialShadowMap","useContactHardeningShadow","useExponentialShadowMap","useKernelBlur","usePercentageCloserFiltering","usePoissonSampling","addShadowCaster","setDarkness","setTransparencyShadow","FiberShadowGenerator","delayCreation","FiberEnvironmentHelperPropsHandler","onErrorObservable","setMainColor","FiberEnvironmentHelper","isEnvironment","FiberPhysicsImpostorPropsHandler","afterStep","beforeStep","friction","mass","onCollideEvent","positionIterations","pressure","restitution","segments","soft","stiffness","velocityIterations","addAnchor","addHook","addJoint","setAngularVelocity","setDeltaPosition","setDeltaRotation","setLinearVelocity","setMass","setParam","FiberPhysicsImpostor","FiberVRExperienceHelperPropsHandler","displayGaze","displayLaserPointer","enableGazeEvenWhenNoPointerLock","exitVROnDoubleTap","meshSelectionPredicate","onAfterCameraTeleport","onAfterEnteringVRObservable","onBeforeCameraTeleport","onEnteringVRObservable","onExitingVRObservable","onMeshSelectedWithController","onNewMeshPicked","onNewMeshSelected","onSelectedMeshUnselected","raySelectionPredicate","requestPointerLockOnFullScreen","teleportationEnabled","updateControllerLaserColor","updateGazeTrackerColor","updateGazeTrackerScale","xrTestDone","addFloorMesh","setGazeColor","setLaserColor","setLaserLightingState","FiberVRExperienceHelper","FiberDynamicTerrainPropsHandler","cameraLODCorrection","computeNormals","initialLOD","LODNegativeX","LODNegativeZ","LODPositiveX","LODPositiveZ","precomputeNormalsFromMap","FiberDynamicTerrain","FiberAutoRotationBehaviorPropsHandler","idleRotationSpeed","idleRotationSpinupTime","idleRotationWaitTime","zoomStopsAnimation","FiberAutoRotationBehavior","isBehavior","FiberBouncingBehaviorPropsHandler","autoTransitionRange","lowerRadiusTransitionRange","transitionDuration","upperRadiusTransitionRange","FiberBouncingBehavior","FiberFramingBehaviorPropsHandler","autoCorrectCameraLimitsAndSensibility","defaultElevation","elevationReturnTime","elevationReturnWaitTime","framingTime","positionScale","radiusScale","FiberFramingBehavior","FiberAttachToBoxBehaviorPropsHandler","distanceAwayFromBottomOfFace","distanceAwayFromFace","FiberAttachToBoxBehavior","FiberFadeInOutBehaviorPropsHandler","delay","fadeInTime","FiberFadeInOutBehavior","FiberMultiPointerScaleBehaviorPropsHandler","FiberMultiPointerScaleBehavior","FiberPointerDragBehaviorPropsHandler","currentDraggingPointerID","detachCameraControls","dragDeltaRatio","dragging","enabled","lastDragPosition","maxDragAngle","moveAttached","onDragEndObservable","onDragObservable","onDragStartObservable","startAndReleaseDragOnPointerEvents","updateDragPlane","useObjectOrientationForDragging","validateDrag","FiberPointerDragBehavior","FiberSixDofDragBehaviorPropsHandler","rotateDraggedObject","FiberSixDofDragBehavior","FiberScenePropsHandler","afterCameraRender","afterRender","animationsEnabled","animationTimeScale","autoClearDepthAndStencil","beforeCameraRender","beforeRender","blockfreeActiveMeshesAndRenderingGroups","blockMaterialDirtyMechanism","collisionsEnabled","constantlyUpdateMeshUnderPointer","customLODSelector","defaultCursor","dispatchAllSubMeshesOfActiveMeshes","doNotHandleCursors","DoubleClickDelay","DragMovementThreshold","dumpNextRenderTargets","ExclusiveDoubleClickMode","fogColor","fogDensity","fogEnd","fogMode","fogStart","forcePointsCloud","forceWireframe","getActiveMeshCandidates","getActiveSubMeshCandidates","getCollidingSubMeshCandidates","getDeterministicFrameTime","getIntersectingSubMeshCandidates","gravity","lensFlaresEnabled","lightsEnabled","loadingPluginName","LongPressDelay","onActiveCameraChanged","onAfterActiveMeshesEvaluationObservable","onAfterAnimationsObservable","onAfterCameraRenderObservable","onAfterDrawPhaseObservable","onAfterParticlesRenderingObservable","onAfterRenderCameraObservable","onAfterRenderingGroupObservable","onAfterRenderTargetsRenderObservable","onAfterStepObservable","onAnimationFileImportedObservable","onBeforeActiveMeshesEvaluationObservable","onBeforeAnimationsObservable","onBeforeCameraRenderObservable","onBeforeDrawPhaseObservable","onBeforeParticlesRenderingObservable","onBeforeRenderingGroupObservable","onBeforeRenderTargetsRenderObservable","onBeforeStepObservable","onCameraRemovedObservable","onDataLoadedObservable","onGeometryRemovedObservable","onKeyboardObservable","onLightRemovedObservable","onMaterialRemovedObservable","onMeshImportedObservable","onMeshRemovedObservable","onNewCameraAddedObservable","onNewGeometryAddedObservable","onNewLightAddedObservable","onNewMaterialAddedObservable","onNewMeshAddedObservable","onNewSkeletonAddedObservable","onNewTextureAddedObservable","onNewTransformNodeAddedObservable","onPointerDown","onPointerMove","onPointerObservable","onPointerPick","onPointerUp","onPreKeyboardObservable","onPrePointerObservable","onReadyObservable","onSkeletonRemovedObservable","onTextureRemovedObservable","onTransformNodeRemovedObservable","particlesEnabled","pointerDownPredicate","pointerMovePredicate","pointerUpPredicate","pointerX","pointerY","postProcessesEnabled","preventDefaultOnPointerDown","preventDefaultOnPointerUp","probesEnabled","proceduralTexturesEnabled","renderTargetsEnabled","requireLightSorting","shadowsEnabled","skeletonsEnabled","skipFrustumClipping","spritesEnabled","texturesEnabled","useConstantAnimationDeltaTime","useDelayedTextureLoading","useRightHandedSystem","addActionManager","addAnimation","addAnimationGroup","addCamera","addExternalData","addGeometry","addLight","addMaterial","addMorphTargetManager","addMultiMaterial","addParticleSystem","addSkeleton","addTexture","addTransformNode","setActiveCameraByID","setActiveCameraByName","setPointerOverMesh","setStepId","setTransformMatrix","ADTForMesh","ADTFullscreenUI","AbstractButton3D","AbstractMesh","AdvancedDynamicTexture","AnaglyphArcRotateCamera","AnaglyphFreeCamera","AnaglyphGamepadCamera","AnaglyphUniversalCamera","ArcFollowCamera","ArcRotateCamera","AttachToBoxBehavior","AutoRotationBehavior","BackgroundMaterial","BaseSlider","BaseTexture","BouncingBehavior","Box","Button","Button3D","Camera","Checkbox","ColorGradingTexture","ColorPicker","Container","Container3D","Control3D","CubeTexture","CustomProceduralTexture","Cylinder","CylinderPanel","DashedLines","Decal","DeviceOrientationCamera","DirectionalLight","Disc","DisplayGrid","DynamicTexture","EffectLayer","Ellipse","EnvironmentHelper","EquiRectangularCubeTexture","ExtrudePolygon","ExtrudeShape","ExtrudeShapeCustom","FadeInOutBehavior","FluentMaterial","FlyCamera","FollowCamera","FramingBehavior","FreeCamera","GUI3DManager","GamepadCamera","GlowLayer","Grid","Ground","GroundFromHeightMap","HDRCubeTexture","HemisphericLight","HighlightLayer","HolographicButton","HtmlElementTexture","IcoSphere","Image","ImageBasedSlider","ImageScrollBar","InputPassword","InputText","Lathe","Light","Line","LineSystem","Lines","Material","MeshButton3D","MirrorTexture","Model","MultiLine","MultiMaterial","MultiPointerScaleBehavior","MultiRenderTarget","MultiviewRenderTarget","Node","NodeMaterial","NoiseProceduralTexture","PBRBaseMaterial","PBRBaseSimpleMaterial","PBRMaterial","PBRMetallicRoughnessMaterial","PBRSpecularGlossinessMaterial","PhysicsImpostor","Plane","PlanePanel","PointLight","PointerDragBehavior","Polygon","Polyhedron","ProceduralTexture","PushMaterial","RadioButton","RawCubeTexture","RawTexture","RawTexture2DArray","RawTexture3D","Rectangle","RefractionTexture","RenderTargetTexture","Ribbon","ScatterPanel","ScrollBar","ScrollViewer","SelectionPanel","ShaderMaterial","ShadowGenerator","ShadowLight","SixDofDragBehavior","Slider","Sphere","SpherePanel","SpotLight","StackPanel","StackPanel3D","StandardMaterial","StereoscopicArcRotateCamera","StereoscopicFreeCamera","StereoscopicGamepadCamera","StereoscopicUniversalCamera","TargetCamera","TextBlock","TiledBox","TiledGround","TiledPlane","Torus","TorusKnot","TouchCamera","TransformNode","Tube","UniversalCamera","VRDeviceOrientationArcRotateCamera","VRDeviceOrientationFreeCamera","VRDeviceOrientationGamepadCamera","VRExperienceHelper","VideoTexture","VirtualJoysticksCamera","VirtualKeyboard","VolumeBasedPanel","WebVRFreeCamera","WebXRCamera","_ScrollViewerWindow","classesMap","dynamicTerrain","ExtensionsDynamicTerrain","abstractScene","BabylonjsCoreAbstractScene","AbstractScene","node","BabylonjsCoreNode","BabylonjsCoreScene","Scene","BabylonjsCoreCamera","environmentHelper","BabylonjsCoreEnvironmentHelper","effectLayer","BabylonjsCoreEffectLayer","light","BabylonjsCoreLight","material","BabylonjsCoreMaterial","BabylonjsCoreMesh","meshBuilder","BabylonjsCoreMeshBuilder","physicsImpostor","BabylonjsCorePhysicsImpostor","advancedDynamicTexture","BabylonjsGuiAdvancedDynamicTexture","gui3DManager","BabylonjsGuiGUI3DManager","autoRotationBehavior","BabylonjsCoreAutoRotationBehavior","bouncingBehavior","BabylonjsCoreBouncingBehavior","framingBehavior","BabylonjsCoreFramingBehavior","attachToBoxBehavior","BabylonjsCoreAttachToBoxBehavior","fadeInOutBehavior","BabylonjsCoreFadeInOutBehavior","multiPointerScaleBehavior","BabylonjsCoreMultiPointerScaleBehavior","pointerDragBehavior","BabylonjsCorePointerDragBehavior","sixDofDragBehavior","BabylonjsCoreSixDofDragBehavior","vrExperienceHelper","BabylonjsCoreVRExperienceHelper","shadowGenerator","BabylonjsCoreShadowGenerator","BabylonjsCoreBaseTexture","control","BabylonjsGuiControl","textBlock","BabylonjsGuiTextBlock","control3D","BabylonjsGuiControl3D","transformNode","BabylonjsCoreTransformNode","abstractMesh","BabylonjsCoreAbstractMesh","renderTargetTexture","BabylonjsCoreRenderTargetTexture","targetCamera","BabylonjsCoreTargetCamera","freeCamera","BabylonjsCoreFreeCamera","touchCamera","BabylonjsCoreTouchCamera","universalCamera","BabylonjsCoreUniversalCamera","gamepadCamera","BabylonjsCoreGamepadCamera","anaglyphGamepadCamera","BabylonjsCoreAnaglyphGamepadCamera","stereoscopicGamepadCamera","BabylonjsCoreStereoscopicGamepadCamera","anaglyphUniversalCamera","BabylonjsCoreAnaglyphUniversalCamera","stereoscopicUniversalCamera","BabylonjsCoreStereoscopicUniversalCamera","deviceOrientationCamera","BabylonjsCoreDeviceOrientationCamera","vrDeviceOrientationFreeCamera","BabylonjsCoreVRDeviceOrientationFreeCamera","vrDeviceOrientationGamepadCamera","BabylonjsCoreVRDeviceOrientationGamepadCamera","anaglyphFreeCamera","BabylonjsCoreAnaglyphFreeCamera","stereoscopicFreeCamera","BabylonjsCoreStereoscopicFreeCamera","virtualJoysticksCamera","BabylonjsCoreVirtualJoysticksCamera","webVrFreeCamera","BabylonjsCoreWebVRFreeCamera","webXrCamera","BabylonjsCoreWebXRCamera","arcRotateCamera","BabylonjsCoreArcRotateCamera","anaglyphArcRotateCamera","BabylonjsCoreAnaglyphArcRotateCamera","stereoscopicArcRotateCamera","BabylonjsCoreStereoscopicArcRotateCamera","vrDeviceOrientationArcRotateCamera","BabylonjsCoreVRDeviceOrientationArcRotateCamera","flyCamera","BabylonjsCoreFlyCamera","followCamera","BabylonjsCoreFollowCamera","arcFollowCamera","BabylonjsCoreArcFollowCamera","shaderMaterial","BabylonjsCoreShaderMaterial","texture","BabylonjsCoreTexture","multiMaterial","BabylonjsCoreMultiMaterial","pushMaterial","BabylonjsCorePushMaterial","standardMaterial","BabylonjsCoreStandardMaterial","backgroundMaterial","BabylonjsCoreBackgroundMaterial","shadowLight","BabylonjsCoreShadowLight","pbrBaseMaterial","BabylonjsCorePBRBaseMaterial","pbrBaseSimpleMaterial","BabylonjsCorePBRBaseSimpleMaterial","pbrMetallicRoughnessMaterial","BabylonjsCorePBRMetallicRoughnessMaterial","pbrSpecularGlossinessMaterial","BabylonjsCorePBRSpecularGlossinessMaterial","pbrMaterial","BabylonjsCorePBRMaterial","nodeMaterial","BabylonjsCoreNodeMaterial","fluentMaterial","BabylonjsGuiFluentMaterial","directionalLight","BabylonjsCoreDirectionalLight","pointLight","BabylonjsCorePointLight","spotLight","BabylonjsCoreSpotLight","hemisphericLight","BabylonjsCoreHemisphericLight","container","BabylonjsGuiContainer","rectangle","BabylonjsGuiRectangle","babylon-button","BabylonjsGuiButton","selectionPanel","BabylonjsGuiSelectionPanel","scrollViewer","BabylonjsGuiScrollViewer","babylon-image","BabylonjsGuiImage","stackPanel","BabylonjsGuiStackPanel","virtualKeyboard","BabylonjsGuiVirtualKeyboard","babylon-ellipse","BabylonjsGuiEllipse","grid","BabylonjsGuiGrid","scrollViewerWindow","BabylonjsGui_ScrollViewerWindow","checkbox","BabylonjsGuiCheckbox","colorPicker","BabylonjsGuiColorPicker","inputText","BabylonjsGuiInputText","inputPassword","BabylonjsGuiInputPassword","babylon-line","BabylonjsGuiLine","multiLine","BabylonjsGuiMultiLine","radioButton","BabylonjsGuiRadioButton","baseSlider","BabylonjsGuiBaseSlider","scrollBar","BabylonjsGuiScrollBar","imageScrollBar","BabylonjsGuiImageScrollBar","slider","BabylonjsGuiSlider","imageBasedSlider","BabylonjsGuiImageBasedSlider","displayGrid","BabylonjsGuiDisplayGrid","container3D","BabylonjsGuiContainer3D","volumeBasedPanel","BabylonjsGuiVolumeBasedPanel","cylinderPanel","BabylonjsGuiCylinderPanel","planePanel","BabylonjsGuiPlanePanel","scatterPanel","BabylonjsGuiScatterPanel","spherePanel","BabylonjsGuiSpherePanel","stackPanel3D","BabylonjsGuiStackPanel3D","abstractButton3D","BabylonjsGuiAbstractButton3D","button3D","BabylonjsGuiButton3D","holographicButton","BabylonjsGuiHolographicButton","meshButton3D","BabylonjsGuiMeshButton3D","glowLayer","BabylonjsCoreGlowLayer","highlightLayer","BabylonjsCoreHighlightLayer","cubeTexture","BabylonjsCoreCubeTexture","rawCubeTexture","BabylonjsCoreRawCubeTexture","rawTexture","BabylonjsCoreRawTexture","proceduralTexture","BabylonjsCoreProceduralTexture","customProceduralTexture","BabylonjsCoreCustomProceduralTexture","noiseProceduralTexture","BabylonjsCoreNoiseProceduralTexture","mirrorTexture","BabylonjsCoreMirrorTexture","multiRenderTarget","BabylonjsCoreMultiRenderTarget","BabylonjsCoreRefractionTexture","multiviewRenderTarget","BabylonjsCoreMultiviewRenderTarget","videoTexture","BabylonjsCoreVideoTexture","dynamicTexture","BabylonjsCoreDynamicTexture","rawTexture3D","BabylonjsCoreRawTexture3D","rawTexture2DArray","BabylonjsCoreRawTexture2DArray","colorGradingTexture","BabylonjsCoreColorGradingTexture","equiRectangularCubeTexture","BabylonjsCoreEquiRectangularCubeTexture","hdrCubeTexture","BabylonjsCoreHDRCubeTexture","htmlElementTexture","BabylonjsCoreHtmlElementTexture","intrinsicClassMap","adtForMesh","adtFullscreenUi","box","cylinder","dashedLines","decal","disc","extrudePolygon","extrudeShape","extrudeShapeCustom","ground","groundFromHeightMap","icoSphere","lathe","lines","lineSystem","plane","babylon-polygon","polyhedron","ribbon","sphere","tiledBox","tiledGround","tiledPlane","torus","torusKnot","tube","babylonClassFactory","importAlias","BabylonJSContext","createContext","engine","withBabylonJS","Component","props","React","Consumer","ctx","babylonJSContext","LoaderStatus","useBabylonEngine","useContext","useBabylonCanvas","_super","portalCanvas","_canvas","getElementById","_engine","resize","canRender","__extends","Engine","BabylonJSEngine","antialias","engineOptions","adaptToDeviceRatio","runRenderLoop","onBeforeRenderLoopObservable","hasObservers","notifyObservers","scenes","forEach","render","onEndRenderLoopObservable","onContextLostObservable","eventData","window","addEventListener","onResizeWindow","setState","removeEventListener","noSSR","_a","touchActionNone","canvasStyle","canvasId","opts","style","Provider","ref","onCanvasRef","children","applyUpdateToInstance","hostInstance","clone","values","applyInitialPropsToInstance","instance","initPayload","getPropsHandlers","handlerUpdates","getPropertyUpdates","metadata","onParented","_onParented","onChildAdded","_onChildAdded","onMount","_onMount","onUnmount","_onUnmount","HostWithEventsFiber","parent","_hostContextData","child","HostWithEvents","AdvancedDynamicTextureLifecycleListener","addControls","customProps","createForParentMesh","getScene","Black","supportPointerMove","attachToMesh","added","connectControlNames","controlNames","root","connect","keyboard","searchInstance","CameraLifecycleListener","noPreventDefault","attachControl","isTargetable","lockedTargetMeshName","lockedTarget","getMeshByName","EnvironmentHelperLifecycleListener","mainColor","teleportEnvironmentGround","GUI2DControlLifecycleListener","defaultKeyboard","addedParent","tmp","GUI3DControlLifecycleListener","last3DGuiControl","last3d","childrenAsContent","linkToTransformNodeByName","toLinkTo","linkToTransformNode","onControlAdded","GUI3DManagerLifecycleListener","MaterialsLifecycleListener","attachToMeshesByName","meshNamesToAttachTo_1","setTimeout","meshes","material_1","assignTo","propsList_1","split","propToAssign_1","prop","LoadedModel","rootMesh","max","getChildMeshes","childMesh","minimumWorld","maximumWorld","Minimize","Maximize","BoundingInfo","dispose","particleSystems","ps","skeletons","skeleton","animationGroups","animationGroup","ModelPropsHandler","BasePropsHandler","meshUpdates","propertyUpdate","ModelLifecycleListener","loadedModel","status","Loading","loader","SceneLoader","ImportMesh","rootUrl","sceneFilename","onModelLoaded","Loaded","updates","scaleToDimension","boundingInfo","longestDimension","dimension","event","onLoadProgress","message","exception","Error","errorMessage","onModelError","pluginExtension","loaderName","DeferredCreationLifecycleListener","createInstance","deferredCreationProps","_parent","_options","object","PhysicsImpostorLifecycleListener","rotationQuaternion","result","mapSize","useFullFloatFirst","shadowCasters","shadowCasters_1","onMeshAddedObservable","removeShadowCaster","shadowCastersExcluding","shadowCastersExcluding_1","ShadowGeneratorLifecycleListener","remove","Skybox","key","SKYBOX_MODE","TargetPropsHandler","propertyUpdates","assignProperty","propertyPath","propsList","TexturesLifecycleListener","VRExperienceHelperLifecycleListener","enableInteractions","NodeLifecycleListener","BehaviorLifecycleListener","behaviorAware","behavior","removeBehavior","CreationType","removeChild","parentInstance","lifecycleListener","removeControl","array","removeRecursive","ci","ReactBabylonJSHostConfig","supportsMutation","now","Date","isPrimaryRenderer","supportsPersistence","supportsHydration","getPublicInstance","getRootHostContext","rootContainerInstance","rootInstance","getChildHostContext","parentHostContext","prepareUpdate","hostContext","customType","updatePayload","insertInContainerBefore","beforeChild","internalInstanceHandle","customTypes","CUSTOM_HOSTS","toLowerCase","FiberModel","CUSTOM_COMPONENTS.ModelLifecycleListener","underlyingClassName","GENERATED.intrinsicClassMap","classDefinition","GENERATED","createInfoArgs","CreateInfo","Metadata","args","map","generatedParameter","newParameter_1","subParameter","subPropValue","includes","babylonObject","FactoryMethod","GENERATED.babylonClassFactory","startsWith","clazz","_b","BABYLONEXT","onCreated","fiberObject","CUSTOM_COMPONENTS.MaterialsLifecycleListener","CUSTOM_COMPONENTS.GUI3DControlLifecycleListener","CUSTOM_COMPONENTS.GUI2DControlLifecycleListener","CUSTOM_COMPONENTS.TexturesLifecycleListener","CUSTOM_COMPONENTS.CameraLifecycleListener","CUSTOM_COMPONENTS.NodeLifecycleListener","CUSTOM_COMPONENTS.BehaviorLifecycleListener","CUSTOM_COMPONENTS","createdReference","createdMetadata","createCreatedInstance","addPropsHandler","CUSTOM_COMPONENTS.TargetPropsHandler","shouldDeprioritizeSubtree","hideInstance","unhideInstance","createTextInstance","scheduleDeferredCallback","callback","requestIdleCallback","cancelDeferredCallback","handle","cancelIdleCallback","timeout","clearTimeout","noTimeout","prepareForCommit","containerInfo","resetAfterCommit","appendInitialChild","appendChild","canHydrateInstance","finalizeInitialChildren","commitMount","appendChildToContainer","commitUpdate","removeChildFromContainer","shouldSetTextContent","SceneContext","sceneReady","useBabylonScene","withScene","sceneContext","setSceneReady","setScene","_c","fiberRoot","setFiberRoot","_d","renderer","setRenderer","prevPropsRef","useRef","useEffect","BabylonJSScene","sceneOptions","isReady","ReactReconciler","createContainer","injectIntoDevTools","bundleType","env","NODE_ENV","version","rendererPackageName","pointerDownObservable","evt","onScenePointerDown","pickInfo","hit","pickedMesh","onMeshPicked","PointerEventTypes","POINTERDOWN","pointerUpObservable","onScenePointerUp","POINTERUP","pointerMoveObservable","onScenePointerMove","POINTERMOVE","onSceneMount","getEngine","getRenderingCanvas","enablePhysics","updateContainer","prevProps","current","useBeforeRender","mask","insertFirst","callOnce","unregisterOnFirstCall","sceneObserver","useAfterRender","useCustomPropsHandler","firstRun","RegisterPropsHandler","UnregisterPropsHandler","useHover","over","out","setValue","registeredMeshActions_1","observer2dGuiEnter_1","actionManager","ActionManager","onPointerOverAction","registerAction","ExecuteCodeAction","OnPointerOverTrigger","ev","onPointerOutAction","OnPointerOutTrigger","action","unregisterAction","splice","useClick","onClick","OnPickTrigger","parseRgbaString","rgba","replace","num","parseInt","Key","CustomColor3StringHandler","FromArray","CustomColor3ArrayHandler","CustomColor4StringHandler","CustomVector3ArrayHandler","animated","extendAnimated","withAnimated","keys","Globals","assign","defaultElement","applyAnimatedValues","createStringInterpolator"],"mappings":"urVAyKYA,iBAlGZ,cAgGA,OAtFgBC,uBAAd,SAAmCC,GACjC,IAAMC,EAA0BD,EAAaE,eAExCC,MAAMC,QAAQL,EAAmBM,yBAAyBJ,MAC7DF,EAAmBM,yBAAyBJ,GAAmB,IAGjE,IAAMK,EAAsDP,EAAmBM,yBAAyBJ,GAElGM,EAAQD,EAAmBE,MAAK,SAAAC,GAAK,OAAAA,IAAMT,KACjD,YAAcU,IAAVH,GACFI,QAAQC,KAAK,iDAAiDX,OACvDM,IAGTD,EAAmBO,KAAKb,GACjBA,IAUKD,yBAAd,SAAqCe,GACnC,IAAMb,EAA0Ba,EAAyBZ,eAEzD,IAAKC,MAAMC,QAAQL,EAAmBM,yBAAyBJ,IAE7D,OADAU,QAAQC,KAAK,eAAeE,EAAyBC,yBAC9C,EAGT,IAAMT,EAAsDP,EAAmBM,yBAAyBJ,GAElGe,EAAgBV,EAAmBW,QAAQH,GAEjD,OAAe,IAAXE,GACFL,QAAQC,KAAK,eAAeE,EAAyBC,yBAC9C,IAGThB,EAAmBM,yBAAyBJ,GAAmBK,EAAmBY,MAAMF,EAAO,IACxF,IAeKjB,oBAAd,SAAgCE,EAAiCkB,EAAcC,GAC7E,IAAMd,EAAsDP,EAAmBM,yBAAyBJ,GACxG,QAA2BS,IAAvBJ,EACF,OAAOP,EAAmBsB,aAI5B,IADA,IAAIC,GAAW,MACOC,IAAAC,WAAAA,IAAoB,CAArC,IAAMC,OACT,GAAIA,EAAQC,OAAON,GAAU,CAC3BE,GAAW,EACX,IAAMK,EAAiEF,EAAQG,QAAQT,EAASC,GAGhG,GAAIO,EAA6BE,UAC/B,MAAO,CACLP,UAAU,EACVO,WAAW,EACXC,MAAOH,EAA6BG,QAM5C,OAAOR,EACHvB,EAAmBgC,sBACnBhC,EAAmBsB,cA5FVtB,2BAA4E,GAuD5EA,eAA0DiC,OAAOC,OAAO,CACrFX,UAAU,EACVO,WAAW,EACXC,MAAO,OAGM/B,wBAAmEiC,OAAOC,OAAO,CAC9FX,UAAU,EACVO,WAAW,EACXC,MAAO,YAiDX,SAASI,GACPf,EACAC,EACAe,EACAC,EACAlC,EACAmC,EACAC,GAEA,IACE,IAAMC,EAAkBxC,GAAmByC,kBAAkBtC,EAAgBiB,EAASC,GACtF,GAAImB,EAAgBjB,SAalB,YAZIiB,EAAgBV,WAElBQ,EAAaxB,KAAK,CAChBsB,eACAM,KAAML,EACNM,WAAYxC,EACZ4B,MAAOS,EAAgBT,SAS7BQ,EAAenB,EAASC,EAASiB,GACjC,MAAOM,GACPhC,QAAQiC,MAAM,qBAAqBT,YAAsBjC,MAAmBkB,GAC5ET,QAAQiC,MAAMD,KA/ClB,SAAY7C,GACVA,wBACAA,oBACAA,kBACAA,kBACAA,oBACAA,8BACAA,0BACAA,kBACAA,sCACAA,wCACAA,oBAXF,CAAYA,KAAAA,YAmDC+C,GAAmB,SAAC1B,EAA8BC,EAA8Be,EAAsBC,EAAsBC,GACvIH,GAAuBf,EAASC,EAASe,EAAcC,EAActC,GAAegD,QAAST,GAAc,SAAClB,EAASC,EAASiB,IACxHjB,GAAaD,GAAYC,EAAQ2B,OAAO5B,IAC1CkB,EAAaxB,KAAK,CAChBsB,eACAM,KAAML,EACNM,WAAY5C,GAAegD,QAC3BhB,MAAOV,QAMF4B,GAAkB,SAAC7B,EAA6BC,EAA6Be,EAAsBC,EAAsBC,GACpIH,GAAsBf,EAASC,EAASe,EAAcC,EAActC,GAAemD,OAAQZ,GAAc,SAAClB,EAASC,EAASiB,IACtHjB,GAAaD,GAAYC,EAAQ2B,OAAO5B,IAC1CkB,EAAaxB,KAAK,CAChBsB,eACAM,KAAML,EACNM,WAAY5C,GAAemD,OAC3BnB,MAAOV,QAMF8B,GAAkB,SAAC/B,EAA6BC,EAA6Be,EAAsBC,EAAsBC,GACpIH,GAAsBf,EAASC,EAASe,EAAcC,EAActC,GAAeqD,OAAQd,GAAc,SAAClB,EAASC,EAASiB,IAEtHjB,GAAaD,GAAWA,EAAQiC,IAAMhC,EAAQgC,GAAKjC,EAAQkC,IAAMjC,EAAQiC,GAAKlC,EAAQmC,IAAMlC,EAAQkC,GAAKnC,EAAQoC,IAAMnC,EAAQmC,GACjIlB,EAAaxB,KAAK,CAChBsB,eACAM,KAAML,EACNM,WAAY5C,GAAeqD,OAC3BrB,MAAOV,QAMFoC,GAA6B,SAACrC,EAAwCC,EAAwCe,EAAsBC,EAAsBC,GACrKH,GAAiCf,EAASC,EAASe,EAAcC,EAActC,GAAe2D,kBAAmBpB,GAAc,SAAClB,EAASC,EAASiB,IAE5IjB,GACCD,GACDA,EAAQuC,OAAStC,EAAQsC,MACzBvC,EAAQwC,QAAUvC,EAAQuC,OACxBxC,EAAQyC,WAAczC,EAAQyC,UAAUb,OAAO3B,EAAQwC,YACvDzC,EAAQ0C,YAAe1C,EAAQ0C,WAAWd,OAAO3B,EAAQyC,aAC3D1C,EAAQ2C,YAAc1C,EAAQ0C,WAIhCzB,EAAaxB,KAAK,CAChBsB,eACAM,KAAML,EACNM,WAAY5C,GAAe2D,kBAC3B3B,MAAOV,QAMF2C,GAAkB,SAAC5C,EAA0BC,EAA0Be,EAAsBC,EAAsBC,GAC9HH,GAAmBf,EAASC,EAASe,EAAcC,EAActC,GAAekE,iBAAkB3B,GAAc,SAAClB,EAASC,EAASiB,GAC7HjB,IAAYD,GACdkB,EAAaxB,KAAK,CAChBsB,eACAM,KAAML,EACNM,WAAY5C,GAAekE,iBAC3BlC,MAAOV,QAMF6C,GAAmB,SAAC9C,EAA8BC,EAA8Be,EAAsBC,EAAsBC,GACvIH,GAAuBf,EAASC,EAASe,EAAcC,EAActC,GAAeoE,QAAS7B,GAAc,SAAClB,EAASC,EAASiB,GAExHjB,IAAYD,GACdkB,EAAaxB,KAAK,CAChBsB,eACAM,KAAML,EACNM,WAAY5C,GAAeoE,QAC3BpC,MAAOV,QAQF+C,GAAqB,SAAChD,EAAoCC,EAAoCe,EAAsBC,EAAsBC,GACrJH,GAA6Bf,EAASC,EAASe,EAAcC,EAActC,GAAesE,UAAW/B,GAAc,SAAClB,EAASC,EAASiB,GAChIjB,IAAYD,GACdkB,EAAaxB,KAAK,CAChBsB,eACAM,KAAML,EACNM,WAAY5C,GAAesE,UAC3BtC,MAAOV,QAMFiD,GAAmB,SAAClD,EAAkCC,EAAkCe,EAAsBC,EAAsBC,GAC/IH,GAA2Bf,EAASC,EAASe,EAAcC,EAActC,GAAewE,QAASjC,GAAc,SAAClB,EAASC,EAASiB,GAC5HjB,IAAYD,IACdR,QAAQ4D,IAAI,mBAAoBpC,EAAcC,GAC9CC,EAAaxB,KAAK,CAChBsB,eACAM,KAAML,EACNM,WAAY5C,GAAewE,QAC3BxC,MAAOV,SAMFoD,GAAwB,SAACrD,EAA+BC,EAA+Be,EAAsBC,EAAsBC,GAC9IH,GAAwBf,EAASC,EAASe,EAAcC,EAActC,GAAe2E,aAAcpC,GAAc,SAAClB,EAASC,EAASiB,IAE9HjB,GAAaD,GAAWA,EAAQuD,SAAWtD,EAAQsD,QACrDrC,EAAaxB,KAAK,CAChBsB,eACAM,KAAML,EACNM,WAAY5C,GAAe2E,aAC3B3C,MAAOV,QAMFuD,GAAsB,SAACxD,EAAsCC,EAAsCe,EAAsBC,EAAsBC,GAC1JH,GAA+Bf,EAASC,EAASe,EAAcC,EAActC,GAAe8E,WAAYvC,GAAc,SAAClB,EAASC,EAASiB,QAEvH3B,IAAZS,GAAyBA,IAAYC,GACvCiB,EAAaxB,KAAK,CAChBsB,eACAM,KAAML,EACNM,WAAY5C,GAAe8E,WAC3B9C,MAAOV,QAgBFyD,GAAkB,SAAC1D,EAAcC,EAAce,EAAsBC,EAAsBC,GAClGlB,IAAYC,GACdiB,EAAaxB,KAAK,CAChBsB,eACAM,KAAML,EACNM,WAAY5C,GAAegF,OAC3BhD,MAAOV,mBCxQT,WACEL,EACAgE,EACAC,GAHF,WA3FQC,yBAA8B,EAC9BA,0BAA+B,EAC/BA,uBAA4B,EAE5BA,oBAAyB,EACzBA,oBAAyB,EACzBA,gBAAuB,GACvBA,iBAAsB,EACtBA,eAAoB,EACpBA,0BAA+B,EAC/BA,oBAAyB,EACzBA,oBAAyB,EACzBA,oBAAyB,EACzBA,oBAAyB,EAEzBA,gBAAqB,EACtBA,qBAA4C,CAEjDC,EAAG,EACHC,EAAG,GAOGF,gBAAqB,EACrBA,gBAAqB,EACrBA,yBAA8B,EAC9BA,+BAAoC,EACpCA,sBAA2B,EAC3BA,eAAoB,EACpBA,aAAkB,EAClBA,gBAAqB,EACrBA,iBAAsB,EACtBA,mBAAwB,EACxBA,gBAAqB,EAYrBA,sBAA2B,EAC3BA,sBAA2B,EAC3BA,mBAAwB,EACxBA,mBAAwB,EACxBA,uBAA4B,EAC5BA,uBAA4B,EAC5BA,kBAAwBnC,EAAQsC,OAChCH,kBAAwBnC,EAAQsC,OAChCH,eAAoB,EACpBA,eAAoB,EAEpBA,uBAA4B,EAC5BA,gCAAqC,EAmD3CA,KAAKlE,KAAOA,EACZiE,EAAUA,GAAW,GACrBC,KAAKI,YAAcL,EAAQM,YAAc,GACzCL,KAAKM,SAAWP,EAAQQ,QACxBP,KAAKQ,YAAcR,KAAKI,YAAc,EACtCJ,KAAKS,SAAWV,EAAQW,SAAWV,KAAKQ,YACxCR,KAAKW,SAAWZ,EAAQa,SAAWZ,KAAKQ,YACxCR,KAAKa,QAAUd,EAAQe,OACvBd,KAAKe,WAAahB,EAAQiB,UAC1BhB,KAAKiB,OAASnB,EACdE,KAAKkB,eAAiBnB,EAAQoB,QAAUrB,EAAMsB,aAC9CpB,KAAKqB,UAAYtB,EAAQuB,WACzBtB,KAAKuB,WAAaxB,EAAQyB,UAC1BxB,KAAKyB,aAAe1B,EAAQ2B,YAC5B1B,KAAK2B,UAAY5B,EAAQ6B,SACzB5B,KAAK6B,KAAO9B,EAAQ+B,IAGpB9B,KAAK+B,WAAW/B,KAAKM,SACrBN,KAAKgC,SAAShC,KAAKa,QACnBb,KAAKiC,YAAYjC,KAAKe,WACtBf,KAAKkC,aAAalC,KAAKuB,WACvBvB,KAAKmC,gBAAenC,KAAKkC,aAAclC,KAAKyB,cAC5CzB,KAAKoC,aAAYpC,KAAKkC,aAAclC,KAAK2B,WACzC3B,KAAKM,SAAWN,KAAK+B,SAAW/B,KAAKM,SAAW,IAAI+B,aAAarC,KAAKQ,YAAcR,KAAKQ,YAAc,GACvGR,KAAKa,QAAUb,KAAKgC,OAAShC,KAAKa,QAAU,IAAIwB,aAAarC,KAAKQ,YAAcR,KAAKQ,YAAc,GAC/FR,KAAK+B,SACP/B,KAAKsC,YAAcvC,EAAQwC,YAAc,IAAIF,aAAarC,KAAKS,SAAWT,KAAKW,SAAW,GAE1FX,KAAKsC,YAAc,IAAID,aAAarC,KAAKQ,YAAcR,KAAKQ,YAAc,GAsB5E,IAlBA,IAIIgC,EACAC,EAGAC,EARA3G,EAAQ,EACR4G,EAAW,EACXC,EAAW,EACXC,EAAU,EAGVC,EAAW,EACXC,EAAI,EAEJC,EAAI,EACJC,EAAI,EACJC,EAAKlD,KAAKQ,YAAc,EACtB2C,EAAc,GACdC,EAAe,GACfC,EAAY,GACZ9C,EAAUP,KAAKM,SACfU,EAAYhB,KAAKe,WACjBD,EAASd,KAAKa,QACXyC,EAAI,EAAGA,GAAKtD,KAAKI,YAAakD,IAAK,CAC1CZ,EAAc,GACd,IAAK,IAAIa,EAAI,EAAGA,GAAKvD,KAAKI,YAAamD,IAErCZ,EAAmB,GADnB5G,EAAQiE,KAAKwD,KAAS,EAAJF,EAAOtD,KAAKW,UAAYX,KAAKS,SAAWT,KAAKwD,KAAS,EAAJD,EAAOvD,KAAKS,WAEhFmC,EAAmB,EAAR7G,EACX8G,EAAkB,EAAR9G,EACV+G,EAAWQ,EAAItD,KAAKQ,YAAc+C,EAE9BvD,KAAK+B,SACPgB,EAAIxC,EAAQoC,EAAW,IAEvBI,EAAI,EACJxC,EAAQ,EAAIuC,GAAYS,EACxBhD,EAAQ,EAAIuC,EAAW,GAAKC,EAC5BxC,EAAQ,EAAIuC,EAAW,GAAKQ,GAE9BZ,EAAY9G,KAAK,IAAIiC,EAAQ0F,EAAGR,EAAGO,IAGjCd,EADExC,KAAKiC,UACC,IAAI/D,EAAO8C,EAAU4B,GAAW5B,EAAU4B,EAAW,GAAI5B,EAAU4B,EAAW,GAAI,GAElF,IAAI1E,EAAO,EAAK,EAAK,EAAK,GAEpCkF,EAAaxH,KAAK4G,GAEdxC,KAAKgC,OACPS,EAAK,IAAIgB,EAAQ3C,EAAO+B,GAAU/B,EAAO+B,EAAU,KAEnDG,EAAI,EAAMU,KAAKC,IAAI,EAAO,EAAMJ,EAAKL,GACrCD,EAAI,EAAMS,KAAKC,IAAI,EAAO,EAAML,EAAKJ,GACrCpC,EAAO,EAAIgC,GAAYE,EACvBlC,EAAO,EAAIgC,EAAW,GAAKG,EAC3BR,EAAK,IAAIgB,EAAQT,EAAGC,IAEtBI,EAAUzH,KAAK6G,GAEjBU,EAAYvH,KAAK8G,GAGnB1C,KAAK4D,UAAYF,KAAKC,IAAIpD,EAA8B,GAArBP,KAAKS,SAAW,IAAUF,EAAQ,IACrEP,KAAK6D,UAAYH,KAAKC,IAAIpD,GAASP,KAAKW,SAAW,GAAKX,KAAKS,SAAW,EAAI,GAAKF,EAAQ,IACzFP,KAAK8D,iBAAmB9D,KAAK4D,UAAY5D,KAAKS,SAC9CT,KAAK+D,iBAAmB/D,KAAK6D,UAAY7D,KAAKW,SAC9C,IAAMqD,EAAgB,CACpBC,UAAWd,EACXe,gBAAiBnE,EAAQuB,WAAa6C,EAAKC,UAAYD,EAAKE,SAC5DC,OAAQlB,EACRmB,IAAKlB,EACLmB,WAAW,GAEbxE,KAAKyE,SAAWC,EAAYC,aAAa,UAAWX,EAAehE,KAAKiB,QACxEjB,KAAK4E,SAAW5E,KAAKyE,SAASI,aAC9B7E,KAAK8E,WAAa9E,KAAKyE,SAASM,gBAAgBC,EAAaC,cAC7DjF,KAAKkF,SAAWlF,KAAKyE,SAASM,gBAAgBC,EAAaG,YAC3DnF,KAAKoF,KAAOpF,KAAKyE,SAASM,gBAAgBC,EAAaK,QACvDrF,KAAKsF,QAAUtF,KAAKyE,SAASM,gBAAgBC,EAAaO,WAC1DvF,KAAKwF,wBAGLxF,KAAKyF,QAAO,GACZzF,KAAKyE,SAASiB,SAASzF,EAAID,KAAKkB,eAAeyE,eAAe1F,EAAID,KAAK4F,kBAAoB5F,KAAK6F,gBAAgB5F,EAChHD,KAAKyE,SAASiB,SAASxF,EAAIF,KAAKkB,eAAeyE,eAAezF,EAAIF,KAAK8F,kBAAoB9F,KAAK6F,gBAAgB3F,EAEhH,IAAI6F,GAAe/F,KAAKyE,SAASiB,SAASzF,EAAIM,EAAQ,IAAMP,KAAK8D,iBAC7DkC,GAAehG,KAAKyE,SAASiB,SAASxF,EAAIK,EAAQ,IAAMP,KAAK+D,iBACjE/D,KAAKiG,WAAaF,EAAc,EAAIrC,KAAKwC,MAAMH,GAAerC,KAAKyC,KAAKJ,GACxE/F,KAAKoG,WAAaJ,EAAc,EAAItC,KAAKwC,MAAMF,GAAetC,KAAKyC,KAAKH,GACxEhG,KAAKiB,OAAOoF,yBAAyBC,KAAI,WACvC,IAAMC,EAAoBC,EAAKC,mBAC/BD,EAAKE,aAAaH,GAClBC,EAAKf,OAAOc,GACZC,EAAKG,YAAYJ,MAKnB,IAAM/E,EAAYxB,KAAKuB,WACjBqF,EAAa5G,KAAK6G,oBACxB,GAAI7G,KAAKkC,WAAY,CACnB,IAAM4E,EAAW9G,KAAK4D,UAChBmD,EAAW/G,KAAK6D,UAChBnD,EAAUV,KAAKS,SACfG,EAAUZ,KAAKW,SACfqG,EAAsB,GAC5BhH,KAAKiH,UAAYD,EAIjB,IAHA,IAAIE,EAAK3G,EAAQ,GACb4G,EAAK5G,EAAQ,GAER6G,EAAI,EAAGA,EAAI5F,EAAU/B,OAAQ2H,IAGpC,IAFA,IAAMC,EAAO7F,EAAU4F,GACnBE,EAAMD,EAAK5H,OAASmH,EAAc,EAC7BW,EAAO,EAAGA,EAAOD,EAAIC,IAAQ,CAEpC,IAAIC,EAAOD,EAAOX,EACd3G,EAAIoH,EAAKG,GACTtH,EAAImH,EAAKG,EAAO,GACpBvH,GAAQyD,KAAKwC,OAAOjG,EAAIiH,GAAMJ,GAAYA,EAC1C5G,GAAQwD,KAAKwC,OAAOhG,EAAIiH,GAAMJ,GAAYA,EAC1C,IAAIU,EAAM/D,KAAKwC,OAAQjG,EAAIiH,GAAMxG,EAAWoG,GAExCY,EADMhE,KAAKwC,OAAQhG,EAAIiH,GAAMvG,EAAWmG,GACxBrG,EAAU+G,OACPhM,IAAnBuL,EAAMU,KACRV,EAAMU,GAAW,SAEOjM,IAAtBuL,EAAMU,GAASN,KACjBJ,EAAMU,GAASN,GAAK,IAEXJ,EAAMU,GAASN,GAErBxL,KAAK2L,GAKd,IAAMzF,EAAM9B,KAAK6B,KACjBC,EAAI6F,oBAAqB,EACzB7F,EAAI8F,iBAAkB,EAClB5H,KAAKmC,eACPL,EAAI+F,sBAAuB,GAEzB7H,KAAKoC,YACPN,EAAIgG,wBAAyB,GAG/B,IAAMC,EAAgC,GACtC/H,KAAKgI,qBAAuBD,EAC5B,IAAME,EAAyB,GAC/BjI,KAAKkI,cAAgBD,EACrB,IAAME,GAA+B,GACrCnI,KAAKoI,oBAAsBD,GAC3B,IAAME,GAAcvG,EAAIuG,YAClBC,GAAYxG,EAAIwG,UAClB9K,GAAO,EACXuK,EAAoBnM,KAAK4B,IACzB2K,GAAmBvM,KAAK,GAExB,IADA,IAAI2M,GAAQ,EACHC,GAAI,EAAGA,GAAIH,GAAaG,KAC/BF,GAAUE,IAAGC,WAAY,EACrBjL,IAAQ8K,GAAUE,IAAGE,UACvBlL,KACAuK,EAAoBnM,KAAK4M,IACzBP,EAAarM,KAAK2M,IAClBJ,GAAmBvM,KAAK2M,IACxBA,GAAQ,GAEVA,KAEFN,EAAarM,KAAK2M,IAEpBvI,KAAKyF,QAAO,GA8kChB,OArkCSkD,mBAAP,SAAcC,GACZ,IACIC,EADAC,GAAc,EAEZC,IAAeH,EACfI,EAAkBhJ,KAAKyE,SAASiB,SAChCuD,EAAiBjJ,KAAKkB,eAAeyE,eACrCE,EAAkB7F,KAAK6F,gBACzBqD,EAAmBlJ,KAAK4F,kBACxBuD,EAAmBnJ,KAAK8F,kBACtBsD,EAASF,EAAmBF,EAAgB/I,EAAIgJ,EAAehJ,EAAI4F,EAAgB5F,EACnFoJ,EAASF,EAAmBH,EAAgB9I,EAAI+I,EAAe/I,EAAI2F,EAAgB3F,EACnFoJ,EAAgBtJ,KAAKuJ,eACrBC,EAAgBxJ,KAAKyJ,eACrBC,EAAM1J,KAAKwD,KAGbmG,EAAgB3J,KAAK4J,qBACzB5J,KAAK4J,qBAAmE,EAA5C5J,KAAK6J,gBAAgB7J,KAAKkB,gBACtD2H,EAAYc,GAAiB3J,KAAK4J,qBAClC,IAAIE,EAAW9J,KAAK+J,YAAc/J,KAAK4J,qBACvCE,EAAWA,EAAW,EAAIA,EAAW,EACrC9J,KAAKgK,UAAYF,EAGjB,IAAIG,EAAYjK,KAAK8D,iBAAmBwF,EAAgBQ,EACpDI,EAAYlK,KAAK+D,iBAAmByF,EAAgBM,EAEpDK,EAAY,EACZC,EAAYpK,KAAKiG,WACjBoE,EAAYrK,KAAKoG,WACrB,GAAI1C,KAAKC,IAAIyF,GAAUa,EAAW,CAChC,IAAMK,EAAQlB,EAAS,GAAO,EAAI,EAClCe,EAA2C,EAA/BzG,KAAKC,IAAIyF,EAASa,GAC9BjB,EAAgB/I,GAAKgK,EAAYK,EAAQH,EACzCC,GAAad,EAAgBgB,EAAQR,EAAWK,EAChDrB,GAAc,EAEhB,GAAIpF,KAAKC,IAAI0F,GAAUa,EAAW,CAChC,IAAMK,EAAQlB,EAAS,GAAO,EAAI,EAClCc,EAA2C,EAA/BzG,KAAKC,IAAI0F,EAASa,GAC9BlB,EAAgB9I,GAAKgK,EAAYK,EAAQJ,EACzCE,GAAab,EAAgBe,EAAQT,EAAWK,EAChDrB,GAAc,EAEhB,IAAM0B,EAAa3B,GAAaE,EAYhC,OAXID,GAAe0B,KACjBxK,KAAKiG,WAAayD,EAAIU,EAAWpK,KAAKS,UACtCT,KAAKoG,WAAasD,EAAIW,EAAWrK,KAAKW,UACtCX,KAAKyK,eAAeD,IAGtBtB,EAAmBlJ,KAAK4F,kBACxBuD,EAAmBnJ,KAAK8F,kBACxB9F,KAAK0K,YAAYC,eAAezB,EAAkB,EAAKC,GACvDnJ,KAAK4K,aAAaD,eAAe3B,EAAgB/I,EAAIiJ,EAAkBF,EAAgBjG,EAAGiG,EAAgB9I,EAAIiJ,GAEvGnJ,MAID2I,2BAAR,SAAuB6B,GACrB,IAAIK,EAAQ,EACRC,EAAQ,EACRC,EAAe,EACfC,EAAa,EACblB,EAAW9J,KAAKgK,UAChBiB,EAAenB,EACfoB,EAAOpB,EACPqB,EAAOrB,EACLsB,EAAQzC,EAAe0C,OACvBC,EAAQ3C,EAAe4C,OACvBC,EAAUxL,KAAKyE,SACfgH,EAAYzL,KAAK8E,WACjB4G,EAAU1L,KAAKkF,SACfZ,EAAStE,KAAKsF,QACdf,EAAMvE,KAAKoF,KACXpE,EAAYhB,KAAKe,WACjBwB,EAAavC,KAAKsC,YAClB/B,EAAUP,KAAKM,SACfQ,EAASd,KAAKa,QACd8K,EAAY3L,KAAKkC,WACjB8E,EAAQhH,KAAKiH,UACb2E,EAAY5L,KAAKkI,cACjB1G,EAAYxB,KAAKuB,WACjBG,EAAc1B,KAAKyB,aACnBG,EAAW5B,KAAK2B,UAChBiF,EAAa5G,KAAK6G,oBAClBgF,EAAc7L,KAAK8L,qBACnBC,EAAW/L,KAAKgM,kBAChBC,EAAYjM,KAAKkM,WACjB7L,EAAaL,KAAKI,YAClBsJ,EAAM1J,KAAKwD,KACX2I,EAAanM,KAAKQ,YAClBE,EAAUV,KAAKS,SACfG,EAAUZ,KAAKW,SACfyJ,EAAYpK,KAAKiG,WACjBoE,EAAYrK,KAAKoG,WACjBgG,EAAUpM,KAAK+B,SACfsK,EAAQrM,KAAKgC,OACbsK,EAAWtM,KAAKiC,UAChBsK,EAA0BvM,KAAKwM,yBAC/BC,EAAezM,KAAKyM,aACpBC,GAAsB1M,KAAK2M,gBAC3BC,EAAW5M,KAAK6M,cAChBC,EAAW9M,KAAK+M,cAChBC,EAAWhN,KAAKiN,cAChBC,EAAWlN,KAAKmN,cAChBrG,EAAW9G,KAAK4D,UAChBmD,EAAW/G,KAAK6D,UAChBuJ,EAAkBpN,KAAK8D,iBACvBuJ,GAAkBrN,KAAK+D,iBACvBuJ,GAAc3B,GAAa3E,EAC3BuG,GAAmBD,IAAetN,KAAKmC,aACvCqL,GAAgBF,IAAetN,KAAKoC,UAEtCqL,GAAI,EACJ1R,GAAQ,EACR2R,GAAY,EACZC,GAAY,EACZC,GAAY,EACZhL,GAAW,EACXC,GAAU,EACVC,GAAW,EACX+K,GAAY,EACZC,GAAe,EACfC,GAAc,EACdC,GAAe,EACfC,GAAgB,EAChBC,GAAgB,EAChBC,GAAgB,EAChBC,GAAgB,EAChBC,GAAgB,EAChBC,GAAgB,EAChBC,GAAgB,EASpB,GANI/D,GACFxK,KAAKwO,oBAEP3Q,EAAQ4Q,gBAAgBC,OAAOC,UAAWD,OAAOC,UAAWD,OAAOC,UAAWvD,GAC9EvN,EAAQ4Q,iBAAiBC,OAAOC,WAAYD,OAAOC,WAAYD,OAAOC,UAAWrD,GAE7EgC,GAWF,IAVA,IAAIxL,GAAM9B,KAAK6B,KACXyG,GAAYxG,GAAIwG,UAChBP,GAAsB/H,KAAKgI,qBAC3BG,GAAqBnI,KAAKoI,oBAC1BlB,GAAK3G,EAAQ,GACb4G,GAAK5G,EAAQ,GACbqO,GAAapD,EAAQ9F,SAGnB2C,GAAcvG,GAAIuG,YACfG,GAAI,EAAGA,GAAIH,GAAaG,KAC/BF,GAAUE,IAAGC,WAAY,EAI7B,IAAK,IAAInF,GAAI,EAAOA,IAAKjD,EAAYiD,KAAK,CAGxC,IADA2H,EAAenB,EACV2D,GAAI,EAAGA,GAAIxB,EAAUxM,OAAQgO,KAEhCzC,EAAa3K,GADb0K,EAAekB,EAAUwB,KACgB,GACpCP,GAAY5J,GAAIyH,GAAkBiC,GAAY1J,GAAI0H,KACrDC,EAAewC,GAAI,EAAI3D,GAEzBqB,EAAOF,EAGT,IAAK,IAAI1H,GAAI,EAAOA,IAAKlD,EAAYkD,KAAK,CAGxC,IADA0H,EAAenB,EACV2D,GAAI,EAAGA,GAAIxB,EAAUxM,OAAQgO,KAEhCzC,EAAa3K,GADb0K,EAAekB,EAAUwB,KACgB,GACpCX,GAAYvJ,GAAIwH,GAAkB6B,GAAYrJ,GAAIyH,KACrDC,EAAewC,GAAI,EAAI3D,GAEzBoB,EAAOD,EAoFT,GAhFAlP,GAAQ2N,EAAIW,EAAYQ,EAAOjK,GAAWF,EAAUgJ,EAAIU,EAAYU,EAAOpK,GAC3EoC,GAAW4G,EAAIW,EAAYQ,EAAOsB,GAAcA,EAAazC,EAAIU,EAAYU,EAAOqB,GAUlFtJ,GADEwJ,EACQ,EAAItQ,GAEJ,EAAI+G,GAIdF,GADE0J,EACS,EAAIvQ,GAEJ,EAAI+G,GAIjB6K,IAlBED,GADEtB,EACU,EAAIrQ,GAEJ,EAAI+G,IAgBM,EACxB8K,GAAYF,GAAY,EAKxBK,GAAc,EAAIF,GAElBS,IAJAR,GAAe,EAAID,IAIY,EAC/BU,GAAgBT,GAAe,EAC/BG,GALAD,GAAe,EAAIH,GAMnBK,GAAgBF,GAAe,EAC/BG,GAAgBH,GAAe,EAC/BI,GAAgBJ,GAAe,EAC/BH,IAAa,EAGbpC,EAVA4C,GAAgBP,IAUWV,EAAkBtC,EAC7CW,EAAU6C,IAAiB/N,EAAQoN,IACnClC,EAAU8C,IAAiBlB,GAAkBxC,EAEzC6B,IACFhB,EAAQ2C,IAAiB9L,EAAWmL,IACpChC,EAAQ4C,IAAiB/L,EAAWoL,IACpCjC,EAAQ6C,IAAiBhM,EAAWqL,KAIlCnC,EAAU4C,IAAiBjD,EAAMnL,IACnCmL,EAAMnL,EAAIwL,EAAU4C,KAElB5C,EAAU4C,IAAiB/C,EAAMrL,IACnCqL,EAAMrL,EAAIwL,EAAU4C,KAElB5C,EAAU6C,IAAiBlD,EAAMrI,IACnCqI,EAAMrI,EAAI0I,EAAU6C,KAElB7C,EAAU6C,IAAiBhD,EAAMvI,IACnCuI,EAAMvI,EAAI0I,EAAU6C,KAElB7C,EAAU8C,IAAiBnD,EAAMlL,IACnCkL,EAAMlL,EAAIuL,EAAU8C,KAElB9C,EAAU8C,IAAiBjD,EAAMpL,IACnCoL,EAAMpL,EAAIuL,EAAU8C,KAGlBjC,IACFhI,EAAO2J,IAAiBjN,EAAU4B,IAClC0B,EAAO4J,IAAiBlN,EAAU4B,GAAW,GAC7C0B,EAAO6J,IAAiBnN,EAAU4B,GAAW,IAG/C2B,EAAIwJ,IAAejN,EAAO+B,IAC1B0B,EAAIwJ,GAAc,GAAKjN,EAAO+B,GAAU,GAGpC0J,EAAyB,CAC3B,IAAMsC,GAASlG,EAAemG,QACxBC,GAAiBF,GAAOnJ,SACxBsJ,GAAsBH,GAAOI,cAC7BC,GAAcL,GAAOrM,MACrB2M,GAAYN,GAAOtK,IACzBwK,GAAepE,eAAec,EAAU4C,IAAgB5C,EAAU6C,IAAgB7C,EAAU8C,KAC5FS,GAAoBrE,eAAepK,EAAQmN,IAAYqB,GAAehM,EAAGxC,EAAQqN,KACjFiB,GAAOO,KAAOlE,EACd2D,GAAOQ,KAAOlE,EACd+D,GAAYvE,eAAerG,EAAO2J,IAAgB3J,EAAO4J,IAAgB5J,EAAO6J,IAAgB7J,EAAO8J,KACvGe,GAAUxE,eAAepG,EAAIwJ,IAAcxJ,EAAIwJ,GAAc,IAC7Dc,GAAOS,SAAWvT,GAClB0Q,EAAaoC,GAAQtL,GAAGD,IACxBgB,EAAO2J,IAAiBiB,GAAY/Q,EACpCmG,EAAO4J,IAAiBgB,GAAY9Q,EACpCkG,EAAO6J,IAAiBe,GAAY7Q,EACpCiG,EAAO8J,IAAiBc,GAAY5Q,EACpCiG,EAAIwJ,IAAeoB,GAAUlP,EAC7BsE,EAAIwJ,GAAc,GAAKoB,GAAUpM,EACjC0I,EAAU4C,IAAiBU,GAAe9O,EAC1CwL,EAAU6C,IAAiBS,GAAehM,EAC1C0I,EAAU8C,IAAiBQ,GAAe7O,EAI5C,GAAIoN,GAAa,CACf,IAAIiC,GAAOvI,EAAMjL,IACjB,GAAIwT,GAEF,IAAK,IAAInI,GAAI,EAAGA,GAAImI,GAAK9P,OAAQ2H,KAAK,CACpC,IAAIC,GAAO7F,EAAU4F,IACjBoI,GAAcD,GAAKnI,IACvB,GAAImG,GACF,IAAIkC,GAAe/N,EAAY0F,IAEjC,GAAIoG,GACF,IAAIkC,GAAY9N,EAASwF,IAE3B,GAAIoI,GAAa,CAQf,IAPA,IAAIG,GAAiB5H,GAAqBX,IACpCwI,GAAkBJ,GAAY/P,OAChCoQ,GAAUjE,EAAUxE,IACpB0I,GAAY3H,GAAoBf,IAC9B2I,GAAMF,GAAUC,GAClBE,GAAOD,GAAM,EAAIA,GAAM,EACvBE,GAAMH,GAAYF,GAAkBE,GAAYF,GAC3CrI,GAAO,EAAGA,GAAO0I,GAAK1I,KAAQ,CACrC,IAAI2I,GAAKV,GAAYjI,IACjB4I,GAAMD,GAAKtJ,EAEXwJ,GAAW9H,GAAWqH,GAAiBpI,GAAOyI,IAC9CK,GAAMD,GAAS1K,SACf4K,GAAMF,GAASG,SACfC,GAAMJ,GAASK,QACfxQ,GAAIoH,GAAK8I,IACbE,GAAIpQ,EAAIA,GAAIyD,KAAKwC,OAAO0I,GAAY3O,EAAIA,GAAIiH,IAAOJ,GAAYA,EAC/DuJ,GAAItN,EAAIsE,GAAK8I,GAAM,GACnB,IAAIjQ,GAAImH,GAAK8I,GAAM,GAQnB,GAPAE,GAAInQ,EAAIA,GAAIwD,KAAKwC,OAAO0I,GAAY1O,EAAIA,GAAIiH,IAAOJ,GAAYA,EAC/DuJ,GAAIrQ,EAAIoH,GAAK8I,GAAM,GACnBG,GAAIvN,EAAIsE,GAAK8I,GAAM,GACnBG,GAAIpQ,EAAImH,GAAK8I,GAAM,GACnBK,GAAIvQ,EAAIoH,GAAK8I,GAAM,GACnBK,GAAIzN,EAAIsE,GAAK8I,GAAM,GACnBK,GAAItQ,EAAImH,GAAK8I,GAAM,GACf5C,GAAkB,CACpB,IAAImD,GAAMR,GAAKrE,EACXpE,GAAM2I,GAAS5N,MACnBiF,GAAItJ,EAAIsR,GAAciB,IACtBjJ,GAAIrJ,EAAIqR,GAAciB,GAAM,GAC5BjJ,GAAIpJ,EAAIoR,GAAciB,GAAM,GAC5BjJ,GAAInJ,EAAImR,GAAciB,GAAM,GAE9B,GAAIlD,GAAe,CACjB,IAAImD,GAAOT,GAAKnE,EACZ6E,GAAMR,GAAS7L,IACnBqM,GAAI3Q,EAAIyP,GAAWiB,IACnBC,GAAI7N,EAAI2M,GAAWiB,GAAO,GAC1BC,GAAI1Q,EAAIwP,GAAWiB,GAAO,GAC1BC,GAAIC,EAAInB,GAAWiB,GAAO,GAE5BP,GAAS3H,WAAY,EAErBuH,IAAc,EACdC,IAFAH,IAAwB,GAENF,GAAkBE,GAAYF,GAElDE,GAAYA,GAAY,EAAIA,GAAY,EACxC3H,GAAoBf,IAAK0I,KAKjChF,GAASI,EAEXJ,EAAQ,EACRD,GAASM,EAGX,GAAImC,GAAa,CACfxL,GAAKgP,eACL,IAAK,IAAIC,GAAI,EAAGA,GAAI5I,GAAoB1I,OAAQsR,KAC9C5I,GAAoB4I,IAAKnF,EAAUmF,IAKvCvF,EAAQwF,mBAAmBhM,EAAaC,aAAcwG,GAAW,GAAO,GACpEzL,KAAK2M,iBACPsE,EAAWC,eAAezF,EAAWzL,KAAK4E,SAAU8G,GAEtDF,EAAQwF,mBAAmBhM,EAAaG,WAAYuG,GAAS,GAAO,GACpEF,EAAQwF,mBAAmBhM,EAAaK,OAAQd,GAAK,GAAO,GAC5DiH,EAAQwF,mBAAmBhM,EAAaO,UAAWjB,GAAQ,GAAO,GAClEkH,EAAQ2F,cAAeC,YAAYhG,EAAOE,EAAOE,EAAQ6F,eAInD1I,iBAAR,SAAarK,EAAWD,GACtB,OAASC,EAAID,EAAKA,GAAKA,GAOlBsK,8BAAP,WAWE,IAVA,IAAI2I,EAAYtR,KAAKI,YACjBkH,EAAK,EACLiK,EAAO,EACPzH,EAAW9J,KAAKgK,UAChBwH,EAAM1H,EAAW,EACjB2H,EAAM,EACNC,EAAM,EACJzF,EAAYjM,KAAKkM,WACjBkB,EAAkBpN,KAAK8D,iBACvBuJ,EAAkBrN,KAAK+D,iBACpB0J,EAAI,EAAOA,EAAIxB,EAAUxM,OAAQgO,IACxC+D,EAAM1H,EAAW2D,EAAI,EACrB8D,EAAO9D,GAAKxB,EAAUxM,OAAS,EAAI,EAAIwM,EAAUwB,EAAI,GAErDgE,GAAOrE,EAAkBoE,GADzBlK,EAAK,GAAK2E,EAAUwB,GAAK8D,IAEzBG,GAAOrE,EAAkBmE,EAAMlK,EAC/BgK,GAAahK,EAQf,OANAmK,GAAOH,EAAYlE,EAAkBtD,EACrC4H,GAAOJ,EAAYjE,EAAkBvD,EACrC9J,KAAK2R,cAAgBF,EACrBzR,KAAK4R,cAAgBF,EACrB1R,KAAK4F,kBAA0B,GAAN6L,EACzBzR,KAAK8F,kBAA0B,GAAN4L,EAClB1R,MAUF2I,6BAAP,SAAwB1I,EAAWC,EAAWH,GAC5C,OAAO4I,EAAekJ,kBAAkB5R,EAAGC,EAAGF,KAAKM,SAAUN,KAAKS,SAAUT,KAAKW,SAAUX,KAAK4D,UAAW5D,KAAK6D,UAAW9D,EAASC,KAAKqB,YAa7HsH,mBAAd,SACE1I,EACAC,EACAK,EACAG,EACAE,EACAb,EACA+R,GAEA,IAAIhL,EAAWpD,KAAKC,IAAIpD,EAAwB,GAAfG,EAAU,IAAUH,EAAQ,IACzDwG,EAAWrD,KAAKC,IAAIpD,GAASK,EAAU,GAAKF,EAAU,EAAI,GAAKH,EAAQ,IAC3E,OAAOoI,EAAekJ,kBAAkB5R,EAAGC,EAAGK,EAASG,EAASE,EAASkG,EAAUC,EAAUhH,EAAS+R,IAIzFnJ,oBAAf,SACE1I,EACAC,EACAK,EACAG,EACAE,EACAkG,EACAC,EACAhH,EACA+R,GAEA,IAAI5K,EAAK3G,EAAQ,GACb4G,EAAK5G,EAAQ,GAGjBN,GAAQyD,KAAKwC,OAAOjG,EAAIiH,GAAMJ,GAAYA,EAC1C5G,GAAQwD,KAAKwC,OAAOhG,EAAIiH,GAAMJ,GAAYA,EAE1C,IAAIgL,EAAOrO,KAAKwC,OAAQjG,EAAIiH,GAAMxG,EAAWoG,GACzCkL,EAAOtO,KAAKwC,OAAQhG,EAAIiH,GAAMvG,EAAWmG,GACzCkL,GAAQF,EAAO,GAAKrR,EACpBwR,GAAQF,EAAO,GAAKpR,EAEpBuR,EAAO,GAAKH,EAAOtR,EAAUqR,GAC7BK,EAAO,GAAKJ,EAAOtR,EAAUuR,GAC7BI,EAAO,GAAKH,EAAOxR,EAAUqR,GAC7BO,EAAO,GAAKJ,EAAOxR,EAAUuR,GAE3BM,EAAK5J,EAAe6J,IACpBC,EAAK9J,EAAe+J,IACpBC,EAAKhK,EAAeiK,IACpBC,EAAKlK,EAAemK,IAC1BP,EAAG5H,eAAepK,EAAQ4R,GAAO5R,EAAQ4R,EAAO,GAAI5R,EAAQ4R,EAAO,IACnEM,EAAG9H,eAAepK,EAAQ6R,GAAO7R,EAAQ6R,EAAO,GAAI7R,EAAQ6R,EAAO,IACnEO,EAAGhI,eAAepK,EAAQ8R,GAAO9R,EAAQ8R,EAAO,GAAI9R,EAAQ8R,EAAO,IACnEQ,EAAGlI,eAAepK,EAAQ+R,GAAO/R,EAAQ+R,EAAO,GAAI/R,EAAQ+R,EAAO,IAEnE,IAIIS,EACAC,EACA/P,EANEgQ,EAAOtK,EAAeuK,MACtBC,EAAOxK,EAAeyK,MACtBC,EAAO1K,EAAe2K,MACtBC,EAAKhB,EAKPiB,EAAQX,EAAG5S,EAAIsS,EAAGtS,EAClBwT,EAAQZ,EAAG3S,EAAIqS,EAAGrS,EACtB,GAAa,GAATsT,GAAuB,GAATC,EAChB,OAAOlB,EAAGxP,EAEZ,IAAI2Q,EAAKD,EAAQD,EAEbtT,EAAIwT,EAAKzT,GADLsS,EAAGrS,EAAIwT,EAAKnB,EAAGtS,IAErB8S,EAAKF,EACLG,EAAKP,EACLxP,EAAIsQ,IAGJP,EAAKH,EACL5P,EAFA8P,EAAKJ,GAIPI,EAAGY,cAAcJ,EAAIN,GACrBD,EAAGW,cAAcJ,EAAIJ,GACrBtV,EAAQ+V,WAAWX,EAAME,EAAME,GAC/BA,EAAKQ,YACD/B,GACFuB,EAAKS,cAAc,GAEjB/T,GAAWA,EAAQgU,QACrBhU,EAAQgU,OAAOC,SAASX,GAE1B,IAAIY,IAAMZ,EAAKpT,EAAIgD,EAAEhD,EAAIoT,EAAKtQ,EAAIE,EAAEF,EAAIsQ,EAAKnT,EAAI+C,EAAE/C,GAC/C6C,EAAIE,EAAEF,EAKV,OAJc,GAAVsQ,EAAKtQ,IACPA,IAAMsQ,EAAKpT,EAAIA,EAAIoT,EAAKnT,EAAIA,EAAI+T,GAAKZ,EAAKtQ,GAGrCA,GAOK4F,6BAAd,SACEpI,EACAG,EACAE,EACA8K,EACAoG,GAEA,IAAMoC,EAAa,GACbC,EAAO,CAAEJ,OAAQlW,EAAQsC,QACzBiU,EAAO,CAAEL,OAAQlW,EAAQsC,QACzBkU,EAAUF,EAAKJ,OACfO,EAAUF,EAAKL,OACjBtG,EAAI/M,GAAWE,EAAU,GACzB2C,EAAI,EACR,IAAKA,EAAI,EAAGA,EAAIkK,EAAGlK,IACjB2Q,EAAWtY,KAAK2H,EAAI,EAAGA,EAAI7C,EAAS6C,GACpC2Q,EAAWtY,KAAK2H,EAAI7C,EAAS6C,EAAI,EAAGA,EAAI7C,EAAU,GAEpDuQ,EAAWC,eAAe3Q,EAAS2T,EAAYxI,GAG/C,IAAI6I,EAA0B,GAAf7T,EAAU,GACrB8T,EAAW,EACXC,EAAS,EACPC,EAAmB/L,EAAegM,iBACxC,IAAKpR,EAAI,EAAGA,EAAI3C,EAAS2C,IAEvBkR,GADAD,EAAWjR,EAAI7C,EAAU,GACL6T,EACpBG,EAAiBnU,EAAQiU,GAAWjU,EAAQiU,EAAW,GAAIjU,EAASG,EAASE,EAASuT,GACtFO,EAAiBnU,EAAQkU,GAASlU,EAAQkU,EAAS,GAAIlU,EAASG,EAASE,EAASwT,GAClFC,EAAQO,WAAWN,GAASR,aAAa,IACzCpI,EAAQ8I,GAAYH,EAAQpU,EAC5ByL,EAAQ8I,EAAW,GAAKH,EAAQtR,EAChC2I,EAAQ8I,EAAW,GAAKH,EAAQnU,EAChCwL,EAAQ+I,GAAUJ,EAAQpU,EAC1ByL,EAAQ+I,EAAS,GAAKJ,EAAQtR,EAC9B2I,EAAQ+I,EAAS,GAAKJ,EAAQnU,EAGhC,GAAI4R,EACF,IAAKvO,EAAI,EAAGA,EAAImI,EAAQjM,OAAQ8D,IAC9BmI,EAAQnI,IAAMmI,EAAQnI,IASrBoF,kCAAP,WAEE,OADAA,EAAekM,2BAA2B7U,KAAKM,SAAUN,KAAKS,SAAUT,KAAKW,SAAUX,KAAKsC,YAAatC,KAAKqB,WACvGrB,MAQF2I,qBAAP,SAAgB1I,EAAWC,GACzB,IAAMuL,EAAYzL,KAAK8E,WACjBgQ,EAAe9U,KAAK+U,KAAKrP,SACzByG,EAAanM,KAAKQ,YACxB,QAAIP,EAAIwL,EAAU,GAAKqJ,EAAa7U,GAAKA,EAAIwL,EAAU,EAAIU,GAAc2I,EAAa7U,MAGlFC,EAAIuL,EAAU,GAAKqJ,EAAa5U,GAAKA,EAAIuL,EAAU,EAAIU,EAAaA,EAAa,GAAK2I,EAAa5U,IAiB3FyI,yBAAd,SACEqM,EACAjV,EAYAD,GAEA,IAAMmV,EAAOlV,EAAQkV,MAAQ,IACvBC,EAAOnV,EAAQmV,MAAQ,IACvB7N,EAAO,IAAIhF,aAAa4S,EAAOC,EAAO,GAE5C,OADAvM,EAAewM,4BAA4BH,EAAcjV,EAASsH,EAAMvH,GACjEuH,GAeKsB,8BAAd,SACEqM,EACAjV,EAYAsH,EACAvH,GAEA,IAAMsV,EAAQrV,EAAQqV,OAAS,IACzBC,EAAStV,EAAQsV,QAAU,IAC3BJ,EAAOlV,EAAQkV,MAAQ,IACvBC,EAAOnV,EAAQmV,MAAQ,IACvBI,EAAYvV,EAAQuV,WAAa,EACjCC,EAAYxV,EAAQwV,WAAa,GACjCC,EAAUzV,EAAQyV,SAAW,EAC7BC,EAAU1V,EAAQ0V,SAAW,EAC7BC,EAAS3V,EAAQ4V,aAAe,IAAI3X,EAAO,GAAK,IAAM,KACtD4X,EAAU7V,EAAQ6V,QAsCxBC,EAAMC,UAAUd,GApCD,SAACe,GAEd,IAAMC,EAASC,SAASC,cAAc,UAChCC,EAAUH,EAAOI,WAAW,MAC5BC,EAAcN,EAAIX,MAClBkB,EAAeP,EAAIV,OACzBW,EAAOZ,MAAQiB,EACfL,EAAOX,OAASiB,EAChBH,EAAQI,UAAUR,EAAK,EAAG,GAM1B,IAJA,IAAMS,EAA2BL,EAAQM,aAAa,EAAG,EAAGJ,EAAaC,GAAcjP,KACnFpH,EAAI,EACJ8C,EAAI,EACJ7C,EAAI,EACCwW,EAAM,EAAGA,EAAMxB,EAAMwB,IAC5B,IAAK,IAAIjP,EAAM,EAAGA,EAAMwN,EAAMxN,IAAO,CAGnC,IAEI4I,EAAgD,MAJpDpQ,EAAKwH,EAAM2N,EAASH,EAAe,GAARG,GAEK,GAARA,GAAeA,GAAUiB,EAAc,GAAM,IACnDC,EAAe,IAFjCpW,EAAKwW,EAAMrB,EAAUH,EAAgB,GAATG,GAEwB,GAATA,GAAgBA,GAAWiB,EAAe,GAAM,GACtDD,GACjCM,GAAYH,EAAOnG,GAAOqF,EAAOvX,EAAIqY,EAAOnG,EAAM,GAAKqF,EAAOtX,EAAIoY,EAAOnG,EAAM,GAAKqF,EAAOrX,GAAK,IACpG0E,EAAIuS,GAAaC,EAAYD,GAAaqB,EAC1C,IAAIC,EAA2B,GAApBF,EAAMzB,EAAOxN,GACxBJ,EAAKuP,GAAO3W,EAAIuV,EAChBnO,EAAKuP,EAAM,GAAK7T,EAChBsE,EAAKuP,EAAM,GAAK1W,EAAIuV,EAKpBG,GACFA,EAAQvO,EAAM4N,EAAMC,MAIc,cAAUpV,EAAM+W,kBAO1ClO,mBAAd,SAA+BsM,EAAcC,EAAcpU,GACzD,IAAK,IAAItF,EAAI,EAAGA,EAAI0Z,EAAM1Z,IACxB,IAAK,IAAIqV,EAAI,EAAGA,EAAIoE,EAAMpE,IACxB/P,EAAwB,GAAhBtF,EAAIyZ,EAAOpE,IAAUA,EAAIoE,EACjCnU,EAAwB,GAAhBtF,EAAIyZ,EAAOpE,GAAS,GAAKrV,EAAI0Z,GAO7BvM,cAAd,SAA0BsM,EAAcC,GACtC,IAAMpU,EAAS,IAAIuB,aAAa4S,EAAOC,EAAO,GAE9C,OADAvM,EAAemO,iBAAiB7B,EAAMC,EAAMpU,GACrCA,GAOF6H,wBAAP,WAEE,OADA3I,KAAKc,OAAS6H,EAAeoO,YAAY/W,KAAKS,SAAUT,KAAKW,UACtDX,MAOTjD,sBAAW4L,qCAAX,WACE,OAAO3I,KAAKyG,wBAEd,SAA6BuQ,GAC3BhX,KAAKyG,mBAAqBuQ,mCAK5Bja,sBAAW4L,wBAAX,WACE,OAAO3I,KAAKyE,0CAKd1H,sBAAW4L,0BAAX,WACE,OAAO3I,KAAKkB,oBAEd,SAAkB8V,GAChBhX,KAAKkB,eAAiB8V,mCAMxBja,sBAAW4L,iCAAX,WACE,OAAO3I,KAAKuJ,oBAEd,SAAyByN,GACvBhX,KAAKuJ,eAAiByN,EAAM,EAAIA,EAAM,mCAMxCja,sBAAW4L,iCAAX,WACE,OAAO3I,KAAKyJ,oBAEd,SAAyBuN,GACvBhX,KAAKyJ,eAAiBuN,EAAM,EAAIA,EAAM,mCAMxCja,sBAAW4L,8BAAX,WACE,OAAO3I,KAAK+J,iBAEd,SAAsBiN,GACpBhX,KAAK+J,YAAciN,EAAM,EAAIA,EAAM,mCAOrCja,sBAAW4L,4BAAX,WACE,OAAO3I,KAAKgK,2CAMdjN,sBAAW4L,uCAAX,WACE,OAAO3I,KAAK4J,0BAEd,SAA+BoN,GAC7BhX,KAAK4J,qBAAuBoN,GAAO,EAAIA,EAAM,mCAM/Cja,sBAAW4L,gCAAX,WACE,OAAO3I,KAAK6M,mBAEd,SAAwBmK,GACtBhX,KAAK6M,cAAgBmK,mCAMvBja,sBAAW4L,gCAAX,WACE,OAAO3I,KAAK+M,mBAEd,SAAwBiK,GACtBhX,KAAK+M,cAAgBiK,mCAMvBja,sBAAW4L,gCAAX,WACE,OAAO3I,KAAKiN,mBAEd,SAAwB+J,GACtBhX,KAAKiN,cAAgB+J,mCAMvBja,sBAAW4L,gCAAX,WACE,OAAO3I,KAAKmN,mBAEd,SAAwB6J,GACtBhX,KAAKmN,cAAgB6J,mCAMvBja,sBAAW4L,mCAAX,WACE,OAAO3I,KAAK8D,kDAMd/G,sBAAW4L,mCAAX,WACE,OAAO3I,KAAK+D,kDAMdhH,sBAAW4L,gCAAX,WACE,OAAO3I,KAAK2R,+CAMd5U,sBAAW4L,oCAAX,WACE,OAAO3I,KAAK4F,mDAMd7I,sBAAW4L,gCAAX,WACE,OAAO3I,KAAK4R,+CAMd7U,sBAAW4L,oCAAX,WACE,OAAO3I,KAAK8F,mDAMd/I,sBAAW4L,+BAAX,WACE,OAAO3I,KAAKiX,8CAMdla,sBAAW4L,+BAAX,WACE,OAAO3I,KAAK4K,8CAOd7N,sBAAW4L,6BAAX,WACE,OAAO3I,KAAKkM,gBAEd,SAAqBgL,GACnBA,EAAGC,MAAK,SAAC7Y,EAAGD,GACV,OAAOA,EAAIC,KAEb0B,KAAKkM,WAAagL,mCAOpBna,sBAAW4L,2BAAX,WACE,OAAO3I,KAAKM,cAEd,SAAmB0W,GACjBhX,KAAKM,SAAW0W,EAChBhX,KAAK+B,UAAW,EAChB,IAAMrB,EAAUV,KAAKS,SACfG,EAAUZ,KAAKW,SACrBX,KAAK4D,UAAYF,KAAKC,IAAIqT,EAAoB,GAAftW,EAAU,IAAUsW,EAAI,IACvDhX,KAAK6D,UAAYH,KAAKC,IAAIqT,GAAKpW,EAAU,GAAKF,EAAU,EAAI,GAAKsW,EAAI,IACrEhX,KAAK8D,iBAAmB9D,KAAK4D,UAAYlD,EACzCV,KAAK+D,iBAAmB/D,KAAK6D,UAAYjD,EACrCZ,KAAKoX,2BACPpX,KAAKwF,wBAEPxF,KAAKyF,QAAO,oCAMd1I,sBAAW4L,2BAAX,WACE,OAAO3I,KAAKS,cAEd,SAAmBuW,GACjBhX,KAAKS,SAAWuW,mCAMlBja,sBAAW4L,2BAAX,WACE,OAAO3I,KAAKW,cAEd,SAAmBqW,GACjBhX,KAAKW,SAAWqW,mCAOlBja,sBAAW4L,6BAAX,WACE,OAAO3I,KAAKe,gBAEd,SAAqBiW,GACnBhX,KAAKiC,WAAY,EACjBjC,KAAKe,WAAaiW,mCAOpBja,sBAAW4L,0BAAX,WACE,OAAO3I,KAAKa,aAEd,SAAkBmW,GAChBhX,KAAKgC,QAAS,EACdhC,KAAKa,QAAUmW,mCAMjBja,sBAAW4L,8BAAX,WACE,OAAO3I,KAAKsC,iBAEd,SAAsB0U,GACpBhX,KAAKsC,YAAc0U,mCAMrBja,sBAAW4L,kCAAX,WACE,OAAO3I,KAAK2M,qBAEd,SAA0BqK,GACxBhX,KAAK2M,gBAAkBqK,mCAMzBja,sBAAW4L,2CAAX,WACE,OAAO3I,KAAKwM,8BAEd,SAAmCwK,GACjChX,KAAKwM,yBAA2BwK,mCAKlCja,sBAAW4L,mCAAX,WACE,OAAO3I,KAAKqX,sBAEd,SAA2BL,GACzBhX,KAAK+U,KAAKuC,yBAA2BN,EACrChX,KAAKqX,iBAAmBL,mCAM1Bja,sBAAW4L,4CAAX,WACE,OAAO3I,KAAKoX,+BAEd,SAAoCJ,GAClChX,KAAKoX,0BAA4BJ,mCAa5BrO,yBAAP,SAAoBkG,EAAiBtL,EAAWD,KASzCqF,4BAAP,SAAuB4O,GAGrB,OADa,GAQR5O,yBAAP,SAAoBpC,KAQboC,wBAAP,SAAmBpC,KA71CJoC,UAAe,CAE5BjD,SAAU7H,EAAQsC,OAClBoE,IAAKd,EAAQtD,OACbqC,MAAO,IAAItE,EAAO,EAAK,EAAK,EAAK,GACjCkR,KAAM,EACNC,KAAM,EACNJ,cAAepR,EAAQsC,OACvBmP,SAAU,GAgBG3G,MAAe9K,EAAQsC,OACvBwI,MAAe9K,EAAQsC,OACvBwI,MAAe9K,EAAQsC,OACvBwI,MAAe9K,EAAQsC,OACvBwI,QAAiB9K,EAAQsC,OACzBwI,QAAiB9K,EAAQsC,OACzBwI,QAAiB9K,EAAQsC,OACzBwI,SAAkB9K,EAAQsC,OAC1BwI,SAAkB9K,EAAQsC,0BCiH7C,cAqBA,OApBIqX,+BAAA,SAAmBC,EAA0BC,GACzC,IAAMta,EAAiC,GAiBvC,OAdA8B,GAAmBuY,EAASE,eAAgBD,EAASC,eAAgB,iBAAkB,UAAWva,GAClG8B,GAAmBuY,EAASG,GAAIF,EAASE,GAAI,KAAM,SAAUxa,GAG7D8B,GAAmBuY,EAAS3b,KAAM4b,EAAS5b,KAAM,OAAQ,SAAUsB,GACnE0B,GAAgB2Y,EAASI,UAAWH,EAASG,UAAW,YAAa,aAAcza,GACnFsC,GAAoB+X,EAASK,oBAAqBJ,EAASI,oBAAqB,sBAAuB,6CAA8C1a,GACrJ0B,GAAgB2Y,EAAS7B,QAAS8B,EAAS9B,QAAS,UAAW,oCAAqCxY,GAGpG8B,GAAmBuY,EAASM,MAAOL,EAASK,MAAO,QAAS,SAAU3a,GACtE8B,GAAmBuY,EAASO,SAAUN,EAASM,SAAU,WAAY,SAAU5a,GAC/EwC,GAAgB6X,EAASQ,YAAaP,EAASO,YAAa,cAAe,0GAA2G7a,GACtLwC,GAAgB6X,EAASS,WAAYR,EAASQ,WAAY,aAAc,4BAA6B9a,GACtE,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAY9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAIX,IAiChB,OA7BIY,6BAAA,WACI,OAAOpY,KAAKmY,eAGhBC,4BAAA,SAAgBC,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLD,aAAa,CAChCE,aAAgB,cAChBC,gBAAmB,OACnBC,UAAa,8BACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,KAIDN,WAAoC,CACvDO,QAAU,EACVC,UAAa,gCAIrB,cAyBA,OAxBIC,+BAAA,SAAmBpB,EAAmCC,GAClD,IAAMta,EAAiC,GAqBvC,OApBA8B,GAAmBuY,EAASqB,cAAepB,EAASoB,cAAe,gBAAiB,SAAU1b,GAC9F8B,GAAmBuY,EAASsB,wBAAyBrB,EAASqB,wBAAyB,0BAA2B,UAAW3b,GAC7H8B,GAAmBuY,EAASuB,iBAAkBtB,EAASsB,iBAAkB,mBAAoB,UAAW5b,GACxGsC,GAAoB+X,EAASwB,mCAAoCvB,EAASuB,mCAAoC,qCAAsC,sDAAuD7b,GAC3MQ,GAAiB6Z,EAAS/R,SAAUgS,EAAShS,SAAU,WAAY,uBAAwBtI,GAC3F8B,GAAmBuY,EAASyB,mCAAoCxB,EAASwB,mCAAoC,qCAAsC,UAAW9b,GAC9J8B,GAAmBuY,EAAS0B,0CAA2CzB,EAASyB,0CAA2C,4CAA6C,UAAW/b,GACnLQ,GAAiB6Z,EAASlH,SAAUmH,EAASnH,SAAU,WAAY,uBAAwBnT,GAE3FQ,GAAiB6Z,EAAShH,QAASiH,EAASjH,QAAS,UAAW,uBAAwBrT,GACxF8B,GAAmBuY,EAAS2B,mBAAoB1B,EAAS0B,mBAAoB,qBAAsB,SAAUhc,GAC7GwC,GAAgB6X,EAAS4B,YAAa3B,EAAS2B,YAAa,cAAe,qEAAsEjc,GACjJwC,GAAgB6X,EAAS6B,oBAAqB5B,EAAS4B,oBAAqB,sBAAuB,0EAA2Elc,GAC9KwC,GAAgB6X,EAAS8B,aAAc7B,EAAS6B,aAAc,eAAgB,yHAA0Hnc,GACxMwC,GAAgB6X,EAAS+B,UAAW9B,EAAS8B,UAAW,YAAa,2DAA4Dpc,GACjIwC,GAAgB6X,EAASgC,eAAgB/B,EAAS+B,eAAgB,iBAAkB,oIAAqIrc,GACzNwC,GAAgB6X,EAASiC,cAAehC,EAASgC,cAAe,gBAAiB,2FAA4Ftc,GAC7KwC,GAAgB6X,EAASkC,2BAA4BjC,EAASiC,2BAA4B,6BAA8B,iEAAkEvc,GAC1LwC,GAAgB6X,EAASmC,sBAAuBlC,EAASkC,sBAAuB,wBAAyB,+DAAgExc,GACzKwC,GAAgB6X,EAASoC,UAAWnC,EAASmC,UAAW,YAAa,6GAA8Gzc,GACpJ,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAY9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAIU,GACJ,IAAIrB,IAsChB,OAlCIsC,6BAAA,WACI,OAAO9Z,KAAKmY,eAGhB2B,4BAAA,SAAgBzB,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLyB,aAAa,CAChCxB,aAAgB,cAChBC,gBAAmB,gBACnBC,UAAa,8BACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,GAEhB,CACI5c,KAAQ,SACR0B,KAAQ,UACRkb,UAAY,KAIDoB,WAAoC,CACvDnB,QAAU,EACVC,UAAa,yCAIrB,cAyDA,OAxDImB,+BAAA,SAAmBtC,EAAkCC,GACjD,IAAMta,EAAiC,GAqDvC,OAnDA8B,GAAmBuY,EAASuC,WAAYtC,EAASsC,WAAY,aAAc,SAAU5c,GACrF8B,GAAmBuY,EAASH,yBAA0BI,EAASJ,yBAA0B,2BAA4B,UAAWla,GAChI8B,GAAmBuY,EAASwC,SAAUvC,EAASuC,SAAU,WAAY,UAAW7c,GAChF8B,GAAmBuY,EAASyC,gBAAiBxC,EAASwC,gBAAiB,kBAAmB,UAAW9c,GACrG8B,GAAmBuY,EAAS0C,eAAgBzC,EAASyC,eAAgB,iBAAkB,SAAU/c,GACjG8B,GAAmBuY,EAAS2C,cAAe1C,EAAS0C,cAAe,gBAAiB,SAAUhd,GAC9F8B,GAAmBuY,EAAS4C,yBAA0B3C,EAAS2C,yBAA0B,2BAA4B,UAAWjd,GAChI8B,GAAmBuY,EAAS6C,gBAAiB5C,EAAS4C,gBAAiB,kBAAmB,SAAUld,GACpG8B,GAAmBuY,EAAS8C,qBAAsB7C,EAAS6C,qBAAsB,uBAAwB,UAAWnd,GACpH8B,GAAmBuY,EAAS+C,sBAAuB9C,EAAS8C,sBAAuB,wBAAyB,UAAWpd,GACvHa,GAAgBwZ,EAASgD,WAAY/C,EAAS+C,WAAY,aAAc,sBAAuBrd,GAC/F8B,GAAmBuY,EAASiD,WAAYhD,EAASgD,WAAY,aAAc,SAAUtd,GACrFQ,GAAiB6Z,EAASkD,UAAWjD,EAASiD,UAAW,YAAa,uBAAwBvd,GAC9FQ,GAAiB6Z,EAASmD,gBAAiBlD,EAASkD,gBAAiB,kBAAmB,uBAAwBxd,GAChH8B,GAAmBuY,EAASoD,wBAAyBnD,EAASmD,wBAAyB,0BAA2B,UAAWzd,GAC7HQ,GAAiB6Z,EAASqD,mBAAoBpD,EAASoD,mBAAoB,qBAAsB,uBAAwB1d,GACzH8B,GAAmBuY,EAASsD,eAAgBrD,EAASqD,eAAgB,iBAAkB,UAAW3d,GAClG8B,GAAmBuY,EAASuD,UAAWtD,EAASsD,UAAW,YAAa,UAAW5d,GACnF8B,GAAmBuY,EAASwD,WAAYvD,EAASuD,WAAY,aAAc,UAAW7d,GACtF8B,GAAmBuY,EAAShP,UAAWiP,EAASjP,UAAW,YAAa,UAAWrL,GACnF8B,GAAmBuY,EAASyD,UAAWxD,EAASwD,UAAW,YAAa,SAAU9d,GAElF8B,GAAmBuY,EAAS0D,oBAAqBzD,EAASyD,oBAAqB,sBAAuB,UAAW/d,GACjH8B,GAAmBuY,EAAS2D,mBAAoB1D,EAAS0D,mBAAoB,qBAAsB,SAAUhe,GAC7G0B,GAAgB2Y,EAAS4D,UAAW3D,EAAS2D,UAAW,YAAa,aAAcje,GACnFsC,GAAoB+X,EAAS6D,oBAAqB5D,EAAS4D,oBAAqB,sBAAuB,qDAAsDle,GAC7J0B,GAAgB2Y,EAAS8D,0BAA2B7D,EAAS6D,0BAA2B,4BAA6B,aAAcne,GACnIsC,GAAoB+X,EAAS+D,oCAAqC9D,EAAS8D,oCAAqC,sCAAuC,gDAAiDpe,GACxMsC,GAAoB+X,EAASgE,4BAA6B/D,EAAS+D,4BAA6B,8BAA+B,qDAAsDre,GACrLsC,GAAoB+X,EAASiE,oBAAqBhE,EAASgE,oBAAqB,sBAAuB,qDAAsDte,GAC7JW,GAAgB0Z,EAASkE,aAAcjE,EAASiE,aAAc,eAAgB,sBAAuBve,GACrG8B,GAAmBuY,EAASmE,aAAclE,EAASkE,aAAc,eAAgB,SAAUxe,GAC3F8B,GAAmBuY,EAASoE,aAAcnE,EAASmE,aAAc,eAAgB,SAAUze,GAC3FW,GAAgB0Z,EAASqE,aAAcpE,EAASoE,aAAc,eAAgB,sBAAuB1e,GACrG8B,GAAmBuY,EAASsE,sBAAuBrE,EAASqE,sBAAuB,wBAAyB,SAAU3e,GACtH8B,GAAmBuY,EAASuE,yBAA0BtE,EAASsE,yBAA0B,2BAA4B,SAAU5e,GAC/H8B,GAAmBuY,EAASwE,eAAgBvE,EAASuE,eAAgB,iBAAkB,UAAW7e,GAClG8B,GAAmBuY,EAASyE,iBAAkBxE,EAASwE,iBAAkB,mBAAoB,SAAU9e,GACvGQ,GAAiB6Z,EAAShH,QAASiH,EAASjH,QAAS,UAAW,uBAAwBrT,GACxF8B,GAAmBuY,EAAS0E,yBAA0BzE,EAASyE,yBAA0B,2BAA4B,UAAW/e,GAGhI8B,GAAmBuY,EAAS2E,uBAAwB1E,EAAS0E,uBAAwB,yBAA0B,UAAWhf,GAC1H8B,GAAmBuY,EAAS4E,oBAAqB3E,EAAS2E,oBAAqB,sBAAuB,UAAWjf,GACjH8B,GAAmBuY,EAAS6E,+BAAgC5E,EAAS4E,+BAAgC,iCAAkC,UAAWlf,GAClJ8B,GAAmBuY,EAAS8E,gBAAiB7E,EAAS6E,gBAAiB,kBAAmB,UAAWnf,GACrG8B,GAAmBuY,EAAS+E,WAAY9E,EAAS8E,WAAY,aAAc,SAAUpf,GACrFwC,GAAgB6X,EAASgF,SAAU/E,EAAS+E,SAAU,WAAY,kEAAmErf,GACrIwC,GAAgB6X,EAASiF,gBAAiBhF,EAASgF,gBAAiB,kBAAmB,0EAA2Etf,GAClKwC,GAAgB6X,EAASkF,WAAYjF,EAASiF,WAAY,aAAc,6FAA8Fvf,GACtKwC,GAAgB6X,EAASmF,gBAAiBlF,EAASkF,gBAAiB,kBAAmB,qHAAsHxf,GAC9K,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAY9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAI4B,GACJ,IAAIlB,GACJ,IAAIrB,IAiChB,OA7BIqF,6BAAA,WACI,OAAO7c,KAAKmY,eAGhB0E,4BAAA,SAAgBxE,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLwE,aAAa,CAChCvE,aAAgB,cAChBC,gBAAmB,eACnBC,UAAa,8BACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,KAIDmE,WAAoC,CACvDlE,QAAU,EACVC,UAAa,wCAIrB,cAuBA,OAtBIkE,+BAAA,SAAmBrF,EAA0BC,GACzC,IAAMta,EAAiC,GAmBvC,OAlBA8B,GAAmBuY,EAASsF,iBAAkBrF,EAASqF,iBAAkB,mBAAoB,SAAU3f,GACvG8B,GAAmBuY,EAASuF,eAAgBtF,EAASsF,eAAgB,iBAAkB,SAAU5f,GAEjG8B,GAAmBuY,EAASwF,YAAavF,EAASuF,YAAa,cAAe,UAAW7f,GACzF8B,GAAmBuY,EAASyF,yCAA0CxF,EAASwF,yCAA0C,2CAA4C,UAAW9f,GAIhL0B,GAAgB2Y,EAAS0F,aAAczF,EAASyF,aAAc,eAAgB,aAAc/f,GAC5F0B,GAAgB2Y,EAAS2F,oBAAqB1F,EAAS0F,oBAAqB,sBAAuB,wFAAyFhgB,GAC5L8B,GAAmBuY,EAAS4F,gCAAiC3F,EAAS2F,gCAAiC,kCAAmC,SAAUjgB,GACpJ8B,GAAmBuY,EAAS6F,uBAAwB5F,EAAS4F,uBAAwB,yBAA0B,SAAUlgB,GACzHwC,GAAgB6X,EAAS8F,YAAa7F,EAAS6F,YAAa,cAAe,kDAAmDngB,GAC9HwC,GAAgB6X,EAAS+F,YAAa9F,EAAS8F,YAAa,cAAe,qEAAsEpgB,GACjJwC,GAAgB6X,EAASkF,WAAYjF,EAASiF,WAAY,aAAc,kHAAmHvf,GAC3LwC,GAAgB6X,EAASgG,gBAAiB/F,EAAS+F,gBAAiB,kBAAmB,qCAAsCrgB,GAC7HwC,GAAgB6X,EAASiG,kBAAmBhG,EAASgG,kBAAmB,oBAAqB,4DAA6DtgB,GAC1JwC,GAAgB6X,EAASmF,gBAAiBlF,EAASkF,gBAAiB,kBAAmB,qHAAsHxf,GAC9K,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAY9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAI2E,GACJ,IAAI/C,GACJ,IAAIlB,GACJ,IAAIrB,IAqDhB,OAjDImG,6BAAA,WACI,OAAO3d,KAAKmY,eAGhBwF,4BAAA,SAAgBtF,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLsF,aAAa,CAChCrF,aAAgB,cAChBC,gBAAmB,OACnBC,UAAa,8BACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,GAEhB,CACI5c,KAAQ,SACR0B,KAAQ,oBACRkb,UAAY,GAEhB,CACI5c,KAAQ,SACR0B,KAAQ,oBACRkb,UAAY,GAEhB,CACI5c,KAAQ,qBACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,uBACR0B,KAAQ,UACRkb,UAAY,KAIDiF,WAAoC,CACvDhF,QAAU,EACVC,UAAa,gCAIrB,cAkCA,OAjCIgF,+BAAA,SAAmBnG,EAA4BC,GAC3C,IAAMta,EAAiC,GA8BvC,OA7BA8B,GAAmBuY,EAASoG,cAAenG,EAASmG,cAAe,gBAAiB,SAAUzgB,GAE9F8B,GAAmBuY,EAASqG,IAAKpG,EAASoG,IAAK,MAAO,SAAU1gB,GAChE8B,GAAmBuY,EAASsG,QAASrG,EAASqG,QAAS,UAAW,SAAU3gB,GAC5E8B,GAAmBuY,EAASuG,QAAStG,EAASsG,QAAS,UAAW,SAAU5gB,GAE5E8B,GAAmBuY,EAASwG,mBAAoBvG,EAASuG,mBAAoB,qBAAsB,SAAU7gB,GAC7G8B,GAAmBuY,EAASyG,eAAgBxG,EAASwG,eAAgB,iBAAkB,UAAW9gB,GAClG8B,GAAmBuY,EAAS0G,YAAazG,EAASyG,YAAa,cAAe,UAAW/gB,GACzF8B,GAAmBuY,EAAS2G,yBAA0B1G,EAAS0G,yBAA0B,2BAA4B,UAAWhhB,GAChI8B,GAAmBuY,EAASyD,UAAWxD,EAASwD,UAAW,YAAa,SAAU9d,GAClF8B,GAAmBuY,EAAS4G,KAAM3G,EAAS2G,KAAM,OAAQ,SAAUjhB,GACnE8B,GAAmBuY,EAAS6G,KAAM5G,EAAS4G,KAAM,OAAQ,SAAUlhB,GACnE8B,GAAmBuY,EAAS8G,KAAM7G,EAAS6G,KAAM,OAAQ,SAAUnhB,GACnEsC,GAAoB+X,EAAS+G,6BAA8B9G,EAAS8G,6BAA8B,+BAAgC,+CAAgDphB,GAClLsC,GAAoB+X,EAASgH,oCAAqC/G,EAAS+G,oCAAqC,sCAAuC,+CAAgDrhB,GACvMsC,GAAoB+X,EAASiH,yBAA0BhH,EAASgH,yBAA0B,2BAA4B,+CAAgDthB,GACtKsC,GAAoB+X,EAASkH,8BAA+BjH,EAASiH,8BAA+B,gCAAiC,+CAAgDvhB,GACrL8B,GAAmBuY,EAASmH,YAAalH,EAASkH,YAAa,cAAe,SAAUxhB,GACxF8B,GAAmBuY,EAASoH,UAAWnH,EAASmH,UAAW,YAAa,SAAUzhB,GAClF8B,GAAmBuY,EAASqH,WAAYpH,EAASoH,WAAY,aAAc,SAAU1hB,GACrF8B,GAAmBuY,EAASsH,SAAUrH,EAASqH,SAAU,WAAY,SAAU3hB,GAE/EQ,GAAiB6Z,EAAS/R,SAAUgS,EAAShS,SAAU,WAAY,uBAAwBtI,GAE3FQ,GAAiB6Z,EAASuH,SAAUtH,EAASsH,SAAU,WAAY,uBAAwB5hB,GAE3FwC,GAAgB6X,EAASwH,iBAAkBvH,EAASuH,iBAAkB,mBAAoB,2CAA4C7hB,GACtIwC,GAAgB6X,EAASyH,sBAAuBxH,EAASwH,sBAAuB,wBAAyB,uCAAwC9hB,GAClH,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAa9C,aAHgB4C,mBAAe,EAI3BA,KAAKmY,cAAgB,CACjB,IAAIyF,GACJ,IAAIpG,IA4ChB,OAxCI2H,6BAAA,WACI,OAAOnf,KAAKmY,eAGhBgH,4BAAA,SAAgB9G,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGL8G,aAAa,CAChC7G,aAAgB,cAChBC,gBAAmB,SACnBC,UAAa,iCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,uBACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,GAEhB,CACI5c,KAAQ,+BACR0B,KAAQ,UACRkb,UAAY,KAIDyG,WAAoC,CACvDC,UAAY,EACZzG,QAAU,EACVC,UAAa,kCAIrB,cAcA,OAbIyG,+BAAA,SAAmB5H,EAAkCC,GACjD,IAAMta,EAAiC,GAUvC,OATAQ,GAAiB6Z,EAAS6H,gBAAiB5H,EAAS4H,gBAAiB,kBAAmB,uBAAwBliB,GAGhH8B,GAAmBuY,EAAS8H,qBAAsB7H,EAAS6H,qBAAsB,uBAAwB,UAAWniB,GACpHQ,GAAiB6Z,EAASlH,SAAUmH,EAASnH,SAAU,WAAY,uBAAwBnT,GAE3F8B,GAAmBuY,EAAS+H,MAAO9H,EAAS8H,MAAO,QAAS,SAAUpiB,GACtE8B,GAAmBuY,EAASgI,2BAA4B/H,EAAS+H,2BAA4B,6BAA8B,UAAWriB,GACtIwC,GAAgB6X,EAASiI,UAAWhI,EAASgI,UAAW,YAAa,0CAA2CtiB,GACjF,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAc9C,aAHgB4C,mBAAe,EAI3BA,KAAKmY,cAAgB,CACjB,IAAIkH,GACJ,IAAIzB,GACJ,IAAIpG,IA4ChB,OAxCImI,6BAAA,WACI,OAAO3f,KAAKmY,eAGhBwH,4BAAA,SAAgBtH,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLsH,aAAa,CAChCrH,aAAgB,cAChBC,gBAAmB,eACnBC,UAAa,iCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,uBACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,GAEhB,CACI5c,KAAQ,+BACR0B,KAAQ,UACRkb,UAAY,KAIDiH,WAAoC,CACvDP,UAAY,EACZzG,QAAU,EACVC,UAAa,wCAIrB,cAiBA,OAhBIgH,+BAAA,SAAmBnI,EAAgCC,GAC/C,IAAMta,EAAiC,GAavC,OAZA8B,GAAmBuY,EAASoI,mBAAoBnI,EAASmI,mBAAoB,qBAAsB,SAAUziB,GAC7G8B,GAAmBuY,EAASqI,aAAcpI,EAASoI,aAAc,eAAgB,UAAW1iB,GAC5F8B,GAAmBuY,EAASyC,gBAAiBxC,EAASwC,gBAAiB,kBAAmB,UAAW9c,GACrG8B,GAAmBuY,EAAS2C,cAAe1C,EAAS0C,cAAe,gBAAiB,SAAUhd,GAC9FQ,GAAiB6Z,EAASkD,UAAWjD,EAASiD,UAAW,YAAa,uBAAwBvd,GAC9FQ,GAAiB6Z,EAASmD,gBAAiBlD,EAASkD,gBAAiB,kBAAmB,uBAAwBxd,GAEhHmC,GAAsBkY,EAASsI,SAAUrI,EAASqI,SAAU,WAAY,WAAY3iB,GACpFmC,GAAsBkY,EAASuI,SAAUtI,EAASsI,SAAU,WAAY,WAAY5iB,GACpFmC,GAAsBkY,EAASwI,UAAWvI,EAASuI,UAAW,YAAa,WAAY7iB,GACvFmC,GAAsBkY,EAASyI,OAAQxI,EAASwI,OAAQ,SAAU,WAAY9iB,GAC9E0B,GAAgB2Y,EAAS4D,UAAW3D,EAAS2D,UAAW,YAAa,oDAAqDje,GAC3F,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAc9C,aAHgB4C,mBAAe,EAI3BA,KAAKmY,cAAgB,CACjB,IAAIyH,GACJ,IAAIP,GACJ,IAAIzB,GACJ,IAAIpG,IA4ChB,OAxCI2I,6BAAA,WACI,OAAOngB,KAAKmY,eAGhBgI,4BAAA,SAAgB9H,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGL8H,aAAa,CAChC7H,aAAgB,cAChBC,gBAAmB,aACnBC,UAAa,iCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,uBACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,GAEhB,CACI5c,KAAQ,+BACR0B,KAAQ,UACRkb,UAAY,KAIDyH,WAAoC,CACvDf,UAAY,EACZzG,QAAU,EACVC,UAAa,sCAIrB,cAOA,OANIwH,+BAAA,SAAmB3I,EAAiCC,GAChD,IAAMta,EAAiC,GAGvC,OAFA8B,GAAmBuY,EAAS4I,wBAAyB3I,EAAS2I,wBAAyB,0BAA2B,SAAUjjB,GAC5H8B,GAAmBuY,EAAS6I,qBAAsB5I,EAAS4I,qBAAsB,uBAAwB,SAAUljB,GACpF,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAc9C,aAHgB4C,mBAAe,EAI3BA,KAAKmY,cAAgB,CACjB,IAAIiI,GACJ,IAAIR,GACJ,IAAIP,GACJ,IAAIzB,GACJ,IAAIpG,IAuChB,OAnCI+I,6BAAA,WACI,OAAOvgB,KAAKmY,eAGhBoI,4BAAA,SAAgBlI,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLkI,aAAa,CAChCjI,aAAgB,cAChBC,gBAAmB,cACnBC,UAAa,iCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,uBACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,KAID6H,WAAoC,CACvDnB,UAAY,EACZzG,QAAU,EACVC,UAAa,uCAIrB,cAOA,OANI4H,+BAAA,SAAmB/I,EAAqCC,GACpD,IAAMta,EAAiC,GAGvC,OAFA8B,GAAmBuY,EAASgJ,0BAA2B/I,EAAS+I,0BAA2B,4BAA6B,SAAUrjB,GAClI8B,GAAmBuY,EAASiJ,uBAAwBhJ,EAASgJ,uBAAwB,yBAA0B,SAAUtjB,GAC1F,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAc9C,aAHgB4C,mBAAe,EAI3BA,KAAKmY,cAAgB,CACjB,IAAIqI,GACJ,IAAIJ,GACJ,IAAIR,GACJ,IAAIP,GACJ,IAAIzB,GACJ,IAAIpG,IAuChB,OAnCImJ,6BAAA,WACI,OAAO3gB,KAAKmY,eAGhBwI,4BAAA,SAAgBtI,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLsI,aAAa,CAChCrI,aAAgB,cAChBC,gBAAmB,kBACnBC,UAAa,iCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,uBACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,KAIDiI,WAAoC,CACvDvB,UAAY,EACZzG,QAAU,EACVC,UAAa,2CAIrB,cAIA,OAHIgI,+BAAA,SAAmBnJ,EAAmCC,GAClD,OAAO,yBAcX,aAHgB1X,mBAAe,EAI3BA,KAAKmY,cAAgB,CACjB,IAAIyI,GACJ,IAAIJ,GACJ,IAAIJ,GACJ,IAAIR,GACJ,IAAIP,GACJ,IAAIzB,GACJ,IAAIpG,IAuChB,OAnCIqJ,6BAAA,WACI,OAAO7gB,KAAKmY,eAGhB0I,4BAAA,SAAgBxI,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLwI,aAAa,CAChCvI,aAAgB,cAChBC,gBAAmB,gBACnBC,UAAa,iCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,uBACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,KAIDmI,WAAoC,CACvDzB,UAAY,EACZzG,QAAU,EACVC,UAAa,yCAIrB,cAIA,OAHIkI,+BAAA,SAAmBrJ,EAA2CC,GAC1D,OAAO,yBAaX,aAHgB1X,mBAAe,EAI3BA,KAAKmY,cAAgB,CACjB,IAAI2I,GACJ,IAAIF,GACJ,IAAIJ,GACJ,IAAIJ,GACJ,IAAIR,GACJ,IAAIP,GACJ,IAAIzB,GACJ,IAAIpG,IA4ChB,OAxCIuJ,6BAAA,WACI,OAAO/gB,KAAKmY,eAGhB4I,4BAAA,SAAgB1I,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGL0I,aAAa,CAChCzI,aAAgB,cAChBC,gBAAmB,wBACnBC,UAAa,iCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,uBACRkb,UAAY,GAEhB,CACI5c,KAAQ,qBACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,KAIDqI,WAAoC,CACvD3B,UAAY,EACZzG,QAAU,EACVC,UAAa,iDAIrB,cAIA,OAHIoI,+BAAA,SAAmBvJ,EAA+CC,GAC9D,OAAO,yBAaX,aAHgB1X,mBAAe,EAI3BA,KAAKmY,cAAgB,CACjB,IAAI6I,GACJ,IAAIJ,GACJ,IAAIJ,GACJ,IAAIJ,GACJ,IAAIR,GACJ,IAAIP,GACJ,IAAIzB,GACJ,IAAIpG,IAiDhB,OA7CIyJ,6BAAA,WACI,OAAOjhB,KAAKmY,eAGhB8I,4BAAA,SAAgB5I,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGL4I,aAAa,CAChC3I,aAAgB,cAChBC,gBAAmB,4BACnBC,UAAa,iCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,uBACRkb,UAAY,GAEhB,CACI5c,KAAQ,qBACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,2BACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,KAIDuI,WAAoC,CACvD7B,UAAY,EACZzG,QAAU,EACVC,UAAa,qDAIrB,cAIA,OAHIsI,+BAAA,SAAmBzJ,EAA6CC,GAC5D,OAAO,yBAaX,aAHgB1X,mBAAe,EAI3BA,KAAKmY,cAAgB,CACjB,IAAI+I,GACJ,IAAIV,GACJ,IAAIJ,GACJ,IAAIR,GACJ,IAAIP,GACJ,IAAIzB,GACJ,IAAIpG,IA4ChB,OAxCI2J,6BAAA,WACI,OAAOnhB,KAAKmY,eAGhBgJ,4BAAA,SAAgB9I,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGL8I,aAAa,CAChC7I,aAAgB,cAChBC,gBAAmB,0BACnBC,UAAa,iCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,uBACRkb,UAAY,GAEhB,CACI5c,KAAQ,qBACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,KAIDyI,WAAoC,CACvD/B,UAAY,EACZzG,QAAU,EACVC,UAAa,mDAIrB,cAIA,OAHIwI,+BAAA,SAAmB3J,EAAiDC,GAChE,OAAO,yBAaX,aAHgB1X,mBAAe,EAI3BA,KAAKmY,cAAgB,CACjB,IAAIiJ,GACJ,IAAIZ,GACJ,IAAIJ,GACJ,IAAIR,GACJ,IAAIP,GACJ,IAAIzB,GACJ,IAAIpG,IAiDhB,OA7CI6J,6BAAA,WACI,OAAOrhB,KAAKmY,eAGhBkJ,4BAAA,SAAgBhJ,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLgJ,aAAa,CAChC/I,aAAgB,cAChBC,gBAAmB,8BACnBC,UAAa,iCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,uBACRkb,UAAY,GAEhB,CACI5c,KAAQ,qBACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,2BACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,KAID2I,WAAoC,CACvDjC,UAAY,EACZzG,QAAU,EACVC,UAAa,uDAIrB,cAMA,OALI0I,+BAAA,SAAmB7J,EAA6CC,GAC5D,IAAMta,EAAiC,GAEvC,OADA8B,GAAmBuY,EAAS8J,8CAA+C7J,EAAS6J,8CAA+C,gDAAiD,UAAWnkB,GAChK,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAc9C,aAHgB4C,mBAAe,EAI3BA,KAAKmY,cAAgB,CACjB,IAAImJ,GACJ,IAAI1B,GACJ,IAAIP,GACJ,IAAIzB,GACJ,IAAIpG,IAuChB,OAnCIgK,6BAAA,WACI,OAAOxhB,KAAKmY,eAGhBqJ,4BAAA,SAAgBnJ,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLmJ,aAAa,CAChClJ,aAAgB,cAChBC,gBAAmB,0BACnBC,UAAa,iCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,uBACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,KAID8I,WAAoC,CACvDpC,UAAY,EACZzG,QAAU,EACVC,UAAa,mDAIrB,cAIA,OAHI6I,+BAAA,SAAmBhK,EAAmDC,GAClE,OAAO,yBAaX,aAHgB1X,mBAAe,EAI3BA,KAAKmY,cAAgB,CACjB,IAAIsJ,GACJ,IAAIH,GACJ,IAAI1B,GACJ,IAAIP,GACJ,IAAIzB,GACJ,IAAIpG,IAiDhB,OA7CIkK,6BAAA,WACI,OAAO1hB,KAAKmY,eAGhBuJ,4BAAA,SAAgBrJ,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLqJ,aAAa,CAChCpJ,aAAgB,cAChBC,gBAAmB,gCACnBC,UAAa,iCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,uBACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,GAEhB,CACI5c,KAAQ,uBACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,kBACR0B,KAAQ,+BACRkb,UAAY,KAIDgJ,WAAoC,CACvDtC,UAAY,EACZzG,QAAU,EACVC,UAAa,yDAIrB,cAIA,OAHI+I,+BAAA,SAAmBlK,EAAsDC,GACrE,OAAO,yBAaX,aAHgB1X,mBAAe,EAI3BA,KAAKmY,cAAgB,CACjB,IAAIwJ,GACJ,IAAIF,GACJ,IAAIH,GACJ,IAAI1B,GACJ,IAAIP,GACJ,IAAIzB,GACJ,IAAIpG,IAiDhB,OA7CIoK,6BAAA,WACI,OAAO5hB,KAAKmY,eAGhByJ,4BAAA,SAAgBvJ,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLuJ,aAAa,CAChCtJ,aAAgB,cAChBC,gBAAmB,mCACnBC,UAAa,iCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,uBACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,GAEhB,CACI5c,KAAQ,uBACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,kBACR0B,KAAQ,+BACRkb,UAAY,KAIDkJ,WAAoC,CACvDxC,UAAY,EACZzG,QAAU,EACVC,UAAa,4DAIrB,cAIA,OAHIiJ,+BAAA,SAAmBpK,EAAwCC,GACvD,OAAO,yBAaX,aAHgB1X,mBAAe,EAI3BA,KAAKmY,cAAgB,CACjB,IAAI0J,GACJ,IAAIjC,GACJ,IAAIP,GACJ,IAAIzB,GACJ,IAAIpG,IA4ChB,OAxCIsK,6BAAA,WACI,OAAO9hB,KAAKmY,eAGhB2J,4BAAA,SAAgBzJ,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLyJ,aAAa,CAChCxJ,aAAgB,cAChBC,gBAAmB,qBACnBC,UAAa,iCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,uBACRkb,UAAY,GAEhB,CACI5c,KAAQ,qBACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,KAIDoJ,WAAoC,CACvD1C,UAAY,EACZzG,QAAU,EACVC,UAAa,8CAIrB,cAIA,OAHImJ,+BAAA,SAAmBtK,EAA4CC,GAC3D,OAAO,yBAaX,aAHgB1X,mBAAe,EAI3BA,KAAKmY,cAAgB,CACjB,IAAI4J,GACJ,IAAInC,GACJ,IAAIP,GACJ,IAAIzB,GACJ,IAAIpG,IAiDhB,OA7CIwK,6BAAA,WACI,OAAOhiB,KAAKmY,eAGhB6J,4BAAA,SAAgB3J,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGL2J,aAAa,CAChC1J,aAAgB,cAChBC,gBAAmB,yBACnBC,UAAa,iCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,uBACRkb,UAAY,GAEhB,CACI5c,KAAQ,qBACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,2BACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,KAIDsJ,WAAoC,CACvD5C,UAAY,EACZzG,QAAU,EACVC,UAAa,kDAIrB,cAIA,OAHIqJ,+BAAA,SAAmBxK,EAA4CC,GAC3D,OAAO,yBAeX,aAHgB1X,mBAAe,EAI3BA,KAAKmY,cAAgB,CACjB,IAAI8J,GACJ,IAAIrC,GACJ,IAAIP,GACJ,IAAIzB,GACJ,IAAIpG,IAuChB,OAnCI0K,6BAAA,WACI,OAAOliB,KAAKmY,eAGhB+J,4BAAA,SAAgB7J,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGL6J,aAAa,CAChC5J,aAAgB,cAChBC,gBAAmB,yBACnBC,UAAa,iCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,uBACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,KAIDwJ,WAAoC,CACvD9C,UAAY,EACZzG,QAAU,EACVC,UAAa,kDAIrB,cAgBA,OAfIuJ,+BAAA,SAAmB1K,EAAqCC,GACpD,IAAMta,EAAiC,GAYvC,OAVAQ,GAAiB6Z,EAAS2K,eAAgB1K,EAAS0K,eAAgB,iBAAkB,uBAAwBhlB,GAE7G8B,GAAmBuY,EAAS4K,kBAAmB3K,EAAS2K,kBAAmB,oBAAqB,SAAUjlB,GAC1GsC,GAAoB+X,EAAS6K,iCAAkC5K,EAAS4K,iCAAkC,mCAAoC,wDAAyDllB,GACvMsC,GAAoB+X,EAAS8K,gCAAiC7K,EAAS6K,gCAAiC,kCAAmC,0DAA2DnlB,GACtMsC,GAAoB+X,EAAS+K,kCAAmC9K,EAAS8K,kCAAmC,oCAAqC,+BAAgCplB,GAEjL8B,GAAmBuY,EAASgL,aAAc/K,EAAS+K,aAAc,eAAgB,UAAWrlB,GAG7D,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAc9C,aAHgB4C,mBAAe,EAI3BA,KAAKmY,cAAgB,CACjB,IAAIgK,GACJ,IAAIvC,GACJ,IAAIP,GACJ,IAAIzB,GACJ,IAAIpG,IA4ChB,OAxCIkL,6BAAA,WACI,OAAO1iB,KAAKmY,eAGhBuK,4BAAA,SAAgBrK,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLqK,aAAa,CAChCpK,aAAgB,cAChBC,gBAAmB,kBACnBC,UAAa,iCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,uBACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,GAEhB,CACI5c,KAAQ,eACR0B,KAAQ,4BACRkb,UAAY,KAIDgK,WAAoC,CACvDtD,UAAY,EACZzG,QAAU,EACVC,UAAa,2CAIrB,cAOA,OANI+J,+BAAA,SAAmBlL,EAAiCC,GAChD,IAAMta,EAAiC,GAGvC,OAFA8B,GAAmBuY,EAASmL,uBAAwBlL,EAASkL,uBAAwB,yBAA0B,UAAWxlB,GAC1HwC,GAAgB6X,EAASoL,iCAAkCnL,EAASmL,iCAAkC,mCAAoC,mFAAoFzlB,GAC/L,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAa9C,aAHgB4C,mBAAe,EAI3BA,KAAKmY,cAAgB,CACjB,IAAIwK,GACJ,IAAI/C,GACJ,IAAIP,GACJ,IAAIzB,GACJ,IAAIpG,IAuChB,OAnCIsL,6BAAA,WACI,OAAO9iB,KAAKmY,eAGhB2K,4BAAA,SAAgBzK,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLyK,aAAa,CAChCxK,aAAgB,cAChBC,gBAAmB,cACnBC,UAAa,iCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,GAEhB,CACI5c,KAAQ,oBACR0B,KAAQ,mCACRkb,UAAY,KAIDoK,WAAoC,CACvD1D,UAAY,EACZzG,QAAU,EACVC,UAAa,uCAIrB,cAqDA,OApDImK,+BAAA,SAAmBtL,EAAqCC,GACpD,IAAMta,EAAiC,GAiDvC,OAhDA8B,GAAmBuY,EAASuL,gBAAiBtL,EAASsL,gBAAiB,kBAAmB,UAAW5lB,GACrG8B,GAAmBuY,EAASwL,MAAOvL,EAASuL,MAAO,QAAS,SAAU7lB,GACtE8B,GAAmBuY,EAASyL,oBAAqBxL,EAASwL,oBAAqB,sBAAuB,SAAU9lB,GAChH8B,GAAmBuY,EAAS0L,oBAAqBzL,EAASyL,oBAAqB,sBAAuB,SAAU/lB,GAChH8B,GAAmBuY,EAAS2L,KAAM1L,EAAS0L,KAAM,OAAQ,SAAUhmB,GACnE8B,GAAmBuY,EAASyC,gBAAiBxC,EAASwC,gBAAiB,kBAAmB,UAAW9c,GACrGQ,GAAiB6Z,EAAS4L,gBAAiB3L,EAAS2L,gBAAiB,kBAAmB,uBAAwBjmB,GAChH8B,GAAmBuY,EAAS6L,oBAAqB5L,EAAS4L,oBAAqB,sBAAuB,SAAUlmB,GAChH8B,GAAmBuY,EAAS8L,mBAAoB7L,EAAS6L,mBAAoB,qBAAsB,SAAUnmB,GAC7G8B,GAAmBuY,EAAS+L,iBAAkB9L,EAAS8L,iBAAkB,mBAAoB,SAAUpmB,GACvG8B,GAAmBuY,EAASgM,iBAAkB/L,EAAS+L,iBAAkB,mBAAoB,SAAUrmB,GACvG8B,GAAmBuY,EAASiM,qBAAsBhM,EAASgM,qBAAsB,uBAAwB,SAAUtmB,GAEnHmC,GAAsBkY,EAASsI,SAAUrI,EAASqI,SAAU,WAAY,WAAY3iB,GACpFmC,GAAsBkY,EAASuI,SAAUtI,EAASsI,SAAU,WAAY,WAAY5iB,GACpFmC,GAAsBkY,EAASwI,UAAWvI,EAASuI,UAAW,YAAa,WAAY7iB,GACvFmC,GAAsBkY,EAASyI,OAAQxI,EAASwI,OAAQ,SAAU,WAAY9iB,GAC9E8B,GAAmBuY,EAASkM,gBAAiBjM,EAASiM,gBAAiB,kBAAmB,SAAUvmB,GACpG8B,GAAmBuY,EAASmM,eAAgBlM,EAASkM,eAAgB,iBAAkB,SAAUxmB,GACjG8B,GAAmBuY,EAASoM,iBAAkBnM,EAASmM,iBAAkB,mBAAoB,SAAUzmB,GACvG0B,GAAgB2Y,EAAS4D,UAAW3D,EAAS2D,UAAW,YAAa,oDAAqDje,GAC1HsC,GAAoB+X,EAASqM,8BAA+BpM,EAASoM,8BAA+B,gCAAiC,qDAAsD1mB,GAC3LQ,GAAiB6Z,EAASsM,YAAarM,EAASqM,YAAa,cAAe,uBAAwB3mB,GACpG8B,GAAmBuY,EAASuM,qBAAsBtM,EAASsM,qBAAsB,uBAAwB,SAAU5mB,GACnH8B,GAAmBuY,EAASwM,eAAgBvM,EAASuM,eAAgB,iBAAkB,SAAU7mB,GACjGQ,GAAiB6Z,EAASyM,oBAAqBxM,EAASwM,oBAAqB,sBAAuB,uBAAwB9mB,GAC5H8B,GAAmBuY,EAAS0M,mBAAoBzM,EAASyM,mBAAoB,qBAAsB,SAAU/mB,GAC7G8B,GAAmBuY,EAAS2M,qBAAsB1M,EAAS0M,qBAAsB,uBAAwB,SAAUhnB,GACnH8B,GAAmBuY,EAAS4M,eAAgB3M,EAAS2M,eAAgB,iBAAkB,SAAUjnB,GACjG8B,GAAmBuY,EAAS6M,sBAAuB5M,EAAS4M,sBAAuB,wBAAyB,SAAUlnB,GACtHQ,GAAiB6Z,EAAS/R,SAAUgS,EAAShS,SAAU,WAAY,uBAAwBtI,GAC3F8B,GAAmBuY,EAAS8M,OAAQ7M,EAAS6M,OAAQ,SAAU,SAAUnnB,GACzEQ,GAAiB6Z,EAAS+M,OAAQ9M,EAAS8M,OAAQ,SAAU,uBAAwBpnB,GAErF8B,GAAmBuY,EAASgN,gBAAiB/M,EAAS+M,gBAAiB,kBAAmB,SAAUrnB,GACpG8B,GAAmBuY,EAASiN,eAAgBhN,EAASgN,eAAgB,iBAAkB,SAAUtnB,GACjG8B,GAAmBuY,EAASkN,iBAAkBjN,EAASiN,iBAAkB,mBAAoB,SAAUvnB,GACvGQ,GAAiB6Z,EAASuH,SAAUtH,EAASsH,SAAU,WAAY,uBAAwB5hB,GAC3F8B,GAAmBuY,EAASmN,wBAAyBlN,EAASkN,wBAAyB,0BAA2B,UAAWxnB,GAC7H8B,GAAmBuY,EAASoN,oBAAqBnN,EAASmN,oBAAqB,sBAAuB,UAAWznB,GACjH8B,GAAmBuY,EAASqN,mBAAoBpN,EAASoN,mBAAoB,qBAAsB,UAAW1nB,GAC9G8B,GAAmBuY,EAASsN,uBAAwBrN,EAASqN,uBAAwB,yBAA0B,UAAW3nB,GAC1H8B,GAAmBuY,EAASuN,oBAAqBtN,EAASsN,oBAAqB,sBAAuB,UAAW5nB,GACjH8B,GAAmBuY,EAASwN,qBAAsBvN,EAASuN,qBAAsB,uBAAwB,SAAU7nB,GACnH8B,GAAmBuY,EAASyN,eAAgBxN,EAASwN,eAAgB,iBAAkB,SAAU9nB,GACjG8B,GAAmBuY,EAAS0N,aAAczN,EAASyN,aAAc,eAAgB,SAAU/nB,GAC3FwC,GAAgB6X,EAAS2N,YAAa1N,EAAS0N,YAAa,cAAe,4CAA6ChoB,GACxHwC,GAAgB6X,EAASiI,UAAWhI,EAASgI,UAAW,YAAa,+HAAgItiB,GACtK,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAgB9C,aAHgB4C,mBAAe,EAI3BA,KAAKmY,cAAgB,CACjB,IAAI4K,GACJ,IAAI1D,GACJ,IAAIzB,GACJ,IAAIpG,IA2DhB,OAvDI6N,6BAAA,WACI,OAAOrlB,KAAKmY,eAGhBkN,4BAAA,SAAgBhN,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLgN,aAAa,CAChC/M,aAAgB,cAChBC,gBAAmB,kBACnBC,UAAa,iCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,SACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,SACR0B,KAAQ,uBACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,GAEhB,CACI5c,KAAQ,+BACR0B,KAAQ,UACRkb,UAAY,KAID2M,WAAoC,CACvDjG,UAAY,EACZzG,QAAU,EACVC,UAAa,2CAIrB,cAIA,OAHI0M,+BAAA,SAAmB7N,EAA6CC,GAC5D,OAAO,yBAaX,aAHgB1X,mBAAe,EAI3BA,KAAKmY,cAAgB,CACjB,IAAImN,GACJ,IAAIvC,GACJ,IAAI1D,GACJ,IAAIzB,GACJ,IAAIpG,IA2DhB,OAvDI+N,6BAAA,WACI,OAAOvlB,KAAKmY,eAGhBoN,4BAAA,SAAgBlN,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLkN,aAAa,CAChCjN,aAAgB,cAChBC,gBAAmB,0BACnBC,UAAa,iCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,SACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,SACR0B,KAAQ,uBACRkb,UAAY,GAEhB,CACI5c,KAAQ,qBACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,KAID6M,WAAoC,CACvDnG,UAAY,EACZzG,QAAU,EACVC,UAAa,mDAIrB,cAIA,OAHI4M,+BAAA,SAAmB/N,EAAiDC,GAChE,OAAO,yBAaX,aAHgB1X,mBAAe,EAI3BA,KAAKmY,cAAgB,CACjB,IAAIqN,GACJ,IAAIzC,GACJ,IAAI1D,GACJ,IAAIzB,GACJ,IAAIpG,IAgEhB,OA5DIiO,6BAAA,WACI,OAAOzlB,KAAKmY,eAGhBsN,4BAAA,SAAgBpN,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLoN,aAAa,CAChCnN,aAAgB,cAChBC,gBAAmB,8BACnBC,UAAa,iCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,SACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,SACR0B,KAAQ,uBACRkb,UAAY,GAEhB,CACI5c,KAAQ,qBACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,2BACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,KAID+M,WAAoC,CACvDrG,UAAY,EACZzG,QAAU,EACVC,UAAa,uDAIrB,cAIA,OAHI8M,+BAAA,SAAmBjO,EAAwDC,GACvE,OAAO,yBAaX,aAHgB1X,mBAAe,EAI3BA,KAAKmY,cAAgB,CACjB,IAAIuN,GACJ,IAAI3C,GACJ,IAAI1D,GACJ,IAAIzB,GACJ,IAAIpG,IAgEhB,OA5DImO,6BAAA,WACI,OAAO3lB,KAAKmY,eAGhBwN,4BAAA,SAAgBtN,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLsN,aAAa,CAChCrN,aAAgB,cAChBC,gBAAmB,qCACnBC,UAAa,iCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,SACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,SACR0B,KAAQ,uBACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,GAEhB,CACI5c,KAAQ,uBACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,kBACR0B,KAAQ,+BACRkb,UAAY,KAIDiN,WAAoC,CACvDvG,UAAY,EACZzG,QAAU,EACVC,UAAa,8DAIrB,cAyBA,OAxBIgN,+BAAA,SAAmBnO,EAA+BC,GAC9C,IAAMta,EAAiC,GAqBvC,OApBA8B,GAAmBuY,EAASoI,mBAAoBnI,EAASmI,mBAAoB,qBAAsB,SAAUziB,GAC7G8B,GAAmBuY,EAASqI,aAAcpI,EAASoI,aAAc,eAAgB,UAAW1iB,GAC5F8B,GAAmBuY,EAASoO,WAAYnO,EAASmO,WAAY,aAAc,UAAWzoB,GACtF8B,GAAmBuY,EAASqO,gBAAiBpO,EAASoO,gBAAiB,kBAAmB,SAAU1oB,GACpG8B,GAAmBuY,EAASsO,qBAAsBrO,EAASqO,qBAAsB,uBAAwB,SAAU3oB,GACnHQ,GAAiB6Z,EAAS6H,gBAAiB5H,EAAS4H,gBAAiB,kBAAmB,uBAAwBliB,GAChH8B,GAAmBuY,EAASyC,gBAAiBxC,EAASwC,gBAAiB,kBAAmB,UAAW9c,GACrG8B,GAAmBuY,EAAS2C,cAAe1C,EAAS0C,cAAe,gBAAiB,SAAUhd,GAC9FQ,GAAiB6Z,EAASkD,UAAWjD,EAASiD,UAAW,YAAa,uBAAwBvd,GAC9FQ,GAAiB6Z,EAASmD,gBAAiBlD,EAASkD,gBAAiB,kBAAmB,uBAAwBxd,GAEhHmC,GAAsBkY,EAASuO,aAActO,EAASsO,aAAc,eAAgB,WAAY5oB,GAChGmC,GAAsBkY,EAASsI,SAAUrI,EAASqI,SAAU,WAAY,WAAY3iB,GACpFmC,GAAsBkY,EAASwO,YAAavO,EAASuO,YAAa,cAAe,WAAY7oB,GAC7FmC,GAAsBkY,EAASuI,SAAUtI,EAASsI,SAAU,WAAY,WAAY5iB,GACpFmC,GAAsBkY,EAASwI,UAAWvI,EAASuI,UAAW,YAAa,WAAY7iB,GACvFmC,GAAsBkY,EAASyI,OAAQxI,EAASwI,OAAQ,SAAU,WAAY9iB,GAC9E0B,GAAgB2Y,EAAS4D,UAAW3D,EAAS2D,UAAW,YAAa,oDAAqDje,GAC1H8B,GAAmBuY,EAASyO,YAAaxO,EAASwO,YAAa,cAAe,SAAU9oB,GAEzD,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAc9C,aAHgB4C,mBAAe,EAI3BA,KAAKmY,cAAgB,CACjB,IAAIyN,GACJ,IAAIvG,GACJ,IAAIzB,GACJ,IAAIpG,IA4ChB,OAxCI2O,6BAAA,WACI,OAAOnmB,KAAKmY,eAGhBgO,4BAAA,SAAgB9N,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGL8N,aAAa,CAChC7N,aAAgB,cAChBC,gBAAmB,YACnBC,UAAa,iCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,uBACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,GAEhB,CACI5c,KAAQ,+BACR0B,KAAQ,UACRkb,UAAY,KAIDyN,WAAoC,CACvD/G,UAAY,EACZzG,QAAU,EACVC,UAAa,qCAIrB,cAkBA,OAjBIwN,+BAAA,SAAmB3O,EAAkCC,GACjD,IAAMta,EAAiC,GAcvC,OAbA8B,GAAmBuY,EAAS4O,mBAAoB3O,EAAS2O,mBAAoB,qBAAsB,SAAUjpB,GAC7G8B,GAAmBuY,EAAS6O,aAAc5O,EAAS4O,aAAc,eAAgB,SAAUlpB,GAG3F8B,GAAmBuY,EAAS8O,uBAAwB7O,EAAS6O,uBAAwB,yBAA0B,SAAUnpB,GACzH8B,GAAmBuY,EAASoM,iBAAkBnM,EAASmM,iBAAkB,mBAAoB,SAAUzmB,GACvG8B,GAAmBuY,EAAS+O,yBAA0B9O,EAAS8O,yBAA0B,2BAA4B,SAAUppB,GAC/H8B,GAAmBuY,EAASgP,eAAgB/O,EAAS+O,eAAgB,iBAAkB,SAAUrpB,GACjG8B,GAAmBuY,EAAS8M,OAAQ7M,EAAS6M,OAAQ,SAAU,SAAUnnB,GACzE8B,GAAmBuY,EAASiP,eAAgBhP,EAASgP,eAAgB,iBAAkB,SAAUtpB,GACjG8B,GAAmBuY,EAASkP,uBAAwBjP,EAASiP,uBAAwB,yBAA0B,SAAUvpB,GACzH8B,GAAmBuY,EAASkN,iBAAkBjN,EAASiN,iBAAkB,mBAAoB,SAAUvnB,GACvG8B,GAAmBuY,EAASmP,yBAA0BlP,EAASkP,yBAA0B,2BAA4B,SAAUxpB,GAChG,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAc9C,aAHgB4C,mBAAe,EAI3BA,KAAKmY,cAAgB,CACjB,IAAIiO,GACJ,IAAI/G,GACJ,IAAIzB,GACJ,IAAIpG,IA4ChB,OAxCIqP,6BAAA,WACI,OAAO7mB,KAAKmY,eAGhB0O,4BAAA,SAAgBxO,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLwO,aAAa,CAChCvO,aAAgB,cAChBC,gBAAmB,eACnBC,UAAa,iCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,uBACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,GAEhB,CACI5c,KAAQ,eACR0B,KAAQ,4BACRkb,UAAY,KAIDmO,WAAoC,CACvDzH,UAAY,EACZzG,QAAU,EACVC,UAAa,wCAIrB,cASA,OARIkO,+BAAA,SAAmBrP,EAAqCC,GACpD,IAAMta,EAAiC,GAKvC,OAJA8B,GAAmBuY,EAASwL,MAAOvL,EAASuL,MAAO,QAAS,SAAU7lB,GACtE8B,GAAmBuY,EAAS2L,KAAM1L,EAAS0L,KAAM,OAAQ,SAAUhmB,GACnE8B,GAAmBuY,EAAS8M,OAAQ7M,EAAS6M,OAAQ,SAAU,SAAUnnB,GAE1C,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAc9C,aAHgB4C,mBAAe,EAI3BA,KAAKmY,cAAgB,CACjB,IAAI2O,GACJ,IAAIzH,GACJ,IAAIzB,GACJ,IAAIpG,IAsDhB,OAlDIuP,6BAAA,WACI,OAAO/mB,KAAKmY,eAGhB4O,4BAAA,SAAgB1O,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGL0O,aAAa,CAChCzO,aAAgB,cAChBC,gBAAmB,kBACnBC,UAAa,iCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,SACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,SACR0B,KAAQ,4BACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,KAIDqO,WAAoC,CACvD3H,UAAY,EACZzG,QAAU,EACVC,UAAa,2CAmBjB,aACI5Y,KAAKmY,cAAgB,CACjB,IAAI2E,GACF,IAAI/C,GACJ,IAAIlB,GACJ,IAAIrB,IA4FlB,OAxFIwP,6BAAA,WACI,OAAOhnB,KAAKmY,eAGhB6O,4BAAA,SAAgB3O,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGL2O,aAAa,CAChC1O,aAAgB,gBAChBC,gBAAmB,cACnBC,UAAa,kBACbyO,cAAiB,YACjBxO,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,CACJ,CACI1B,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,SACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,SACR0B,KAAQ,yBACRkb,UAAY,GAEhB,CACI5c,KAAQ,aACR0B,KAAQ,wBACRkb,UAAY,GAEhB,CACI5c,KAAQ,kBACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,uBACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,uBACRkb,UAAY,GAEhB,CACI5c,KAAQ,YACR0B,KAAQ,UACRkb,UAAY,IAGpBA,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,KAIDsO,WAAoC,CACvDE,kBAAoB,EACpBvO,QAAU,EACVwO,QAAU,EACVvO,UAAa,+BAcjB,aACI5Y,KAAKmY,cAAgB,CACjB,IAAI2E,GACF,IAAI/C,GACJ,IAAIlB,GACJ,IAAIrB,IAgHlB,OA5GI4P,6BAAA,WACI,OAAOpnB,KAAKmY,eAGhBiP,4BAAA,SAAgB/O,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGL+O,aAAa,CAChC9O,aAAgB,gBAChBC,gBAAmB,cACnBC,UAAa,kBACbyO,cAAiB,iBACjBxO,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,CACJ,CACI1B,KAAQ,UACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,SACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,YACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,aACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,SACR0B,KAAQ,yBACRkb,UAAY,GAEhB,CACI5c,KAAQ,aACR0B,KAAQ,wBACRkb,UAAY,GAEhB,CACI5c,KAAQ,kBACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,gBACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,kBACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,YACR0B,KAAQ,UACRkb,UAAY,IAGpBA,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,KAID0O,WAAoC,CACvDF,kBAAoB,EACpBvO,QAAU,EACVwO,QAAU,EACVvO,UAAa,oCAoBjB,aACI5Y,KAAKmY,cAAgB,CACjB,IAAI2E,GACF,IAAI/C,GACJ,IAAIlB,GACJ,IAAIrB,IAiGlB,OA7FI6P,6BAAA,WACI,OAAOrnB,KAAKmY,eAGhBkP,4BAAA,SAAgBhP,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLgP,aAAa,CAChC/O,aAAgB,gBAChBC,gBAAmB,cACnBC,UAAa,kBACbyO,cAAiB,eACjBxO,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,CACJ,CACI1B,KAAQ,WACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,YACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,YACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,YACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,MACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,kBACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,uBACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,uBACRkb,UAAY,GAEhB,CACI5c,KAAQ,YACR0B,KAAQ,UACRkb,UAAY,IAGpBA,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,KAID2O,WAAoC,CACvDH,kBAAoB,EACpBvO,QAAU,EACVwO,QAAU,EACVvO,UAAa,kCAkBjB,aACI5Y,KAAKmY,cAAgB,CACjB,IAAI2E,GACF,IAAI/C,GACJ,IAAIlB,GACJ,IAAIrB,IA6ElB,OAzEI8P,6BAAA,WACI,OAAOtnB,KAAKmY,eAGhBmP,4BAAA,SAAgBjP,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLiP,aAAa,CAChChP,aAAgB,gBAChBC,gBAAmB,cACnBC,UAAa,kBACbyO,cAAiB,aACjBxO,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,CACJ,CACI1B,KAAQ,SACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,eACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,MACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,YACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,kBACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,uBACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,uBACRkb,UAAY,IAGpBA,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,KAID4O,WAAoC,CACvDJ,kBAAoB,EACpBvO,QAAU,EACVwO,QAAU,EACVvO,UAAa,gCAmBjB,aACI5Y,KAAKmY,cAAgB,CACjB,IAAI2E,GACF,IAAI/C,GACJ,IAAIlB,GACJ,IAAIrB,IA4FlB,OAxFI+P,6BAAA,WACI,OAAOvnB,KAAKmY,eAGhBoP,4BAAA,SAAgBlP,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLkP,aAAa,CAChCjP,aAAgB,gBAChBC,gBAAmB,cACnBC,UAAa,kBACbyO,cAAiB,kBACjBxO,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,CACJ,CACI1B,KAAQ,SACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,OACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,eACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,kBACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,uBACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,uBACRkb,UAAY,GAEhB,CACI5c,KAAQ,YACR0B,KAAQ,UACRkb,UAAY,IAGpBA,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,KAID6O,WAAoC,CACvDL,kBAAoB,EACpBvO,QAAU,EACVwO,QAAU,EACVvO,UAAa,qCA0BjB,aACI5Y,KAAKmY,cAAgB,CACjB,IAAI2E,GACF,IAAI/C,GACJ,IAAIlB,GACJ,IAAIrB,IAsGlB,OAlGIgQ,6BAAA,WACI,OAAOxnB,KAAKmY,eAGhBqP,4BAAA,SAAgBnP,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLmP,aAAa,CAChClP,aAAgB,gBAChBC,gBAAmB,cACnBC,UAAa,kBACbyO,cAAiB,eACjBxO,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,CACJ,CACI1B,KAAQ,YACR0B,KAAQ,2BACRkb,UAAY,GAEhB,CACI5c,KAAQ,aACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,YACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,SACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,YACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,kBACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,uBACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,uBACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,oBACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,MACR0B,KAAQ,yBACRkb,UAAY,GAEhB,CACI5c,KAAQ,SACR0B,KAAQ,wBACRkb,UAAY,IAGpBA,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,KAID8O,WAAoC,CACvDN,kBAAoB,EACpBvO,QAAU,EACVwO,QAAU,EACVvO,UAAa,kCAgCjB,aACI5Y,KAAKmY,cAAgB,CACjB,IAAI2E,GACF,IAAI/C,GACJ,IAAIlB,GACJ,IAAIrB,IA0HlB,OAtHIiQ,6BAAA,WACI,OAAOznB,KAAKmY,eAGhBsP,4BAAA,SAAgBpP,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLoP,aAAa,CAChCnP,aAAgB,gBAChBC,gBAAmB,cACnBC,UAAa,kBACbyO,cAAiB,iBACjBxO,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,CACJ,CACI1B,KAAQ,SACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,cACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,iBACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,eACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,eACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,MACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,aACR0B,KAAQ,wBACRkb,UAAY,GAEhB,CACI5c,KAAQ,SACR0B,KAAQ,yBACRkb,UAAY,GAEhB,CACI5c,KAAQ,YACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,MACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,kBACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,uBACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,uBACRkb,UAAY,IAGpBA,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,KAID+O,WAAoC,CACvDP,kBAAoB,EACpBvO,QAAU,EACVwO,QAAU,EACVvO,UAAa,oCAkBjB,aACI5Y,KAAKmY,cAAgB,CACjB,IAAI2E,GACF,IAAI/C,GACJ,IAAIlB,GACJ,IAAIrB,IA6ElB,OAzEIkQ,6BAAA,WACI,OAAO1nB,KAAKmY,eAGhBuP,4BAAA,SAAgBrP,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLqP,aAAa,CAChCpP,aAAgB,gBAChBC,gBAAmB,cACnBC,UAAa,kBACbyO,cAAiB,cACjBxO,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,CACJ,CACI1B,KAAQ,WACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,YACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,eACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,YACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,kBACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,uBACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,uBACRkb,UAAY,IAGpBA,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,KAIDgP,WAAoC,CACvDR,kBAAoB,EACpBvO,QAAU,EACVwO,QAAU,EACVvO,UAAa,iCAmBjB,aACI5Y,KAAKmY,cAAgB,CACjB,IAAI2E,GACF,IAAI/C,GACJ,IAAIlB,GACJ,IAAIrB,IA4FlB,OAxFImQ,6BAAA,WACI,OAAO3nB,KAAKmY,eAGhBwP,4BAAA,SAAgBtP,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLsP,aAAa,CAChCrP,aAAgB,gBAChBC,gBAAmB,cACnBC,UAAa,kBACbyO,cAAiB,kBACjBxO,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,CACJ,CACI1B,KAAQ,SACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,iBACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,kBACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,IACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,IACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,YACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,kBACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,uBACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,uBACRkb,UAAY,IAGpBA,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,KAIDiP,WAAoC,CACvDT,kBAAoB,EACpBvO,QAAU,EACVwO,QAAU,EACVvO,UAAa,qCAqBjB,aACI5Y,KAAKmY,cAAgB,CACjB,IAAI2E,GACF,IAAI/C,GACJ,IAAIlB,GACJ,IAAIrB,IAmElB,OA/DIoQ,6BAAA,WACI,OAAO5nB,KAAKmY,eAGhByP,4BAAA,SAAgBvP,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLuP,aAAa,CAChCtP,aAAgB,gBAChBC,gBAAmB,cACnBC,UAAa,kBACbyO,cAAiB,mBACjBxO,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,CACJ,CACI1B,KAAQ,QACR0B,KAAQ,2BACRkb,UAAY,GAEhB,CACI5c,KAAQ,YACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,yBACRkb,UAAY,GAEhB,CACI5c,KAAQ,SACR0B,KAAQ,0BACRkb,UAAY,GAEhB,CACI5c,KAAQ,iBACR0B,KAAQ,UACRkb,UAAY,IAGpBA,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,KAIDkP,WAAoC,CACvDV,kBAAoB,EACpBvO,QAAU,EACVwO,QAAU,EACVvO,UAAa,sCAoBjB,aACI5Y,KAAKmY,cAAgB,CACjB,IAAI2E,GACF,IAAI/C,GACJ,IAAIlB,GACJ,IAAIrB,IAmElB,OA/DIqQ,6BAAA,WACI,OAAO7nB,KAAKmY,eAGhB0P,4BAAA,SAAgBxP,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLwP,aAAa,CAChCvP,aAAgB,gBAChBC,gBAAmB,cACnBC,UAAa,kBACbyO,cAAiB,cACjBxO,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,CACJ,CACI1B,KAAQ,SACR0B,KAAQ,yBACRkb,UAAY,GAEhB,CACI5c,KAAQ,YACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,yBACRkb,UAAY,GAEhB,CACI5c,KAAQ,SACR0B,KAAQ,wBACRkb,UAAY,GAEhB,CACI5c,KAAQ,iBACR0B,KAAQ,UACRkb,UAAY,IAGpBA,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,KAIDmP,WAAoC,CACvDX,kBAAoB,EACpBvO,QAAU,EACVwO,QAAU,EACVvO,UAAa,iCAqBjB,aACI5Y,KAAKmY,cAAgB,CACjB,IAAI2E,GACF,IAAI/C,GACJ,IAAIlB,GACJ,IAAIrB,IAwElB,OApEIsQ,6BAAA,WACI,OAAO9nB,KAAKmY,eAGhB2P,4BAAA,SAAgBzP,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLyP,aAAa,CAChCxP,aAAgB,gBAChBC,gBAAmB,cACnBC,UAAa,kBACbyO,cAAiB,oBACjBxO,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,CACJ,CACI1B,KAAQ,SACR0B,KAAQ,yBACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,SACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,YACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,yBACRkb,UAAY,IAGpBA,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,KAIDoP,WAAoC,CACvDZ,kBAAoB,EACpBvO,QAAU,EACVwO,QAAU,EACVvO,UAAa,uCAuBjB,aACI5Y,KAAKmY,cAAgB,CACjB,IAAI2E,GACF,IAAI/C,GACJ,IAAIlB,GACJ,IAAIrB,IAiGlB,OA7FIuQ,6BAAA,WACI,OAAO/nB,KAAKmY,eAGhB4P,4BAAA,SAAgB1P,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGL0P,aAAa,CAChCzP,aAAgB,gBAChBC,gBAAmB,cACnBC,UAAa,kBACbyO,cAAiB,eACjBxO,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,CACJ,CACI1B,KAAQ,QACR0B,KAAQ,yBACRkb,UAAY,GAEhB,CACI5c,KAAQ,OACR0B,KAAQ,yBACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,MACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,YACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,kBACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,uBACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,uBACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,oBACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,UACRkb,UAAY,IAGpBA,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,KAIDqP,WAAoC,CACvDb,kBAAoB,EACpBvO,QAAU,EACVwO,QAAU,EACVvO,UAAa,wCA4BjB,aACI5Y,KAAKmY,cAAgB,CACjB,IAAI2E,GACF,IAAI/C,GACJ,IAAIlB,GACJ,IAAIrB,IA2GlB,OAvGIwQ,6BAAA,WACI,OAAOhoB,KAAKmY,eAGhB6P,4BAAA,SAAgB3P,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGL2P,aAAa,CAChC1P,aAAgB,gBAChBC,gBAAmB,cACnBC,UAAa,kBACbyO,cAAiB,qBACjBxO,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,CACJ,CACI1B,KAAQ,QACR0B,KAAQ,yBACRkb,UAAY,GAEhB,CACI5c,KAAQ,OACR0B,KAAQ,yBACRkb,UAAY,GAEhB,CACI5c,KAAQ,gBACR0B,KAAQ,MACRkb,UAAY,GAEhB,CACI5c,KAAQ,mBACR0B,KAAQ,MACRkb,UAAY,GAEhB,CACI5c,KAAQ,mBACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,kBACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,MACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,YACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,kBACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,uBACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,uBACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,oBACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,UACRkb,UAAY,IAGpBA,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,KAIDsP,WAAoC,CACvDd,kBAAoB,EACpBvO,QAAU,EACVwO,QAAU,EACVvO,UAAa,8CAwBjB,aACI5Y,KAAKmY,cAAgB,CACjB,IAAI2E,GACF,IAAI/C,GACJ,IAAIlB,GACJ,IAAIrB,IAsGlB,OAlGIyQ,6BAAA,WACI,OAAOjoB,KAAKmY,eAGhB8P,4BAAA,SAAgB5P,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGL4P,aAAa,CAChC3P,aAAgB,gBAChBC,gBAAmB,cACnBC,UAAa,kBACbyO,cAAiB,cACjBxO,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,CACJ,CACI1B,KAAQ,QACR0B,KAAQ,yBACRkb,UAAY,GAEhB,CACI5c,KAAQ,SACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,eACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,MACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,SACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,YACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,kBACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,uBACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,uBACRkb,UAAY,GAEhB,CACI5c,KAAQ,MACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,UACRkb,UAAY,IAGpBA,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,KAIDuP,WAAoC,CACvDf,kBAAoB,EACpBvO,QAAU,EACVwO,QAAU,EACVvO,UAAa,iCAgBjB,aACI5Y,KAAKmY,cAAgB,CACjB,IAAI2E,GACF,IAAI/C,GACJ,IAAIlB,GACJ,IAAIrB,IA2GlB,OAvGI0Q,6BAAA,WACI,OAAOloB,KAAKmY,eAGhB+P,4BAAA,SAAgB7P,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGL6P,aAAa,CAChC5P,aAAgB,gBAChBC,gBAAmB,cACnBC,UAAa,kBACbyO,cAAiB,mBACjBxO,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,CACJ,CACI1B,KAAQ,UACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,YACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,aACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,SACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,kBACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,gBACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,kBACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,uBACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,uBACRkb,UAAY,GAEhB,CACI5c,KAAQ,YACR0B,KAAQ,UACRkb,UAAY,IAGpBA,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,KAIDwP,WAAoC,CACvDhB,kBAAoB,EACpBvO,QAAU,EACVwO,QAAU,EACVvO,UAAa,sCAkBjB,aACI5Y,KAAKmY,cAAgB,CACjB,IAAI2E,GACF,IAAI/C,GACJ,IAAIlB,GACJ,IAAIrB,IAkFlB,OA9EI2Q,6BAAA,WACI,OAAOnoB,KAAKmY,eAGhBgQ,4BAAA,SAAgB9P,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGL8P,aAAa,CAChC7P,aAAgB,gBAChBC,gBAAmB,cACnBC,UAAa,kBACbyO,cAAiB,cACjBxO,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,CACJ,CACI1B,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,SACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,kBACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,uBACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,uBACRkb,UAAY,GAEhB,CACI5c,KAAQ,YACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,cACR0B,KAAQ,qBACRkb,UAAY,IAGpBA,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,KAIDyP,WAAoC,CACvDjB,kBAAoB,EACpBvO,QAAU,EACVwO,QAAU,EACVvO,UAAa,iCAejB,aACI5Y,KAAKmY,cAAgB,CACjB,IAAI2E,GACF,IAAI/C,GACJ,IAAIlB,GACJ,IAAIrB,IAwElB,OApEI4Q,6BAAA,WACI,OAAOpoB,KAAKmY,eAGhBiQ,4BAAA,SAAgB/P,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGL+P,aAAa,CAChC9P,aAAgB,gBAChBC,gBAAmB,cACnBC,UAAa,kBACbyO,cAAiB,eACjBxO,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,CACJ,CACI1B,KAAQ,QACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,SACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,eACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,gBACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,gBACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,YACR0B,KAAQ,UACRkb,UAAY,IAGpBA,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,KAID0P,WAAoC,CACvDlB,kBAAoB,EACpBvO,QAAU,EACVwO,QAAU,EACVvO,UAAa,kCAiBjB,aACI5Y,KAAKmY,cAAgB,CACjB,IAAI2E,GACF,IAAI/C,GACJ,IAAIlB,GACJ,IAAIrB,IA6ElB,OAzEI6Q,6BAAA,WACI,OAAOroB,KAAKmY,eAGhBkQ,4BAAA,SAAgBhQ,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLgQ,aAAa,CAChC/P,aAAgB,gBAChBC,gBAAmB,cACnBC,UAAa,kBACbyO,cAAiB,oBACjBxO,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,CACJ,CACI1B,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,eACR0B,KAAQ,4BACRkb,UAAY,GAEhB,CACI5c,KAAQ,YACR0B,KAAQ,4BACRkb,UAAY,GAEhB,CACI5c,KAAQ,YACR0B,KAAQ,UACRkb,UAAY,IAGpBA,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,KAID2P,WAAoC,CACvDnB,kBAAoB,EACpBvO,QAAU,EACVwO,QAAU,EACVvO,UAAa,uCAqBjB,aACI5Y,KAAKmY,cAAgB,CACjB,IAAI2E,GACF,IAAI/C,GACJ,IAAIlB,GACJ,IAAIrB,IA4FlB,OAxFI8Q,6BAAA,WACI,OAAOtoB,KAAKmY,eAGhBmQ,4BAAA,SAAgBjQ,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLiQ,aAAa,CAChChQ,aAAgB,gBAChBC,gBAAmB,cACnBC,UAAa,kBACbyO,cAAiB,4BACjBxO,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,MACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,CACJ,CACI1B,KAAQ,QACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,SACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,eACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,YACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,YACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,cACR0B,KAAQ,sBACRkb,UAAY,GAEhB,CACI5c,KAAQ,cACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,YACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,0CACRkb,UAAY,IAGpBA,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,KAID4P,WAAoC,CACvDpB,kBAAoB,EACpBvO,QAAU,EACVwO,QAAU,EACVvO,UAAa,+CAkBjB,aACI5Y,KAAKmY,cAAgB,CACjB,IAAI2E,GACF,IAAI/C,GACJ,IAAIlB,GACJ,IAAIrB,IA4FlB,OAxFI+Q,6BAAA,WACI,OAAOvoB,KAAKmY,eAGhBoQ,4BAAA,SAAgBlQ,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLkQ,aAAa,CAChCjQ,aAAgB,gBAChBC,gBAAmB,cACnBC,UAAa,kBACbyO,cAAiB,gBACjBxO,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,CACJ,CACI1B,KAAQ,QACR0B,KAAQ,yBACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,2BACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,SACR0B,KAAQ,yBACRkb,UAAY,GAEhB,CACI5c,KAAQ,aACR0B,KAAQ,wBACRkb,UAAY,GAEhB,CACI5c,KAAQ,YACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,kBACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,uBACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,uBACRkb,UAAY,IAGpBA,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,GAEhB,CACI5c,KAAQ,kBACR0B,KAAQ,MACRkb,UAAY,KAID6P,WAAoC,CACvDrB,kBAAoB,EACpBvO,QAAU,EACVwO,QAAU,EACVvO,UAAa,mCAajB,aACI5Y,KAAKmY,cAAgB,CACjB,IAAI2E,GACF,IAAI/C,GACJ,IAAIlB,GACJ,IAAIrB,IA4FlB,OAxFIgR,6BAAA,WACI,OAAOxoB,KAAKmY,eAGhBqQ,4BAAA,SAAgBnQ,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLmQ,aAAa,CAChClQ,aAAgB,gBAChBC,gBAAmB,cACnBC,UAAa,kBACbyO,cAAiB,iBACjBxO,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,CACJ,CACI1B,KAAQ,QACR0B,KAAQ,yBACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,2BACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,SACR0B,KAAQ,yBACRkb,UAAY,GAEhB,CACI5c,KAAQ,aACR0B,KAAQ,wBACRkb,UAAY,GAEhB,CACI5c,KAAQ,YACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,kBACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,uBACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,uBACRkb,UAAY,IAGpBA,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,GAEhB,CACI5c,KAAQ,kBACR0B,KAAQ,MACRkb,UAAY,KAID8P,WAAoC,CACvDtB,kBAAoB,EACpBvO,QAAU,EACVwO,QAAU,EACVvO,UAAa,0CAyBjB,aACI5Y,KAAKmY,cAAgB,CACjB,IAAI2E,GACF,IAAI/C,GACJ,IAAIlB,GACJ,IAAIrB,IAsGlB,OAlGIiR,6BAAA,WACI,OAAOzoB,KAAKmY,eAGhBsQ,4BAAA,SAAgBpQ,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLoQ,aAAa,CAChCnQ,aAAgB,gBAChBC,gBAAmB,cACnBC,UAAa,kBACbyO,cAAiB,aACjBxO,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,CACJ,CACI1B,KAAQ,OACR0B,KAAQ,yBACRkb,UAAY,GAEhB,CACI5c,KAAQ,SACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,eACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,iBACR0B,KAAQ,0CACRkb,UAAY,GAEhB,CACI5c,KAAQ,MACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,MACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,YACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,kBACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,uBACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,uBACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,oBACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,UACRkb,UAAY,IAGpBA,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,KAID+P,WAAoC,CACvDvB,kBAAoB,EACpBvO,QAAU,EACVwO,QAAU,EACVvO,UAAa,gCAuBjB,aACI5Y,KAAKmY,cAAgB,CACjB,IAAI2E,GACF,IAAI/C,GACJ,IAAIlB,GACJ,IAAIrB,IA2GlB,OAvGIkR,6BAAA,WACI,OAAO1oB,KAAKmY,eAGhBuQ,4BAAA,SAAgBrQ,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLqQ,aAAa,CAChCpQ,aAAgB,gBAChBC,gBAAmB,cACnBC,UAAa,kBACbyO,cAAiB,mBACjBxO,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,CACJ,CACI1B,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,SACR0B,KAAQ,MACRkb,UAAY,GAEhB,CACI5c,KAAQ,SACR0B,KAAQ,yBACRkb,UAAY,GAEhB,CACI5c,KAAQ,aACR0B,KAAQ,wBACRkb,UAAY,GAEhB,CACI5c,KAAQ,OACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,YACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,kBACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,uBACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,uBACRkb,UAAY,IAGpBA,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,KAIDgQ,WAAoC,CACvDxB,kBAAoB,EACpBvO,QAAU,EACVwO,QAAU,EACVvO,UAAa,sCAiBjB,aACI5Y,KAAKmY,cAAgB,CACjB,IAAI2E,GACF,IAAI/C,GACJ,IAAIlB,GACJ,IAAIrB,IA8DlB,OA1DImR,6BAAA,WACI,OAAO3oB,KAAKmY,eAGhBwQ,4BAAA,SAAgBtQ,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLsQ,aAAa,CAChCrQ,aAAgB,gBAChBC,gBAAmB,cACnBC,UAAa,kBACbyO,cAAiB,cACjBxO,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,aACR0B,KAAQ,4BACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,CACJ,CACI1B,KAAQ,WACR0B,KAAQ,uBACRkb,UAAY,GAEhB,CACI5c,KAAQ,SACR0B,KAAQ,uBACRkb,UAAY,GAEhB,CACI5c,KAAQ,OACR0B,KAAQ,uBACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,SACRkb,UAAY,IAGpBA,UAAY,KAIDiQ,WAAoC,CACvDzB,kBAAoB,EACpBvO,QAAU,EACVwO,QAAU,EACVvO,UAAa,iCAIrB,cAuCA,OAtCIgQ,+BAAA,SAAmBnR,EAA8BC,GAC7C,IAAMta,EAAiC,GAmCvC,OAlCA8B,GAAmBuY,EAASwL,MAAOvL,EAASuL,MAAO,QAAS,SAAU7lB,GACtE8B,GAAmBuY,EAASoR,UAAWnR,EAASmR,UAAW,YAAa,SAAUzrB,GAElF8B,GAAmBuY,EAASqR,gBAAiBpR,EAASoR,gBAAiB,kBAAmB,UAAW1rB,GACrG8B,GAAmBuY,EAASsR,sBAAuBrR,EAASqR,sBAAuB,wBAAyB,UAAW3rB,GACvH8B,GAAmBuY,EAASuR,mBAAoBtR,EAASsR,mBAAoB,qBAAsB,UAAW5rB,GAC9G8B,GAAmBuY,EAASwR,cAAevR,EAASuR,cAAe,gBAAiB,SAAU7rB,GAC9F8B,GAAmBuY,EAASyR,kBAAmBxR,EAASwR,kBAAmB,oBAAqB,UAAW9rB,GAC3G8B,GAAmBuY,EAASE,eAAgBD,EAASC,eAAgB,iBAAkB,UAAWva,GAClG8B,GAAmBuY,EAAS0R,SAAUzR,EAASyR,SAAU,WAAY,SAAU/rB,GAC/E8B,GAAmBuY,EAAS2R,WAAY1R,EAAS0R,WAAY,aAAc,UAAWhsB,GACtF8B,GAAmBuY,EAAS4R,gBAAiB3R,EAAS2R,gBAAiB,kBAAmB,UAAWjsB,GACrG0B,GAAgB2Y,EAAS6R,wBAAyB5R,EAAS4R,wBAAyB,0BAA2B,kEAAmElsB,GAClL8B,GAAmBuY,EAASG,GAAIF,EAASE,GAAI,KAAM,SAAUxa,GAI7D8B,GAAmBuY,EAAS3b,KAAM4b,EAAS5b,KAAM,OAAQ,SAAUsB,GACnE8B,GAAmBuY,EAAS8R,iBAAkB7R,EAAS6R,iBAAkB,mBAAoB,UAAWnsB,GACxG0B,GAAgB2Y,EAAS+R,OAAQ9R,EAAS8R,OAAQ,SAAU,4CAA6CpsB,GACzG0B,GAAgB2Y,EAASgS,WAAY/R,EAAS+R,WAAY,aAAc,wCAAyCrsB,GACjH0B,GAAgB2Y,EAASI,UAAWH,EAASG,UAAW,YAAa,aAAcza,GACnFsC,GAAoB+X,EAASK,oBAAqBJ,EAASI,oBAAqB,sBAAuB,iDAAkD1a,GACzJ0B,GAAgB2Y,EAASiS,QAAShS,EAASgS,QAAS,UAAW,wDAAyDtsB,GACxH8B,GAAmBuY,EAASkS,YAAajS,EAASiS,YAAa,cAAe,UAAWvsB,GACzF8B,GAAmBuY,EAASmS,UAAWlS,EAASkS,UAAW,YAAa,SAAUxsB,GAGlF8B,GAAmBuY,EAASoS,oBAAqBnS,EAASmS,oBAAqB,sBAAuB,UAAWzsB,GACjH8B,GAAmBuY,EAASvT,gBAAiBwT,EAASxT,gBAAiB,kBAAmB,SAAU9G,GACpG8B,GAAmBuY,EAASM,MAAOL,EAASK,MAAO,QAAS,SAAU3a,GACtE8B,GAAmBuY,EAASO,SAAUN,EAASM,SAAU,WAAY,SAAU5a,GAC/E8B,GAAmBuY,EAASqS,UAAWpS,EAASoS,UAAW,YAAa,UAAW1sB,GACnF8B,GAAmBuY,EAASsS,QAASrS,EAASqS,QAAS,UAAW,SAAU3sB,GAC7C,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAY9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAIyQ,IAsChB,OAlCIoB,6BAAA,WACI,OAAOhqB,KAAKmY,eAGhB6R,4BAAA,SAAgB3R,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGL2R,aAAa,CAChC1R,aAAgB,cAChBC,gBAAmB,WACnBC,UAAa,qCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,UACRkb,UAAY,KAIDsR,WAAoC,CACvDC,YAAc,EACdrR,UAAa,oCAIrB,cAyBA,OAxBIsR,+BAAA,SAAmBzS,EAAoCC,GACnD,IAAMta,EAAiC,GAqBvC,OAnBAwC,GAAgB6X,EAAS0S,UAAWzS,EAASyS,UAAW,YAAa,mEAAoE/sB,GACzIwC,GAAgB6X,EAAS2S,UAAW1S,EAAS0S,UAAW,YAAa,mEAAoEhtB,GACzIwC,GAAgB6X,EAAS4S,UAAW3S,EAAS2S,UAAW,YAAa,mEAAoEjtB,GACzIwC,GAAgB6X,EAAS6S,UAAW5S,EAAS4S,UAAW,YAAa,8EAA+EltB,GACpJwC,GAAgB6X,EAAS8S,eAAgB7S,EAAS6S,eAAgB,iBAAkB,gFAAiFntB,GACrKwC,GAAgB6X,EAAS+S,UAAW9S,EAAS8S,UAAW,YAAa,8EAA+EptB,GACpJwC,GAAgB6X,EAASgT,eAAgB/S,EAAS+S,eAAgB,iBAAkB,gFAAiFrtB,GACrKwC,GAAgB6X,EAASiT,SAAUhT,EAASgT,SAAU,WAAY,iEAAkEttB,GACpIwC,GAAgB6X,EAASkT,UAAWjT,EAASiT,UAAW,YAAa,mEAAoEvtB,GACzIwC,GAAgB6X,EAASmT,OAAQlT,EAASkT,OAAQ,SAAU,iEAAkExtB,GAC9HwC,GAAgB6X,EAASoT,YAAanT,EAASmT,YAAa,cAAe,gFAAiFztB,GAC5JwC,GAAgB6X,EAASqT,UAAWpT,EAASoT,UAAW,YAAa,8EAA+E1tB,GACpJwC,GAAgB6X,EAASsT,aAAcrT,EAASqT,aAAc,eAAgB,uEAAwE3tB,GACtJwC,GAAgB6X,EAASuT,aAActT,EAASsT,aAAc,eAAgB,uEAAwE5tB,GACtJwC,GAAgB6X,EAASwT,WAAYvT,EAASuT,WAAY,aAAc,iFAAkF7tB,GAC1JwC,GAAgB6X,EAASyT,gBAAiBxT,EAASwT,gBAAiB,kBAAmB,oFAAqF9tB,GAC5KwC,GAAgB6X,EAAS0T,WAAYzT,EAASyT,WAAY,aAAc,+EAAgF/tB,GACxJwC,GAAgB6X,EAAS2T,WAAY1T,EAAS0T,WAAY,aAAc,+EAAgFhuB,GACxJwC,GAAgB6X,EAAS4T,WAAY3T,EAAS2T,WAAY,aAAc,+EAAgFjuB,GACzH,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAc9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAI+R,GACJ,IAAItB,IA2ChB,OAvCI0C,6BAAA,WACI,OAAOtrB,KAAKmY,eAGhBmT,4BAAA,SAAgBjT,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLiT,aAAa,CAChChT,aAAgB,cAChBC,gBAAmB,iBACnBC,UAAa,qCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,GAEhB,CACI5c,KAAQ,aACR0B,KAAQ,MACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,+CACRkb,UAAY,KAID4S,WAAoC,CACvDrB,YAAc,EACdrR,UAAa,0CAIrB,cAKA,OAJI2S,+BAAA,SAAmB9T,EAAmCC,GAElD,OAAO,yBAaX,aACI1X,KAAKmY,cAAgB,CACjB,IAAIoT,GACJ,IAAI3C,IAiChB,OA7BI4C,6BAAA,WACI,OAAOxrB,KAAKmY,eAGhBqT,4BAAA,SAAgBnT,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLmT,aAAa,CAChClT,aAAgB,cAChBC,gBAAmB,gBACnBC,UAAa,qCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,KAID8S,WAAoC,CACvDvB,YAAc,EACdrR,UAAa,yCAIrB,cAMA,OALI6S,+BAAA,SAAmBhU,EAAkCC,GACjD,IAAMta,EAAiC,GAEvC,OADA8B,GAAmBuY,EAASiU,uBAAwBhU,EAASgU,uBAAwB,yBAA0B,UAAWtuB,GAC3F,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAY9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAIsT,GACJ,IAAI7C,IAiChB,OA7BI+C,6BAAA,WACI,OAAO3rB,KAAKmY,eAGhBwT,4BAAA,SAAgBtT,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLsT,aAAa,CAChCrT,aAAgB,cAChBC,gBAAmB,eACnBC,UAAa,qCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,KAIDiT,WAAoC,CACvD1B,YAAc,EACdrR,UAAa,wCAIrB,cAkEA,OAjEIgT,+BAAA,SAAmBnU,EAAsCC,GACrD,IAAMta,EAAiC,GA8DvC,OA7DA8B,GAAmBuY,EAASoU,YAAanU,EAASmU,YAAa,cAAe,SAAUzuB,GACxFW,GAAgB0Z,EAASqU,aAAcpU,EAASoU,aAAc,eAAgB,sBAAuB1uB,GACrGgC,GAAiBqY,EAASsU,eAAgBrU,EAASqU,eAAgB,iBAAkB,2BAA4B3uB,GACjH8B,GAAmBuY,EAASuU,sBAAuBtU,EAASsU,sBAAuB,wBAAyB,UAAW5uB,GACvHgC,GAAiBqY,EAASwU,YAAavU,EAASuU,YAAa,cAAe,2BAA4B7uB,GACxG8B,GAAmBuY,EAASyU,mBAAoBxU,EAASwU,mBAAoB,qBAAsB,UAAW9uB,GAE9G8B,GAAmBuY,EAAS0U,yBAA0BzU,EAASyU,yBAA0B,2BAA4B,UAAW/uB,GAChI8B,GAAmBuY,EAAS2U,0BAA2B1U,EAAS0U,0BAA2B,4BAA6B,UAAWhvB,GACnIgC,GAAiBqY,EAAS4U,0BAA2B3U,EAAS2U,0BAA2B,4BAA6B,2BAA4BjvB,GAClJ8B,GAAmBuY,EAAS6U,eAAgB5U,EAAS4U,eAAgB,iBAAkB,SAAUlvB,GACjG8B,GAAmBuY,EAAS8U,eAAgB7U,EAAS6U,eAAgB,iBAAkB,SAAUnvB,GACjG8B,GAAmBuY,EAAS+U,yBAA0B9U,EAAS8U,yBAA0B,2BAA4B,UAAWpvB,GAChI8B,GAAmBuY,EAASgV,2BAA4B/U,EAAS+U,2BAA4B,6BAA8B,UAAWrvB,GACtI0B,GAAgB2Y,EAASiV,wBAAyBhV,EAASgV,wBAAyB,0BAA2B,kJAAmJtvB,GAClQW,GAAgB0Z,EAASkV,aAAcjV,EAASiV,aAAc,eAAgB,sBAAuBvvB,GACrGmB,GAA2BkZ,EAASmV,yBAA0BlV,EAASkV,yBAA0B,2BAA4B,iCAAkCxvB,GAC/JgC,GAAiBqY,EAASoV,eAAgBnV,EAASmV,eAAgB,iBAAkB,2BAA4BzvB,GACjH8B,GAAmBuY,EAASqV,sBAAuBpV,EAASoV,sBAAuB,wBAAyB,UAAW1vB,GACvH8B,GAAmBuY,EAASsV,gBAAiBrV,EAASqV,gBAAiB,kBAAmB,UAAW3vB,GACrGW,GAAgB0Z,EAASuV,cAAetV,EAASsV,cAAe,gBAAiB,sBAAuB5vB,GACxGmB,GAA2BkZ,EAASwV,0BAA2BvV,EAASuV,0BAA2B,4BAA6B,iCAAkC7vB,GAClKgC,GAAiBqY,EAASyV,gBAAiBxV,EAASwV,gBAAiB,kBAAmB,2BAA4B9vB,GACpH8B,GAAmBuY,EAAS0V,uBAAwBzV,EAASyV,uBAAwB,yBAA0B,UAAW/vB,GAC1H8B,GAAmBuY,EAAS2V,eAAgB1V,EAAS0V,eAAgB,iBAAkB,UAAWhwB,GAElG8B,GAAmBuY,EAAS4V,kBAAmB3V,EAAS2V,kBAAmB,oBAAqB,SAAUjwB,GAC1G8B,GAAmBuY,EAAS6V,iBAAkB5V,EAAS4V,iBAAkB,mBAAoB,UAAWlwB,GACxG8B,GAAmBuY,EAAS8V,iBAAkB7V,EAAS6V,iBAAkB,mBAAoB,UAAWnwB,GACxG8B,GAAmBuY,EAAS+V,kBAAmB9V,EAAS8V,kBAAmB,oBAAqB,UAAWpwB,GAC3GgC,GAAiBqY,EAASgW,gBAAiB/V,EAAS+V,gBAAiB,kBAAmB,2BAA4BrwB,GACpH8B,GAAmBuY,EAASiW,uBAAwBhW,EAASgW,uBAAwB,yBAA0B,UAAWtwB,GAC1H8B,GAAmBuY,EAASkW,wBAAyBjW,EAASiW,wBAAyB,0BAA2B,UAAWvwB,GAC7H8B,GAAmBuY,EAASmW,sBAAuBlW,EAASkW,sBAAuB,wBAAyB,SAAUxwB,GACtHmB,GAA2BkZ,EAASoW,yBAA0BnW,EAASmW,yBAA0B,2BAA4B,iCAAkCzwB,GAC/JgC,GAAiBqY,EAASqW,eAAgBpW,EAASoW,eAAgB,iBAAkB,2BAA4B1wB,GACjH8B,GAAmBuY,EAASsW,sBAAuBrW,EAASqW,sBAAuB,wBAAyB,UAAW3wB,GACvH8B,GAAmBuY,EAASuW,kBAAmBtW,EAASsW,kBAAmB,oBAAqB,SAAU5wB,GAC1GmB,GAA2BkZ,EAASwW,4BAA6BvW,EAASuW,4BAA6B,8BAA+B,iCAAkC7wB,GACxKgC,GAAiBqY,EAASyW,kBAAmBxW,EAASwW,kBAAmB,oBAAqB,2BAA4B9wB,GAC1H8B,GAAmBuY,EAAS0W,yBAA0BzW,EAASyW,yBAA0B,2BAA4B,UAAW/wB,GAChImB,GAA2BkZ,EAAS2W,4BAA6B1W,EAAS0W,4BAA6B,8BAA+B,iCAAkChxB,GACxKgC,GAAiBqY,EAAS4W,kBAAmB3W,EAAS2W,kBAAmB,oBAAqB,2BAA4BjxB,GAC1H8B,GAAmBuY,EAAS6W,yBAA0B5W,EAAS4W,yBAA0B,2BAA4B,UAAWlxB,GAChI8B,GAAmBuY,EAAS8W,UAAW7W,EAAS6W,UAAW,YAAa,SAAUnxB,GAClFW,GAAgB0Z,EAAS+W,cAAe9W,EAAS8W,cAAe,gBAAiB,sBAAuBpxB,GACxG8B,GAAmBuY,EAASgX,cAAe/W,EAAS+W,cAAe,gBAAiB,SAAUrxB,GAC9FgC,GAAiBqY,EAASiX,gBAAiBhX,EAASgX,gBAAiB,kBAAmB,2BAA4BtxB,GACpH8B,GAAmBuY,EAASkX,uBAAwBjX,EAASiX,uBAAwB,yBAA0B,UAAWvxB,GAC1H8B,GAAmBuY,EAASmX,iBAAkBlX,EAASkX,iBAAkB,mBAAoB,UAAWxxB,GACxG8B,GAAmBuY,EAASoX,2BAA4BnX,EAASmX,2BAA4B,6BAA8B,UAAWzxB,GACtI8B,GAAmBuY,EAASqX,0BAA2BpX,EAASoX,0BAA2B,4BAA6B,UAAW1xB,GACnI8B,GAAmBuY,EAASsX,kCAAmCrX,EAASqX,kCAAmC,oCAAqC,UAAW3xB,GAC3J8B,GAAmBuY,EAASuX,uBAAwBtX,EAASsX,uBAAwB,yBAA0B,UAAW5xB,GAC1H8B,GAAmBuY,EAASwX,oBAAqBvX,EAASuX,oBAAqB,sBAAuB,UAAW7xB,GACjH8B,GAAmBuY,EAASyX,wBAAyBxX,EAASwX,wBAAyB,0BAA2B,UAAW9xB,GAC7H8B,GAAmBuY,EAAS0X,YAAazX,EAASyX,YAAa,cAAe,UAAW/xB,GACzF8B,GAAmBuY,EAAS2X,qBAAsB1X,EAAS0X,qBAAsB,uBAAwB,UAAWhyB,GACpH8B,GAAmBuY,EAAS4X,iCAAkC3X,EAAS2X,iCAAkC,mCAAoC,UAAWjyB,GACxJ8B,GAAmBuY,EAAS6X,uBAAwB5X,EAAS4X,uBAAwB,yBAA0B,UAAWlyB,GAC1H8B,GAAmBuY,EAAS8X,qBAAsB7X,EAAS6X,qBAAsB,uBAAwB,UAAWnyB,GACrF,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAa9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAIyT,GACJ,IAAIH,GACJ,IAAI7C,IAiChB,OA7BI4G,6BAAA,WACI,OAAOxvB,KAAKmY,eAGhBqX,4BAAA,SAAgBnX,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLmX,aAAa,CAChClX,aAAgB,cAChBC,gBAAmB,mBACnBC,UAAa,qCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,KAID8W,WAAoC,CACvDvF,YAAc,EACdrR,UAAa,4CAIrB,cAoCA,OAnCI6W,+BAAA,SAAmBhY,EAAwCC,GACvD,IAAMta,EAAiC,GAgCvC,OA/BAW,GAAgB0Z,EAASiY,iBAAkBhY,EAASgY,iBAAkB,mBAAoB,sBAAuBtyB,GAEjH8B,GAAmBuY,EAAS0U,yBAA0BzU,EAASyU,yBAA0B,2BAA4B,UAAW/uB,GAChI8B,GAAmBuY,EAAS2U,0BAA2B1U,EAAS0U,0BAA2B,4BAA6B,UAAWhvB,GACnIgC,GAAiBqY,EAAS4U,0BAA2B3U,EAAS2U,0BAA2B,4BAA6B,2BAA4BjvB,GAClJ8B,GAAmBuY,EAAS6U,eAAgB5U,EAAS4U,eAAgB,iBAAkB,SAAUlvB,GACjG8B,GAAmBuY,EAAS8U,eAAgB7U,EAAS6U,eAAgB,iBAAkB,SAAUnvB,GACjG8B,GAAmBuY,EAAS+U,yBAA0B9U,EAAS8U,yBAA0B,2BAA4B,UAAWpvB,GAChIgC,GAAiBqY,EAASoV,eAAgBnV,EAASmV,eAAgB,iBAAkB,2BAA4BzvB,GACjH8B,GAAmBuY,EAASkY,YAAajY,EAASiY,YAAa,cAAe,UAAWvyB,GACzF8B,GAAmBuY,EAASmY,cAAelY,EAASkY,cAAe,gBAAiB,SAAUxyB,GAE9F8B,GAAmBuY,EAASmW,sBAAuBlW,EAASkW,sBAAuB,wBAAyB,SAAUxwB,GACtH8B,GAAmBuY,EAASoY,eAAgBnY,EAASmY,eAAgB,iBAAkB,UAAWzyB,GAClGW,GAAgB0Z,EAASqY,aAAcpY,EAASoY,aAAc,eAAgB,sBAAuB1yB,GACrG8B,GAAmBuY,EAASsY,2BAA4BrY,EAASqY,2BAA4B,6BAA8B,SAAU3yB,GACrI8B,GAAmBuY,EAASuY,wBAAyBtY,EAASsY,wBAAyB,0BAA2B,SAAU5yB,GAC5H8B,GAAmBuY,EAASwY,iBAAkBvY,EAASuY,iBAAkB,mBAAoB,SAAU7yB,GACvG8B,GAAmBuY,EAASyY,eAAgBxY,EAASwY,eAAgB,iBAAkB,SAAU9yB,GACjG8B,GAAmBuY,EAAS0Y,0BAA2BzY,EAASyY,0BAA2B,4BAA6B,SAAU/yB,GAClI8B,GAAmBuY,EAAS2Y,kBAAmB1Y,EAAS0Y,kBAAmB,oBAAqB,UAAWhzB,GAC3G8B,GAAmBuY,EAAS4Y,uBAAwB3Y,EAAS2Y,uBAAwB,yBAA0B,SAAUjzB,GACzH8B,GAAmBuY,EAAS6Y,wBAAyB5Y,EAAS4Y,wBAAyB,0BAA2B,SAAUlzB,GAC5H8B,GAAmBuY,EAAS8Y,gCAAiC7Y,EAAS6Y,gCAAiC,kCAAmC,SAAUnzB,GACpJgC,GAAiBqY,EAASyW,kBAAmBxW,EAASwW,kBAAmB,oBAAqB,2BAA4B9wB,GAC1HQ,GAAiB6Z,EAAS+Y,YAAa9Y,EAAS8Y,YAAa,cAAe,uBAAwBpzB,GACpG8B,GAAmBuY,EAASgZ,YAAa/Y,EAAS+Y,YAAa,cAAe,SAAUrzB,GAExF8B,GAAmBuY,EAASiZ,YAAahZ,EAASgZ,YAAa,cAAe,UAAWtzB,GACzF8B,GAAmBuY,EAASkZ,sBAAuBjZ,EAASiZ,sBAAuB,wBAAyB,UAAWvzB,GACvH8B,GAAmBuY,EAASmZ,YAAalZ,EAASkZ,YAAa,cAAe,UAAWxzB,GAC1D,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAY9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAIsX,GACJ,IAAIhE,GACJ,IAAI7C,IAiChB,OA7BIiI,6BAAA,WACI,OAAO7wB,KAAKmY,eAGhB0Y,4BAAA,SAAgBxY,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLwY,aAAa,CAChCvY,aAAgB,cAChBC,gBAAmB,qBACnBC,UAAa,qCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,KAIDmY,WAAoC,CACvD5G,YAAc,EACdrR,UAAa,8CAIrB,cAWA,OAVIkY,+BAAA,SAAmBrZ,EAAqCC,GACpD,IAAMta,EAAiC,GAOvC,OANA0B,GAAgB2Y,EAASiV,wBAAyBhV,EAASgV,wBAAyB,0BAA2B,6IAA8ItvB,GAG7P8B,GAAmBuY,EAASsZ,UAAWrZ,EAASqZ,UAAW,YAAa,SAAU3zB,GAClF8B,GAAmBuY,EAASuZ,iBAAkBtZ,EAASsZ,iBAAkB,mBAAoB,SAAU5zB,GACvG8B,GAAmBuY,EAASwX,oBAAqBvX,EAASuX,oBAAqB,sBAAuB,UAAW7xB,GAClF,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAgB9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAI2Y,GACJ,IAAIrF,GACJ,IAAI7C,IAiChB,OA7BIqI,6BAAA,WACI,OAAOjxB,KAAKmY,eAGhB8Y,4BAAA,SAAgB5Y,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGL4Y,aAAa,CAChC3Y,aAAgB,cAChBC,gBAAmB,kBACnBC,UAAa,qCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,KAIDuY,WAAoC,CACvDhH,YAAc,EACdrR,UAAa,2CAIrB,cAmBA,OAlBIsY,+BAAA,SAAmBzZ,EAA2CC,GAC1D,IAAMta,EAAiC,GAevC,OAdA8B,GAAmBuY,EAASoU,YAAanU,EAASmU,YAAa,cAAe,SAAUzuB,GACxF8B,GAAmBuY,EAASsV,gBAAiBrV,EAASqV,gBAAiB,kBAAmB,UAAW3vB,GACrG8B,GAAmBuY,EAAS0Z,YAAazZ,EAASyZ,YAAa,cAAe,UAAW/zB,GACzFW,GAAgB0Z,EAASuV,cAAetV,EAASsV,cAAe,gBAAiB,sBAAuB5vB,GACxGgC,GAAiBqY,EAASyV,gBAAiBxV,EAASwV,gBAAiB,kBAAmB,2BAA4B9vB,GACpHgC,GAAiBqY,EAAS2Z,mBAAoB1Z,EAAS0Z,mBAAoB,qBAAsB,2BAA4Bh0B,GAC7H8B,GAAmBuY,EAAS6V,iBAAkB5V,EAAS4V,iBAAkB,mBAAoB,UAAWlwB,GACxG8B,GAAmBuY,EAAS8V,iBAAkB7V,EAAS6V,iBAAkB,mBAAoB,UAAWnwB,GACxGgC,GAAiBqY,EAASgW,gBAAiB/V,EAAS+V,gBAAiB,kBAAmB,2BAA4BrwB,GACpH8B,GAAmBuY,EAASmW,sBAAuBlW,EAASkW,sBAAuB,wBAAyB,SAAUxwB,GACtHgC,GAAiBqY,EAAS4Z,cAAe3Z,EAAS2Z,cAAe,gBAAiB,2BAA4Bj0B,GAC9G8B,GAAmBuY,EAAS6Z,kBAAmB5Z,EAAS4Z,kBAAmB,oBAAqB,SAAUl0B,GAC1GgC,GAAiBqY,EAAS8Z,iBAAkB7Z,EAAS6Z,iBAAkB,mBAAoB,2BAA4Bn0B,GACvH8B,GAAmBuY,EAASuX,uBAAwBtX,EAASsX,uBAAwB,yBAA0B,UAAW5xB,GAC3F,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAe9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAI+Y,GACJ,IAAIJ,GACJ,IAAIrF,GACJ,IAAI7C,IAiChB,OA7BI4I,6BAAA,WACI,OAAOxxB,KAAKmY,eAGhBqZ,4BAAA,SAAgBnZ,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLmZ,aAAa,CAChClZ,aAAgB,cAChBC,gBAAmB,wBACnBC,UAAa,qCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,KAID8Y,WAAoC,CACvDvH,YAAc,EACdrR,UAAa,iDAIrB,cAUA,OATI6Y,+BAAA,SAAmBha,EAAkDC,GACjE,IAAMta,EAAiC,GAMvC,OALAW,GAAgB0Z,EAASia,UAAWha,EAASga,UAAW,YAAa,sBAAuBt0B,GAC5FgC,GAAiBqY,EAASka,YAAaja,EAASia,YAAa,cAAe,2BAA4Bv0B,GACxG8B,GAAmBuY,EAASma,SAAUla,EAASka,SAAU,WAAY,SAAUx0B,GAC/EgC,GAAiBqY,EAASoa,yBAA0Bna,EAASma,yBAA0B,2BAA4B,2BAA4Bz0B,GAC/I8B,GAAmBuY,EAAS8W,UAAW7W,EAAS6W,UAAW,YAAa,SAAUnxB,GACnD,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAe9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAIsZ,GACJ,IAAIP,GACJ,IAAIJ,GACJ,IAAIrF,GACJ,IAAI7C,IAiChB,OA7BIkJ,6BAAA,WACI,OAAO9xB,KAAKmY,eAGhB2Z,4BAAA,SAAgBzZ,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLyZ,aAAa,CAChCxZ,aAAgB,cAChBC,gBAAmB,+BACnBC,UAAa,qCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,KAIDoZ,WAAoC,CACvD7H,YAAc,EACdrR,UAAa,wDAIrB,cAUA,OATImZ,+BAAA,SAAmBta,EAAmDC,GAClE,IAAMta,EAAiC,GAMvC,OALAW,GAAgB0Z,EAASkV,aAAcjV,EAASiV,aAAc,eAAgB,sBAAuBvvB,GACrGgC,GAAiBqY,EAASoV,eAAgBnV,EAASmV,eAAgB,iBAAkB,2BAA4BzvB,GACjH8B,GAAmBuY,EAASua,WAAYta,EAASsa,WAAY,aAAc,SAAU50B,GACrFW,GAAgB0Z,EAAS+W,cAAe9W,EAAS8W,cAAe,gBAAiB,sBAAuBpxB,GACxGgC,GAAiBqY,EAASwa,0BAA2Bva,EAASua,0BAA2B,4BAA6B,2BAA4B70B,GACnH,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAe9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAI4Z,GACJ,IAAIb,GACJ,IAAIJ,GACJ,IAAIrF,GACJ,IAAI7C,IAiChB,OA7BIsJ,6BAAA,WACI,OAAOlyB,KAAKmY,eAGhB+Z,4BAAA,SAAgB7Z,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGL6Z,aAAa,CAChC5Z,aAAgB,cAChBC,gBAAmB,gCACnBC,UAAa,qCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,KAIDwZ,WAAoC,CACvDjI,YAAc,EACdrR,UAAa,yDAIrB,cA6EA,OA5EIuZ,+BAAA,SAAmB1a,EAAiCC,GAChD,IAAMta,EAAiC,GAyEvC,OAxEAW,GAAgB0Z,EAAS2a,YAAa1a,EAAS0a,YAAa,cAAe,sBAAuBh1B,GAClGgC,GAAiBqY,EAAS4a,cAAe3a,EAAS2a,cAAe,gBAAiB,2BAA4Bj1B,GAC9G8B,GAAmBuY,EAASoU,YAAanU,EAASmU,YAAa,cAAe,SAAUzuB,GACxFW,GAAgB0Z,EAASqU,aAAcpU,EAASoU,aAAc,eAAgB,sBAAuB1uB,GACrGgC,GAAiBqY,EAASsU,eAAgBrU,EAASqU,eAAgB,iBAAkB,2BAA4B3uB,GACjH8B,GAAmBuY,EAAS6a,uCAAwC5a,EAAS4a,uCAAwC,yCAA0C,SAAUl1B,GACzK8B,GAAmBuY,EAAS8a,uBAAwB7a,EAAS6a,uBAAwB,yBAA0B,SAAUn1B,GACzHgC,GAAiBqY,EAASwU,YAAavU,EAASuU,YAAa,cAAe,2BAA4B7uB,GAExG8B,GAAmBuY,EAAS0U,yBAA0BzU,EAASyU,yBAA0B,2BAA4B,UAAW/uB,GAChI8B,GAAmBuY,EAAS2U,0BAA2B1U,EAAS0U,0BAA2B,4BAA6B,UAAWhvB,GACnIgC,GAAiBqY,EAAS4U,0BAA2B3U,EAAS2U,0BAA2B,4BAA6B,2BAA4BjvB,GAClJ8B,GAAmBuY,EAAS6U,eAAgB5U,EAAS4U,eAAgB,iBAAkB,SAAUlvB,GACjG8B,GAAmBuY,EAAS8U,eAAgB7U,EAAS6U,eAAgB,iBAAkB,SAAUnvB,GACjG8B,GAAmBuY,EAAS+U,yBAA0B9U,EAAS8U,yBAA0B,2BAA4B,UAAWpvB,GAChI8B,GAAmBuY,EAAS+a,gBAAiB9a,EAAS8a,gBAAiB,kBAAmB,SAAUp1B,GACpG8B,GAAmBuY,EAASgb,eAAgB/a,EAAS+a,eAAgB,iBAAkB,UAAWr1B,GAClG8B,GAAmBuY,EAASsV,gBAAiBrV,EAASqV,gBAAiB,kBAAmB,UAAW3vB,GACrGW,GAAgB0Z,EAASuV,cAAetV,EAASsV,cAAe,gBAAiB,sBAAuB5vB,GACxG8B,GAAmBuY,EAASib,kBAAmBhb,EAASgb,kBAAmB,oBAAqB,SAAUt1B,GAC1GgC,GAAiBqY,EAASyV,gBAAiBxV,EAASwV,gBAAiB,kBAAmB,2BAA4B9vB,GACpH8B,GAAmBuY,EAASkb,2BAA4Bjb,EAASib,2BAA4B,6BAA8B,UAAWv1B,GACtIgC,GAAiBqY,EAASmb,uBAAwBlb,EAASkb,uBAAwB,yBAA0B,2BAA4Bx1B,GACzI8B,GAAmBuY,EAASob,qBAAsBnb,EAASmb,qBAAsB,uBAAwB,SAAUz1B,GACnH8B,GAAmBuY,EAASqb,eAAgBpb,EAASob,eAAgB,iBAAkB,UAAW11B,GAClG8B,GAAmBuY,EAASsb,0BAA2Brb,EAASqb,0BAA2B,4BAA6B,UAAW31B,GACnI8B,GAAmBuY,EAASub,mBAAoBtb,EAASsb,mBAAoB,qBAAsB,UAAW51B,GAE9G8B,GAAmBuY,EAAS4V,kBAAmB3V,EAAS2V,kBAAmB,oBAAqB,SAAUjwB,GAC1G8B,GAAmBuY,EAAS6V,iBAAkB5V,EAAS4V,iBAAkB,mBAAoB,UAAWlwB,GACxG8B,GAAmBuY,EAAS8V,iBAAkB7V,EAAS6V,iBAAkB,mBAAoB,UAAWnwB,GACxG8B,GAAmBuY,EAAS+V,kBAAmB9V,EAAS8V,kBAAmB,oBAAqB,UAAWpwB,GAC3GgC,GAAiBqY,EAASgW,gBAAiB/V,EAAS+V,gBAAiB,kBAAmB,2BAA4BrwB,GACpH8B,GAAmBuY,EAASwb,+BAAgCvb,EAASub,+BAAgC,iCAAkC,UAAW71B,GAClJ8B,GAAmBuY,EAASmW,sBAAuBlW,EAASkW,sBAAuB,wBAAyB,SAAUxwB,GACtH8B,GAAmBuY,EAASma,SAAUla,EAASka,SAAU,WAAY,SAAUx0B,GAC/E8B,GAAmBuY,EAASyb,iBAAkBxb,EAASwb,iBAAkB,mBAAoB,SAAU91B,GACvGgC,GAAiBqY,EAAS0b,gBAAiBzb,EAASyb,gBAAiB,kBAAmB,2BAA4B/1B,GACpH8B,GAAmBuY,EAAS2b,aAAc1b,EAAS0b,aAAc,eAAgB,SAAUh2B,GAC3FgC,GAAiBqY,EAAS4b,oBAAqB3b,EAAS2b,oBAAqB,sBAAuB,2BAA4Bj2B,GAChIgC,GAAiBqY,EAASqW,eAAgBpW,EAASoW,eAAgB,iBAAkB,2BAA4B1wB,GACjH8B,GAAmBuY,EAASuW,kBAAmBtW,EAASsW,kBAAmB,oBAAqB,SAAU5wB,GAC1GW,GAAgB0Z,EAAS6b,gBAAiB5b,EAAS4b,gBAAiB,kBAAmB,sBAAuBl2B,GAC9GgC,GAAiBqY,EAASyW,kBAAmBxW,EAASwW,kBAAmB,oBAAqB,2BAA4B9wB,GAC1HW,GAAgB0Z,EAAS8b,kBAAmB7b,EAAS6b,kBAAmB,oBAAqB,sBAAuBn2B,GACpHgC,GAAiBqY,EAAS+b,oBAAqB9b,EAAS8b,oBAAqB,sBAAuB,2BAA4Bp2B,GAChIgC,GAAiBqY,EAAS4W,kBAAmB3W,EAAS2W,kBAAmB,oBAAqB,2BAA4BjxB,GAC1H8B,GAAmBuY,EAAS8W,UAAW7W,EAAS6W,UAAW,YAAa,SAAUnxB,GAClF8B,GAAmBuY,EAASgc,kBAAmB/b,EAAS+b,kBAAmB,oBAAqB,SAAUr2B,GAC1G8B,GAAmBuY,EAASmX,iBAAkBlX,EAASkX,iBAAkB,mBAAoB,UAAWxxB,GACxG8B,GAAmBuY,EAASic,MAAOhc,EAASgc,MAAO,QAAS,UAAWt2B,GACvE8B,GAAmBuY,EAASkc,gBAAiBjc,EAASic,gBAAiB,kBAAmB,UAAWv2B,GACrG8B,GAAmBuY,EAASmc,0BAA2Blc,EAASkc,0BAA2B,4BAA6B,UAAWx2B,GACnI8B,GAAmBuY,EAASoc,sBAAuBnc,EAASmc,sBAAuB,wBAAyB,UAAWz2B,GACvH8B,GAAmBuY,EAASqc,0CAA2Cpc,EAASoc,0CAA2C,4CAA6C,UAAW12B,GACnL8B,GAAmBuY,EAASsc,uCAAwCrc,EAASqc,uCAAwC,yCAA0C,UAAW32B,GAC1K8B,GAAmBuY,EAASuc,oBAAqBtc,EAASsc,oBAAqB,sBAAuB,UAAW52B,GACjH8B,GAAmBuY,EAASwc,oBAAqBvc,EAASuc,oBAAqB,sBAAuB,UAAW72B,GACjH8B,GAAmBuY,EAASuX,uBAAwBtX,EAASsX,uBAAwB,yBAA0B,UAAW5xB,GAC1H8B,GAAmBuY,EAASyc,sBAAuBxc,EAASwc,sBAAuB,wBAAyB,UAAW92B,GACvH8B,GAAmBuY,EAAS0c,uCAAwCzc,EAASyc,uCAAwC,yCAA0C,UAAW/2B,GAC1K8B,GAAmBuY,EAAS2c,qCAAsC1c,EAAS0c,qCAAsC,uCAAwC,UAAWh3B,GACpK8B,GAAmBuY,EAAS4c,wCAAyC3c,EAAS2c,wCAAyC,0CAA2C,UAAWj3B,GAC7K8B,GAAmBuY,EAASyX,wBAAyBxX,EAASwX,wBAAyB,0BAA2B,UAAW9xB,GAC7H8B,GAAmBuY,EAAS0X,YAAazX,EAASyX,YAAa,cAAe,UAAW/xB,GACzF8B,GAAmBuY,EAAS2X,qBAAsB1X,EAAS0X,qBAAsB,uBAAwB,UAAWhyB,GACpH8B,GAAmBuY,EAAS6c,wBAAyB5c,EAAS4c,wBAAyB,0BAA2B,UAAWl3B,GAC7H8B,GAAmBuY,EAAS8c,qBAAsB7c,EAAS6c,qBAAsB,uBAAwB,UAAWn3B,GACpH8B,GAAmBuY,EAAS+c,qBAAsB9c,EAAS8c,qBAAsB,uBAAwB,UAAWp3B,GACpH8B,GAAmBuY,EAASgd,qCAAsC/c,EAAS+c,qCAAsC,uCAAwC,UAAWr3B,GACpK8B,GAAmBuY,EAASid,qCAAsChd,EAASgd,qCAAsC,uCAAwC,UAAWt3B,GACpK8B,GAAmBuY,EAAS8X,qBAAsB7X,EAAS6X,qBAAsB,uBAAwB,UAAWnyB,GACrF,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAgB9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAIga,GACJ,IAAIrB,GACJ,IAAIrF,GACJ,IAAI7C,IAiChB,OA7BI+L,6BAAA,WACI,OAAO30B,KAAKmY,eAGhBwc,4BAAA,SAAgBtc,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLsc,aAAa,CAChCrc,aAAgB,cAChBC,gBAAmB,cACnBC,UAAa,qCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,KAIDic,WAAoC,CACvD1K,YAAc,EACdrR,UAAa,uCAIrB,cAcA,OAbIgc,+BAAA,SAAmBnd,EAAkCC,GACjD,IAAMta,EAAiC,GAUvC,OANA8B,GAAmBuY,EAASod,YAAand,EAASmd,YAAa,cAAe,UAAWz3B,GAEzF8B,GAAmBuY,EAASmW,sBAAuBlW,EAASkW,sBAAuB,wBAAyB,SAAUxwB,GACtHsC,GAAoB+X,EAASqd,kBAAmBpd,EAASod,kBAAmB,oBAAqB,qDAAsD13B,GAEvJwC,GAAgB6X,EAASsd,cAAerd,EAASqd,cAAe,gBAAiB,kDAAmD33B,GACrG,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAY9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAIyc,GACJ,IAAInJ,GACJ,IAAI7C,IAsChB,OAlCIoM,6BAAA,WACI,OAAOh1B,KAAKmY,eAGhB6c,4BAAA,SAAgB3c,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGL2c,aAAa,CAChC1c,aAAgB,cAChBC,gBAAmB,eACnBC,UAAa,qCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,6CACRkb,UAAY,KAIDsc,WAAoC,CACvD/K,YAAc,EACdrR,UAAa,wCAIrB,cAkBA,OAjBIqc,+BAAA,SAAmBxd,EAAoCC,GACnD,IAAMta,EAAiC,GAcvC,OAbAW,GAAgB0Z,EAAS2a,YAAa1a,EAAS0a,YAAa,cAAe,sBAAuBh1B,GAClGgC,GAAiBqY,EAAS4a,cAAe3a,EAAS2a,cAAe,gBAAiB,2BAA4Bj1B,GAC9G8B,GAAmBuY,EAASwL,MAAOvL,EAASuL,MAAO,QAAS,SAAU7lB,GACtE8B,GAAmBuY,EAASyd,eAAgBxd,EAASwd,eAAgB,iBAAkB,SAAU93B,GACjG8B,GAAmBuY,EAAS0d,YAAazd,EAASyd,YAAa,cAAe,SAAU/3B,GACxF8B,GAAmBuY,EAAS2d,mBAAoB1d,EAAS0d,mBAAoB,qBAAsB,SAAUh4B,GAC7Ga,GAAgBwZ,EAAS4d,WAAY3d,EAAS2d,WAAY,aAAc,sBAAuBj4B,GAC/FQ,GAAiB6Z,EAAS6d,cAAe5d,EAAS4d,cAAe,gBAAiB,uBAAwBl4B,GAC1G8B,GAAmBuY,EAAS8d,YAAa7d,EAAS6d,YAAa,cAAe,SAAUn4B,GACxFW,GAAgB0Z,EAAS+d,eAAgB9d,EAAS8d,eAAgB,iBAAkB,sBAAuBp4B,GAC3G8B,GAAmBuY,EAASge,wBAAyB/d,EAAS+d,wBAAyB,0BAA2B,SAAUr4B,GAC5H8B,GAAmBuY,EAASie,cAAehe,EAASge,cAAe,gBAAiB,UAAWt4B,GAC/F8B,GAAmBuY,EAASke,iBAAkBje,EAASie,iBAAkB,mBAAoB,UAAWv4B,GACzE,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAY9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAI8c,GACJ,IAAIxJ,GACJ,IAAI7C,IAiChB,OA7BIgN,6BAAA,WACI,OAAO51B,KAAKmY,eAGhByd,4BAAA,SAAgBvd,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLud,aAAa,CAChCtd,aAAgB,cAChBC,gBAAmB,iBACnBC,UAAa,qCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,KAIDkd,WAAoC,CACvD3L,YAAc,EACdrR,UAAa,0CAIrB,cAoBA,OAnBIid,+BAAA,SAAmBpe,EAA2BC,GAC1C,IAAMta,EAAiC,GAgBvC,OAfAW,GAAgB0Z,EAASqe,QAASpe,EAASoe,QAAS,UAAW,sBAAuB14B,GAEtF8B,GAAmBuY,EAASse,qBAAsBre,EAASqe,qBAAsB,uBAAwB,SAAU34B,GACnH8B,GAAmBuY,EAASue,YAAate,EAASse,YAAa,cAAe,SAAU54B,GAExF8B,GAAmBuY,EAASwe,yBAA0Bve,EAASue,yBAA0B,2BAA4B,SAAU74B,GAC/H8B,GAAmBuY,EAASye,UAAWxe,EAASwe,UAAW,YAAa,SAAU94B,GAClF8B,GAAmBuY,EAAS0e,cAAeze,EAASye,cAAe,gBAAiB,SAAU/4B,GAC9F8B,GAAmBuY,EAAS2e,aAAc1e,EAAS0e,aAAc,eAAgB,SAAUh5B,GAC3F8B,GAAmBuY,EAAS8M,OAAQ7M,EAAS6M,OAAQ,SAAU,SAAUnnB,GACzE8B,GAAmBuY,EAAS4e,MAAO3e,EAAS2e,MAAO,QAAS,SAAUj5B,GACtE8B,GAAmBuY,EAAS6e,eAAgB5e,EAAS4e,eAAgB,iBAAkB,SAAUl5B,GACjG8B,GAAmBuY,EAAS8e,cAAe7e,EAAS6e,cAAe,gBAAiB,UAAWn5B,GAC/FW,GAAgB0Z,EAAS+e,SAAU9e,EAAS8e,SAAU,WAAY,sBAAuBp5B,GACzFwC,GAAgB6X,EAASS,WAAYR,EAASQ,WAAY,aAAc,4BAA6B9a,GACtE,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAc9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAI0d,GACJ,IAAIre,IAiChB,OA7BIif,6BAAA,WACI,OAAOz2B,KAAKmY,eAGhBse,4BAAA,SAAgBpe,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLoe,aAAa,CAChCne,aAAgB,cAChBC,gBAAmB,QACnBC,UAAa,+BACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,KAID+d,WAAoC,CACvD9d,QAAU,EACVC,UAAa,iCAIrB,cAcA,OAbI8d,+BAAA,SAAmBjf,EAAiCC,GAChD,IAAMta,EAAiC,GAUvC,OATA0B,GAAgB2Y,EAASkf,8BAA+Bjf,EAASif,8BAA+B,gCAAiC,kHAAmHv5B,GACpPQ,GAAiB6Z,EAASmf,UAAWlf,EAASkf,UAAW,YAAa,uBAAwBx5B,GAC9FQ,GAAiB6Z,EAAS/R,SAAUgS,EAAShS,SAAU,WAAY,uBAAwBtI,GAC3F8B,GAAmBuY,EAASof,WAAYnf,EAASmf,WAAY,aAAc,SAAUz5B,GACrF8B,GAAmBuY,EAASqf,WAAYpf,EAASof,WAAY,aAAc,SAAU15B,GACrFQ,GAAiB6Z,EAASsf,qBAAsBrf,EAASqf,qBAAsB,uBAAwB,uBAAwB35B,GAC/HQ,GAAiB6Z,EAASuf,oBAAqBtf,EAASsf,oBAAqB,sBAAuB,uBAAwB55B,GAC5HwC,GAAgB6X,EAASwf,qBAAsBvf,EAASuf,qBAAsB,uBAAwB,0DAA2D75B,GACjKwC,GAAgB6X,EAASyf,0BAA2Bxf,EAASwf,0BAA2B,4BAA6B,0IAA2I95B,GACjO,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAa9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAIue,GACJ,IAAIb,GACJ,IAAIre,IAuBhB,OAnBI2f,6BAAA,WACI,OAAOn3B,KAAKmY,eAGhBgf,4BAAA,SAAgB9e,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGL8e,aAAa,CAChC7e,aAAgB,cAChBC,gBAAmB,cACnBC,UAAa,+BACbC,WAAc,IAEK0e,WAAoC,CACvDxe,QAAU,EACVye,eAAiB,EACjBxe,UAAa,uCAIrB,cASA,OARIye,+BAAA,SAAmB5f,EAAsCC,GACrD,IAAMta,EAAiC,GAKvC,OAJA8B,GAAmBuY,EAAS6f,sBAAuB5f,EAAS4f,sBAAuB,wBAAyB,UAAWl6B,GACvH8B,GAAmBuY,EAAS8f,kBAAmB7f,EAAS6f,kBAAmB,oBAAqB,UAAWn6B,GAC3G8B,GAAmBuY,EAAS+f,kBAAmB9f,EAAS8f,kBAAmB,oBAAqB,SAAUp6B,GAC1G8B,GAAmBuY,EAASggB,iBAAkB/f,EAAS+f,iBAAkB,mBAAoB,SAAUr6B,GACxE,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAe9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAIkf,GACJ,IAAIX,GACJ,IAAIb,GACJ,IAAIre,IAuChB,OAnCIkgB,6BAAA,WACI,OAAO13B,KAAKmY,eAGhBuf,4BAAA,SAAgBrf,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLqf,aAAa,CAChCpf,aAAgB,cAChBC,gBAAmB,mBACnBC,UAAa,+BACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,YACR0B,KAAQ,uBACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,KAIDgf,WAAoC,CACvD/e,QAAU,EACVye,eAAiB,EACjBxe,UAAa,4CAIrB,cAOA,OANI+e,+BAAA,SAAmBlgB,EAAgCC,GAC/C,IAAMta,EAAiC,GAGvC,OAFAQ,GAAiB6Z,EAASmf,UAAWlf,EAASkf,UAAW,YAAa,uBAAwBx5B,GAC9F8B,GAAmBuY,EAASmgB,YAAalgB,EAASkgB,YAAa,cAAe,SAAUx6B,GACzD,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAe9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAIwf,GACJ,IAAIjB,GACJ,IAAIb,GACJ,IAAIre,IAuChB,OAnCIqgB,6BAAA,WACI,OAAO73B,KAAKmY,eAGhB0f,4BAAA,SAAgBxf,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLwf,aAAa,CAChCvf,aAAgB,cAChBC,gBAAmB,aACnBC,UAAa,+BACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,uBACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,KAIDmf,WAAoC,CACvDlf,QAAU,EACVye,eAAiB,EACjBxe,UAAa,sCAIrB,cAaA,OAZIkf,+BAAA,SAAmBrgB,EAA+BC,GAC9C,IAAMta,EAAiC,GASvC,OARA8B,GAAmBuY,EAASsgB,MAAOrgB,EAASqgB,MAAO,QAAS,SAAU36B,GACtE8B,GAAmBuY,EAASugB,SAAUtgB,EAASsgB,SAAU,WAAY,SAAU56B,GAC/E8B,GAAmBuY,EAASwgB,WAAYvgB,EAASugB,WAAY,aAAc,SAAU76B,GACrFgC,GAAiBqY,EAASygB,kBAAmBxgB,EAASwgB,kBAAmB,oBAAqB,2BAA4B96B,GAC1H8B,GAAmBuY,EAAS0gB,0BAA2BzgB,EAASygB,0BAA2B,4BAA6B,SAAU/6B,GAClI8B,GAAmBuY,EAAS2gB,2BAA4B1gB,EAAS0gB,2BAA4B,6BAA8B,SAAUh7B,GACrIQ,GAAiB6Z,EAAS4gB,6BAA8B3gB,EAAS2gB,6BAA8B,+BAAgC,uBAAwBj7B,GACvJ8B,GAAmBuY,EAAS6gB,iBAAkB5gB,EAAS4gB,iBAAkB,mBAAoB,SAAUl7B,GACxE,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAgB9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAI2f,GACJ,IAAIpB,GACJ,IAAIb,GACJ,IAAIre,IAsDhB,OAlDI+gB,6BAAA,WACI,OAAOv4B,KAAKmY,eAGhBogB,4BAAA,SAAgBlgB,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLkgB,aAAa,CAChCjgB,aAAgB,cAChBC,gBAAmB,YACnBC,UAAa,+BACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,uBACRkb,UAAY,GAEhB,CACI5c,KAAQ,YACR0B,KAAQ,uBACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,KAID6f,WAAoC,CACvD5f,QAAU,EACVye,eAAiB,EACjBxe,UAAa,qCAIrB,cAQA,OAPI4f,+BAAA,SAAmB/gB,EAAsCC,GACrD,IAAMta,EAAiC,GAIvC,OAHAQ,GAAiB6Z,EAASmf,UAAWlf,EAASkf,UAAW,YAAa,uBAAwBx5B,GAC9FW,GAAgB0Z,EAASghB,YAAa/gB,EAAS+gB,YAAa,cAAe,sBAAuBr7B,GAClGwC,GAAgB6X,EAASwf,qBAAsBvf,EAASuf,qBAAsB,uBAAwB,0DAA2D75B,GAClI,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAa9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAIqgB,GACJ,IAAI3C,GACJ,IAAIre,IAsChB,OAlCIkhB,6BAAA,WACI,OAAO14B,KAAKmY,eAGhBugB,4BAAA,SAAgBrgB,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLqgB,aAAa,CAChCpgB,aAAgB,cAChBC,gBAAmB,mBACnBC,UAAa,+BACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,YACR0B,KAAQ,uBACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,KAIDggB,WAAoC,CACvD/f,QAAU,EACVC,UAAa,4CAIrB,cAyEA,OAxEI+f,+BAAA,SAAmBlhB,EAA6BC,GAC5C,IAAMta,EAAiC,GAqEvC,OApEA8B,GAAmBuY,EAASwL,MAAOvL,EAASuL,MAAO,QAAS,SAAU7lB,GACtE8B,GAAmBuY,EAASmhB,aAAclhB,EAASkhB,aAAc,eAAgB,UAAWx7B,GAC5F8B,GAAmBuY,EAASohB,YAAanhB,EAASmhB,YAAa,cAAe,UAAWz7B,GACzF8B,GAAmBuY,EAASjV,MAAOkV,EAASlV,MAAO,QAAS,SAAUpF,GACtE8B,GAAmBuY,EAASqhB,cAAephB,EAASohB,cAAe,gBAAiB,SAAU17B,GAC9F8B,GAAmBuY,EAASshB,kBAAmBrhB,EAASqhB,kBAAmB,oBAAqB,SAAU37B,GAC1G8B,GAAmBuY,EAASuhB,WAAYthB,EAASshB,WAAY,aAAc,SAAU57B,GAErF8B,GAAmBuY,EAASwhB,SAAUvhB,EAASuhB,SAAU,WAAY,kBAAmB77B,GACxF8B,GAAmBuY,EAASyhB,iBAAkBxhB,EAASwhB,iBAAkB,mBAAoB,SAAU97B,GACvG8B,GAAmBuY,EAAS0hB,UAAWzhB,EAASyhB,UAAW,YAAa,SAAU/7B,GAClF8B,GAAmBuY,EAAS2hB,WAAY1hB,EAAS0hB,WAAY,aAAc,SAAUh8B,GACrF8B,GAAmBuY,EAASpC,OAAQqC,EAASrC,OAAQ,SAAU,kBAAmBjY,GAClF8B,GAAmBuY,EAAS4hB,eAAgB3hB,EAAS2hB,eAAgB,iBAAkB,SAAUj8B,GACjG8B,GAAmBuY,EAAS6hB,oBAAqB5hB,EAAS4hB,oBAAqB,sBAAuB,SAAUl8B,GAChH8B,GAAmBuY,EAAS8hB,YAAa7hB,EAAS6hB,YAAa,cAAe,SAAUn8B,GACxF8B,GAAmBuY,EAAS5Y,UAAW6Y,EAAS7Y,UAAW,YAAa,UAAWzB,GACnF8B,GAAmBuY,EAAS+hB,iBAAkB9hB,EAAS8hB,iBAAkB,mBAAoB,UAAWp8B,GACxG8B,GAAmBuY,EAASgiB,cAAe/hB,EAAS+hB,cAAe,gBAAiB,UAAWr8B,GAC/F8B,GAAmBuY,EAASiiB,iBAAkBhiB,EAASgiB,iBAAkB,mBAAoB,UAAWt8B,GACxG8B,GAAmBuY,EAASkiB,iBAAkBjiB,EAASiiB,iBAAkB,mBAAoB,UAAWv8B,GACxG8B,GAAmBuY,EAAShP,UAAWiP,EAASjP,UAAW,YAAa,UAAWrL,GACnF8B,GAAmBuY,EAASmiB,KAAMliB,EAASkiB,KAAM,OAAQ,kBAAmBx8B,GAC5E8B,GAAmBuY,EAASoiB,aAAcniB,EAASmiB,aAAc,eAAgB,SAAUz8B,GAC3F8B,GAAmBuY,EAASqiB,YAAapiB,EAASoiB,YAAa,cAAe,kBAAmB18B,GACjG8B,GAAmBuY,EAASsiB,oBAAqBriB,EAASqiB,oBAAqB,sBAAuB,SAAU38B,GAChH8B,GAAmBuY,EAASuiB,YAAatiB,EAASsiB,YAAa,cAAe,kBAAmB58B,GACjG8B,GAAmBuY,EAASwiB,oBAAqBviB,EAASuiB,oBAAqB,sBAAuB,SAAU78B,GAEhH8B,GAAmBuY,EAAS3b,KAAM4b,EAAS5b,KAAM,OAAQ,SAAUsB,GACnE8B,GAAmBuY,EAASyiB,cAAexiB,EAASwiB,cAAe,gBAAiB,UAAW98B,GAC/FsC,GAAoB+X,EAAS0iB,sBAAuBziB,EAASyiB,sBAAuB,wBAAyB,+CAAgD/8B,GAC7JsC,GAAoB+X,EAAS2iB,uBAAwB1iB,EAAS0iB,uBAAwB,yBAA0B,+CAAgDh9B,GAChKsC,GAAoB+X,EAAS4iB,kBAAmB3iB,EAAS2iB,kBAAmB,oBAAqB,+CAAgDj9B,GACjJsC,GAAoB+X,EAAS6iB,yBAA0B5iB,EAAS4iB,yBAA0B,2BAA4B,uDAAwDl9B,GAC9KsC,GAAoB+X,EAAS8iB,wBAAyB7iB,EAAS6iB,wBAAyB,0BAA2B,uDAAwDn9B,GAC3KsC,GAAoB+X,EAAS+iB,yBAA0B9iB,EAAS8iB,yBAA0B,2BAA4B,+CAAgDp9B,GACtKsC,GAAoB+X,EAASgjB,wBAAyB/iB,EAAS+iB,wBAAyB,0BAA2B,gDAAiDr9B,GACpKsC,GAAoB+X,EAASijB,uBAAwBhjB,EAASgjB,uBAAwB,yBAA0B,+CAAgDt9B,GAChKsC,GAAoB+X,EAASkjB,sBAAuBjjB,EAASijB,sBAAuB,wBAAyB,uDAAwDv9B,GACrKsC,GAAoB+X,EAASmjB,kBAAmBljB,EAASkjB,kBAAmB,oBAAqB,gDAAiDx9B,GAClJ8B,GAAmBuY,EAASojB,cAAenjB,EAASmjB,cAAe,gBAAiB,kBAAmBz9B,GACvG8B,GAAmBuY,EAASqjB,sBAAuBpjB,EAASojB,sBAAuB,wBAAyB,SAAU19B,GACtH8B,GAAmBuY,EAASsjB,YAAarjB,EAASqjB,YAAa,cAAe,kBAAmB39B,GACjG8B,GAAmBuY,EAASujB,oBAAqBtjB,EAASsjB,oBAAqB,sBAAuB,SAAU59B,GAChH8B,GAAmBuY,EAASwjB,aAAcvjB,EAASujB,aAAc,eAAgB,kBAAmB79B,GACpG8B,GAAmBuY,EAASyjB,qBAAsBxjB,EAASwjB,qBAAsB,uBAAwB,SAAU99B,GACnH8B,GAAmBuY,EAAS0jB,WAAYzjB,EAASyjB,WAAY,aAAc,kBAAmB/9B,GAC9F8B,GAAmBuY,EAAS2jB,mBAAoB1jB,EAAS0jB,mBAAoB,qBAAsB,SAAUh+B,GAE7G8B,GAAmBuY,EAASlH,SAAUmH,EAASnH,SAAU,WAAY,SAAUnT,GAC/E8B,GAAmBuY,EAAS4jB,OAAQ3jB,EAAS2jB,OAAQ,SAAU,SAAUj+B,GACzE8B,GAAmBuY,EAAS6jB,OAAQ5jB,EAAS4jB,OAAQ,SAAU,SAAUl+B,GACzE8B,GAAmBuY,EAAS8jB,WAAY7jB,EAAS6jB,WAAY,aAAc,SAAUn+B,GACrF8B,GAAmBuY,EAAS+jB,YAAa9jB,EAAS8jB,YAAa,cAAe,SAAUp+B,GACxF8B,GAAmBuY,EAASgkB,cAAe/jB,EAAS+jB,cAAe,gBAAiB,SAAUr+B,GAC9F8B,GAAmBuY,EAASikB,cAAehkB,EAASgkB,cAAe,gBAAiB,SAAUt+B,GAE9F8B,GAAmBuY,EAASkkB,IAAKjkB,EAASikB,IAAK,MAAO,kBAAmBv+B,GACzE8B,GAAmBuY,EAASmkB,YAAalkB,EAASkkB,YAAa,cAAe,SAAUx+B,GACxF8B,GAAmBuY,EAASokB,iBAAkBnkB,EAASmkB,iBAAkB,mBAAoB,SAAUz+B,GACvG8B,GAAmBuY,EAASqkB,iBAAkBpkB,EAASokB,iBAAkB,mBAAoB,SAAU1+B,GACvG8B,GAAmBuY,EAASO,SAAUN,EAASM,SAAU,WAAY,SAAU5a,GAC/E8B,GAAmBuY,EAASskB,eAAgBrkB,EAASqkB,eAAgB,iBAAkB,UAAW3+B,GAClG8B,GAAmBuY,EAASukB,kBAAmBtkB,EAASskB,kBAAmB,oBAAqB,SAAU5+B,GAC1G8B,GAAmBuY,EAASrC,MAAOsC,EAAStC,MAAO,QAAS,kBAAmBhY,GAC/E8B,GAAmBuY,EAASwkB,cAAevkB,EAASukB,cAAe,gBAAiB,SAAU7+B,GAC9F8B,GAAmBuY,EAASykB,OAAQxkB,EAASwkB,OAAQ,SAAU,SAAU9+B,GAC1C,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAY9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAIwgB,IA4BhB,OAxBIwD,6BAAA,WACI,OAAOn8B,KAAKmY,eAGhBgkB,4BAAA,SAAgB9jB,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGL8jB,aAAa,CAChC7jB,aAAgB,cAChBC,gBAAmB,UACnBC,UAAa,qCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,KAIDyjB,WAAoC,CACvDC,gBAAkB,EAClBxjB,UAAa,mCAIrB,cAYA,OAXIyjB,+BAAA,SAAmB5kB,EAA+BC,GAC9C,IAAMta,EAAiC,GAQvC,OAPA8B,GAAmBuY,EAAS6kB,sBAAuB5kB,EAAS4kB,sBAAuB,wBAAyB,UAAWl/B,GACvH8B,GAAmBuY,EAAS8kB,qBAAsB7kB,EAAS6kB,qBAAsB,uBAAwB,UAAWn/B,GACpH8B,GAAmBuY,EAAS+kB,WAAY9kB,EAAS8kB,WAAY,aAAc,SAAUp/B,GACrF8B,GAAmBuY,EAASglB,qBAAsB/kB,EAAS+kB,qBAAsB,uBAAwB,UAAWr/B,GACpH8B,GAAmBuY,EAASilB,eAAgBhlB,EAASglB,eAAgB,iBAAkB,SAAUt/B,GACjG8B,GAAmBuY,EAAS3b,KAAM4b,EAAS5b,KAAM,OAAQ,SAAUsB,GACnEwC,GAAgB6X,EAASklB,WAAYjlB,EAASilB,WAAY,aAAc,2DAA4Dv/B,GACrG,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAY9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAIkkB,GACJ,IAAI1D,IA4BhB,OAxBIiE,6BAAA,WACI,OAAO58B,KAAKmY,eAGhBykB,4BAAA,SAAgBvkB,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLukB,aAAa,CAChCtkB,aAAgB,cAChBC,gBAAmB,YACnBC,UAAa,qCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,KAIDkkB,WAAoC,CACvDR,gBAAkB,EAClBxjB,UAAa,qCAIrB,cAQA,OAPIikB,+BAAA,SAAmBplB,EAA+BC,GAC9C,IAAMta,EAAiC,GAIvC,OAHA8B,GAAmBuY,EAASqlB,aAAcplB,EAASolB,aAAc,eAAgB,SAAU1/B,GAC3F8B,GAAmBuY,EAAS3b,KAAM4b,EAAS5b,KAAM,OAAQ,SAAUsB,GACnE8B,GAAmBuY,EAASslB,UAAWrlB,EAASqlB,UAAW,YAAa,SAAU3/B,GACnD,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAY9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAI0kB,GACJ,IAAIR,GACJ,IAAI1D,IA4BhB,OAxBIqE,6BAAA,WACI,OAAOh9B,KAAKmY,eAGhB6kB,4BAAA,SAAgB3kB,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGL2kB,aAAa,CAChC1kB,aAAgB,cAChBC,gBAAmB,YACnBC,UAAa,qCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,KAIDskB,WAAoC,CACvDZ,gBAAkB,EAClBxjB,UAAa,qCAIrB,cAWA,OAVIqkB,+BAAA,SAAmBxlB,EAA4BC,GAC3C,IAAMta,EAAiC,GAOvC,OANA8B,GAAmBuY,EAASylB,0BAA2BxlB,EAASwlB,0BAA2B,4BAA6B,UAAW9/B,GACnI8B,GAAmBuY,EAAS3b,KAAM4b,EAAS5b,KAAM,OAAQ,SAAUsB,GACnE0B,GAAgB2Y,EAAS0lB,qBAAsBzlB,EAASylB,qBAAsB,uBAAwB,aAAc//B,GACpH0B,GAAgB2Y,EAAS2lB,sBAAuB1lB,EAAS0lB,sBAAuB,wBAAyB,aAAchgC,GACvH0B,GAAgB2Y,EAAS4lB,oBAAqB3lB,EAAS2lB,oBAAqB,sBAAuB,aAAcjgC,GACjH0B,GAAgB2Y,EAAS6lB,mBAAoB5lB,EAAS4lB,mBAAoB,qBAAsB,aAAclgC,GAC/E,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAY9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAI8kB,GACJ,IAAIJ,GACJ,IAAIR,GACJ,IAAI1D,IA4BhB,OAxBI4E,6BAAA,WACI,OAAOv9B,KAAKmY,eAGhBolB,4BAAA,SAAgBllB,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLklB,aAAa,CAChCjlB,aAAgB,cAChBC,gBAAmB,SACnBC,UAAa,qCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,KAID6kB,WAAoC,CACvDnB,gBAAkB,EAClBxjB,UAAa,kCAIrB,cAmBA,OAlBI4kB,+BAAA,SAAmB/lB,EAAoCC,GACnD,IAAMta,EAAiC,GAevC,OAdA8B,GAAmBuY,EAASgmB,SAAU/lB,EAAS+lB,SAAU,WAAY,SAAUrgC,GAC/E8B,GAAmBuY,EAASimB,UAAWhmB,EAASgmB,UAAW,YAAa,SAAUtgC,GAClF8B,GAAmBuY,EAASkmB,iBAAkBjmB,EAASimB,iBAAkB,mBAAoB,SAAUvgC,GACvG8B,GAAmBuY,EAASmmB,YAAalmB,EAASkmB,YAAa,cAAe,SAAUxgC,GAExF8B,GAAmBuY,EAASomB,YAAanmB,EAASmmB,YAAa,cAAe,SAAUzgC,GACxF8B,GAAmBuY,EAASqmB,WAAYpmB,EAASomB,WAAY,aAAc,SAAU1gC,GACrF8B,GAAmBuY,EAAS3b,KAAM4b,EAAS5b,KAAM,OAAQ,SAAUsB,GACnE8B,GAAmBuY,EAASsmB,aAAcrmB,EAASqmB,aAAc,eAAgB,SAAU3gC,GAC3FwC,GAAgB6X,EAASumB,SAAUtmB,EAASsmB,SAAU,WAAY,8CAA+C5gC,GACjHwC,GAAgB6X,EAASwmB,mBAAoBvmB,EAASumB,mBAAoB,qBAAsB,mFAAoF7gC,GACpLwC,GAAgB6X,EAASymB,gBAAiBxmB,EAASwmB,gBAAiB,kBAAmB,mFAAoF9gC,GAC3KwC,GAAgB6X,EAAS0mB,iBAAkBzmB,EAASymB,iBAAkB,mBAAoB,0JAA2J/gC,GACrPwC,GAAgB6X,EAAS2mB,cAAe1mB,EAAS0mB,cAAe,gBAAiB,6CAA8ChhC,GAChG,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAY9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAIqlB,GACJ,IAAIX,GACJ,IAAIR,GACJ,IAAI1D,IAiChB,OA7BI0F,6BAAA,WACI,OAAOr+B,KAAKmY,eAGhBkmB,4BAAA,SAAgBhmB,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLgmB,aAAa,CAChC/lB,aAAgB,cAChBC,gBAAmB,iBACnBC,UAAa,qCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,SACR0B,KAAQ,8BACRkb,UAAY,KAID2lB,WAAoC,CACvDjC,gBAAkB,EAClBxjB,UAAa,0CAIrB,cA0BA,OAzBI0lB,+BAAA,SAAmB7mB,EAAkCC,GACjD,IAAMta,EAAiC,GAsBvC,OArBA8B,GAAmBuY,EAAS8mB,cAAe7mB,EAAS6mB,cAAe,gBAAiB,SAAUnhC,GAC9F8B,GAAmBuY,EAASgmB,SAAU/lB,EAAS+lB,SAAU,WAAY,SAAUrgC,GAE/E8B,GAAmBuY,EAAS+mB,eAAgB9mB,EAAS8mB,eAAgB,iBAAkB,SAAUphC,GACjG8B,GAAmBuY,EAASgnB,QAAS/mB,EAAS+mB,QAAS,UAAW,SAAUrhC,GAC5E8B,GAAmBuY,EAASinB,mBAAoBhnB,EAASgnB,mBAAoB,qBAAsB,UAAWthC,GAC9G8B,GAAmBuY,EAASknB,iBAAkBjnB,EAASinB,iBAAkB,mBAAoB,UAAWvhC,GACxG8B,GAAmBuY,EAASmnB,eAAgBlnB,EAASknB,eAAgB,iBAAkB,UAAWxhC,GAElG8B,GAAmBuY,EAASonB,yBAA0BnnB,EAASmnB,yBAA0B,2BAA4B,SAAUzhC,GAE/H8B,GAAmBuY,EAASqnB,iBAAkBpnB,EAASonB,iBAAkB,mBAAoB,SAAU1hC,GACvG8B,GAAmBuY,EAASsnB,YAAarnB,EAASqnB,YAAa,cAAe,SAAU3hC,GAExF8B,GAAmBuY,EAASunB,YAAatnB,EAASsnB,YAAa,cAAe,SAAU5hC,GAExF8B,GAAmBuY,EAASwnB,uBAAwBvnB,EAASunB,uBAAwB,yBAA0B,SAAU7hC,GAEzH8B,GAAmBuY,EAASyN,eAAgBxN,EAASwN,eAAgB,iBAAkB,SAAU9nB,GACjGwC,GAAgB6X,EAASklB,WAAYjlB,EAASilB,WAAY,aAAc,2DAA4Dv/B,GACpIwC,GAAgB6X,EAASynB,eAAgBxnB,EAASwnB,eAAgB,iBAAkB,4CAA6C9hC,GAClG,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAY9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAImmB,GACJ,IAAIzB,GACJ,IAAIR,GACJ,IAAI1D,IAiChB,OA7BIwG,6BAAA,WACI,OAAOn/B,KAAKmY,eAGhBgnB,4BAAA,SAAgB9mB,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGL8mB,aAAa,CAChC7mB,aAAgB,cAChBC,gBAAmB,eACnBC,UAAa,qCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,eACR0B,KAAQ,UACRkb,UAAY,KAIDymB,WAAoC,CACvD/C,gBAAkB,EAClBxjB,UAAa,wCAIrB,cAUA,OATIwmB,+BAAA,SAAmB3nB,EAAgCC,GAC/C,IAAMta,EAAiC,GAMvC,OALA8B,GAAmBuY,EAASpC,OAAQqC,EAASrC,OAAQ,SAAU,kBAAmBjY,GAClF8B,GAAmBuY,EAAS4nB,qBAAsB3nB,EAAS2nB,qBAAsB,uBAAwB,UAAWjiC,GACpH8B,GAAmBuY,EAAS6nB,WAAY5nB,EAAS4nB,WAAY,aAAc,UAAWliC,GACtF8B,GAAmBuY,EAAS3b,KAAM4b,EAAS5b,KAAM,OAAQ,SAAUsB,GACnE8B,GAAmBuY,EAASrC,MAAOsC,EAAStC,MAAO,QAAS,kBAAmBhY,GAChD,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAY9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAIinB,GACJ,IAAI/C,GACJ,IAAI1D,IA4BhB,OAxBI4G,6BAAA,WACI,OAAOv/B,KAAKmY,eAGhBonB,4BAAA,SAAgBlnB,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLknB,aAAa,CAChCjnB,aAAgB,cAChBC,gBAAmB,aACnBC,UAAa,qCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,KAID6mB,WAAoC,CACvDnD,gBAAkB,EAClBxjB,UAAa,sCAIrB,cAkBA,OAjBI4mB,+BAAA,SAAmB/nB,EAAqCC,GACpD,IAAMta,EAAiC,GAcvC,OAbA8B,GAAmBuY,EAASgoB,wBAAyB/nB,EAAS+nB,wBAAyB,0BAA2B,SAAUriC,GAC5H8B,GAAmBuY,EAASioB,mBAAoBhoB,EAASgoB,mBAAoB,qBAAsB,SAAUtiC,GAC7G8B,GAAmBuY,EAASkoB,oBAAqBjoB,EAASioB,oBAAqB,sBAAuB,SAAUviC,GAChH8B,GAAmBuY,EAASmoB,2BAA4BloB,EAASkoB,2BAA4B,6BAA8B,SAAUxiC,GACrI8B,GAAmBuY,EAASooB,yBAA0BnoB,EAASmoB,yBAA0B,2BAA4B,SAAUziC,GAC/H8B,GAAmBuY,EAASqoB,0BAA2BpoB,EAASooB,0BAA2B,4BAA6B,SAAU1iC,GAClI8B,GAAmBuY,EAASsoB,wBAAyBroB,EAASqoB,wBAAyB,0BAA2B,SAAU3iC,GAC5H8B,GAAmBuY,EAASuoB,mBAAoBtoB,EAASsoB,mBAAoB,qBAAsB,SAAU5iC,GAC7GsC,GAAoB+X,EAASwoB,qBAAsBvoB,EAASuoB,qBAAsB,uBAAwB,kCAAmC7iC,GAC7I8B,GAAmBuY,EAASyoB,uBAAwBxoB,EAASwoB,uBAAwB,yBAA0B,SAAU9iC,GACzH8B,GAAmBuY,EAAS0oB,iBAAkBzoB,EAASyoB,iBAAkB,mBAAoB,SAAU/iC,GACvG8B,GAAmBuY,EAAS2oB,WAAY1oB,EAAS0oB,WAAY,aAAc,SAAUhjC,GACrFwC,GAAgB6X,EAAS4oB,WAAY3oB,EAAS2oB,WAAY,aAAc,yEAA0EjjC,GACnH,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAY9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAIqnB,GACJ,IAAIJ,GACJ,IAAI/C,GACJ,IAAI1D,IAsBhB,OAlBI2H,6BAAA,WACI,OAAOtgC,KAAKmY,eAGhBmoB,4BAAA,SAAgBjoB,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLioB,aAAa,CAChChoB,aAAgB,cAChBC,gBAAmB,kBACnBC,UAAa,qCACbC,WAAc,IAEK6nB,WAAoC,CACvDlE,gBAAkB,EAClBxjB,UAAa,2CAIrB,cAOA,OANI2nB,+BAAA,SAAmB9oB,EAA6BC,GAC5C,IAAMta,EAAiC,GAGvC,OAFA8B,GAAmBuY,EAAS3b,KAAM4b,EAAS5b,KAAM,OAAQ,SAAUsB,GACnE8B,GAAmBuY,EAASslB,UAAWrlB,EAASqlB,UAAW,YAAa,SAAU3/B,GACnD,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAY9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAIooB,GACJ,IAAIlE,GACJ,IAAI1D,IA4BhB,OAxBI6H,6BAAA,WACI,OAAOxgC,KAAKmY,eAGhBqoB,4BAAA,SAAgBnoB,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLmoB,aAAa,CAChCloB,aAAgB,cAChBC,gBAAmB,UACnBC,UAAa,qCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,KAID8nB,WAAoC,CACvDpE,gBAAkB,EAClBxjB,UAAa,mCAIrB,cAWA,OAVI6nB,+BAAA,SAAmBhpB,EAA0BC,GACzC,IAAMta,EAAiC,GAOvC,OANA8B,GAAmBuY,EAAS3b,KAAM4b,EAAS5b,KAAM,OAAQ,SAAUsB,GACnEwC,GAAgB6X,EAASipB,oBAAqBhpB,EAASgpB,oBAAqB,sBAAuB,0DAA2DtjC,GAC9JwC,GAAgB6X,EAASklB,WAAYjlB,EAASilB,WAAY,aAAc,qFAAsFv/B,GAC9JwC,GAAgB6X,EAASkpB,iBAAkBjpB,EAASipB,iBAAkB,mBAAoB,2DAA4DvjC,GACtJwC,GAAgB6X,EAASmpB,oBAAqBlpB,EAASkpB,oBAAqB,sBAAuB,0EAA2ExjC,GAC9KwC,GAAgB6X,EAASopB,iBAAkBnpB,EAASmpB,iBAAkB,mBAAoB,2EAA4EzjC,GACvI,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAY9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAIsoB,GACJ,IAAIpE,GACJ,IAAI1D,IA4BhB,OAxBImI,6BAAA,WACI,OAAO9gC,KAAKmY,eAGhB2oB,4BAAA,SAAgBzoB,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLyoB,aAAa,CAChCxoB,aAAgB,cAChBC,gBAAmB,OACnBC,UAAa,qCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,KAIDooB,WAAoC,CACvD1E,gBAAkB,EAClBxjB,UAAa,gCAIrB,cASA,OARImoB,+BAAA,SAAmBtpB,EAAyCC,GACxD,IAAMta,EAAiC,GAKvC,OAJA8B,GAAmBuY,EAASmnB,eAAgBlnB,EAASknB,eAAgB,iBAAkB,UAAWxhC,GAClG8B,GAAmBuY,EAASupB,mBAAoBtpB,EAASspB,mBAAoB,qBAAsB,SAAU5jC,GAC7G8B,GAAmBuY,EAASwpB,kBAAmBvpB,EAASupB,kBAAmB,oBAAqB,SAAU7jC,GAC1GwC,GAAgB6X,EAASynB,eAAgBxnB,EAASwnB,eAAgB,iBAAkB,4CAA6C9hC,GAClG,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAY9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAI4oB,GACJ,IAAI1E,GACJ,IAAI1D,IA4BhB,OAxBIuI,6BAAA,WACI,OAAOlhC,KAAKmY,eAGhB+oB,4BAAA,SAAgB7oB,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGL6oB,aAAa,CAChC5oB,aAAgB,cAChBC,gBAAmB,sBACnBC,UAAa,qCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,KAIDwoB,WAAoC,CACvD9E,gBAAkB,EAClBxjB,UAAa,+CAIrB,cAgBA,OAfIuoB,+BAAA,SAAmB1pB,EAA+BC,GAC9C,IAAMta,EAAiC,GAYvC,OAXA8B,GAAmBuY,EAAS2pB,YAAa1pB,EAAS0pB,YAAa,cAAe,kBAAmBhkC,GACjG8B,GAAmBuY,EAAS3b,KAAM4b,EAAS5b,KAAM,OAAQ,SAAUsB,GACnEsC,GAAoB+X,EAAS4pB,uBAAwB3pB,EAAS2pB,uBAAwB,yBAA0B,iDAAkDjkC,GAClKsC,GAAoB+X,EAAS6pB,wBAAyB5pB,EAAS4pB,wBAAyB,0BAA2B,iDAAkDlkC,GACrK8B,GAAmBuY,EAASkE,aAAcjE,EAASiE,aAAc,eAAgB,SAAUve,GAC3F8B,GAAmBuY,EAASmE,aAAclE,EAASkE,aAAc,eAAgB,SAAUxe,GAC3F8B,GAAmBuY,EAAS8pB,YAAa7pB,EAAS6pB,YAAa,cAAe,UAAWnkC,GACzF8B,GAAmBuY,EAAS+pB,KAAM9pB,EAAS8pB,KAAM,OAAQ,SAAUpkC,GACnE8B,GAAmBuY,EAASgqB,wBAAyB/pB,EAAS+pB,wBAAyB,0BAA2B,SAAUrkC,GAC5H8B,GAAmBuY,EAASiqB,sBAAuBhqB,EAASgqB,sBAAuB,wBAAyB,SAAUtkC,GAEvF,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAY9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAIgpB,GACJ,IAAIxI,IAiChB,OA7BIgJ,6BAAA,WACI,OAAO3hC,KAAKmY,eAGhBwpB,4BAAA,SAAgBtpB,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLspB,aAAa,CAChCrpB,aAAgB,cAChBC,gBAAmB,YACnBC,UAAa,qCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,KAIDipB,WAAoC,CACvDvF,gBAAkB,EAClBxjB,UAAa,qCAIrB,cAyBA,OAxBIgpB,+BAAA,SAAmBnqB,EAA2BC,GAC1C,IAAMta,EAAiC,GAqBvC,OApBA8B,GAAmBuY,EAASoqB,UAAWnqB,EAASmqB,UAAW,YAAa,UAAWzkC,GACnF8B,GAAmBuY,EAASqqB,WAAYpqB,EAASoqB,WAAY,aAAc,SAAU1kC,GACrF8B,GAAmBuY,EAASsqB,OAAQrqB,EAASqqB,OAAQ,SAAU,SAAU3kC,GACzE8B,GAAmBuY,EAASuqB,UAAWtqB,EAASsqB,UAAW,YAAa,SAAU5kC,GAClF8B,GAAmBuY,EAASwqB,0BAA2BvqB,EAASuqB,0BAA2B,4BAA6B,UAAW7kC,GAEnI8B,GAAmBuY,EAAS3b,KAAM4b,EAAS5b,KAAM,OAAQ,SAAUsB,GACnEsC,GAAoB+X,EAASyqB,wBAAyBxqB,EAASwqB,wBAAyB,0BAA2B,6CAA8C9kC,GACjKsC,GAAoB+X,EAAS0qB,kCAAmCzqB,EAASyqB,kCAAmC,oCAAqC,6CAA8C/kC,GAC/L8B,GAAmBuY,EAAS2qB,iCAAkC1qB,EAAS0qB,iCAAkC,mCAAoC,UAAWhlC,GACxJ8B,GAAmBuY,EAAS4qB,YAAa3qB,EAAS2qB,YAAa,cAAe,SAAUjlC,GACxF8B,GAAmBuY,EAAS6qB,UAAW5qB,EAAS4qB,UAAW,YAAa,SAAUllC,GAClF8B,GAAmBuY,EAAS8qB,WAAY7qB,EAAS6qB,WAAY,aAAc,SAAUnlC,GACrF8B,GAAmBuY,EAAS+qB,SAAU9qB,EAAS8qB,SAAU,WAAY,SAAUplC,GAC/E8B,GAAmBuY,EAASgrB,OAAQ/qB,EAAS+qB,OAAQ,SAAU,SAAUrlC,GACzE8B,GAAmBuY,EAASirB,aAAchrB,EAASgrB,aAAc,eAAgB,SAAUtlC,GAC3F8B,GAAmBuY,EAASkrB,WAAYjrB,EAASirB,WAAY,aAAc,SAAUvlC,GACrF8B,GAAmBuY,EAASmrB,UAAWlrB,EAASkrB,UAAW,YAAa,SAAUxlC,GAClF8B,GAAmBuY,EAASorB,YAAanrB,EAASmrB,YAAa,cAAe,SAAUzlC,GACxF8B,GAAmBuY,EAASqrB,QAASprB,EAASorB,QAAS,UAAW,SAAU1lC,GAC7C,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAY9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAIypB,GACJ,IAAIjJ,IAiChB,OA7BIoK,6BAAA,WACI,OAAO/iC,KAAKmY,eAGhB4qB,4BAAA,SAAgB1qB,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGL0qB,aAAa,CAChCzqB,aAAgB,cAChBC,gBAAmB,QACnBC,UAAa,qCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,MACR0B,KAAQ,SACRkb,UAAY,KAIDqqB,WAAoC,CACvD3G,gBAAkB,EAClBxjB,UAAa,iCAIrB,cAWA,OAVIoqB,+BAAA,SAAmBvrB,EAA8BC,GAC7C,IAAMta,EAAiC,GAOvC,OANA8B,GAAmBuY,EAAS+kB,WAAY9kB,EAAS8kB,WAAY,aAAc,SAAUp/B,GACrF8B,GAAmBuY,EAASwrB,eAAgBvrB,EAASurB,eAAgB,iBAAkB,SAAU7lC,GACjG8B,GAAmBuY,EAASyrB,UAAWxrB,EAASwrB,UAAW,YAAa,UAAW9lC,GACnF8B,GAAmBuY,EAAS3b,KAAM4b,EAAS5b,KAAM,OAAQ,SAAUsB,GACnEsC,GAAoB+X,EAAS0rB,6BAA8BzrB,EAASyrB,6BAA8B,+BAAgC,mCAAoC/lC,GACtK8B,GAAmBuY,EAASslB,UAAWrlB,EAASqlB,UAAW,YAAa,SAAU3/B,GACnD,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAY9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAI6qB,GACJ,IAAIrK,IA4BhB,OAxBIyK,6BAAA,WACI,OAAOpjC,KAAKmY,eAGhBirB,4BAAA,SAAgB/qB,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGL+qB,aAAa,CAChC9qB,aAAgB,cAChBC,gBAAmB,WACnBC,UAAa,qCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,KAID0qB,WAAoC,CACvDhH,gBAAkB,EAClBxjB,UAAa,oCAIrB,cAWA,OAVIyqB,+BAAA,SAAmB5rB,EAAiCC,GAChD,IAAMta,EAAiC,GAOvC,OANA8B,GAAmBuY,EAASpC,OAAQqC,EAASrC,OAAQ,SAAU,kBAAmBjY,GAClF8B,GAAmBuY,EAAS3b,KAAM4b,EAAS5b,KAAM,OAAQ,SAAUsB,GACnEsC,GAAoB+X,EAAS6rB,yBAA0B5rB,EAAS4rB,yBAA0B,2BAA4B,+CAAgDlmC,GACtK8B,GAAmBuY,EAAS8rB,KAAM7rB,EAAS6rB,KAAM,OAAQ,kBAAmBnmC,GAC5EW,GAAgB0Z,EAAS5a,MAAO6a,EAAS7a,MAAO,QAAS,sBAAuBO,GAChF8B,GAAmBuY,EAASrC,MAAOsC,EAAStC,MAAO,QAAS,kBAAmBhY,GAChD,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAY9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAIkrB,GACJ,IAAI1K,IA4BhB,OAxBI6K,6BAAA,WACI,OAAOxjC,KAAKmY,eAGhBqrB,4BAAA,SAAgBnrB,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLmrB,aAAa,CAChClrB,aAAgB,cAChBC,gBAAmB,cACnBC,UAAa,qCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,KAID8qB,WAAoC,CACvDpH,gBAAkB,EAClBxjB,UAAa,uCAIrB,cAmCA,OAlCI6qB,+BAAA,SAAmBhsB,EAA+BC,GAC9C,IAAMta,EAAiC,GA+BvC,OA9BA8B,GAAmBuY,EAASisB,OAAQhsB,EAASgsB,OAAQ,SAAU,UAAWtmC,GAC1E8B,GAAmBuY,EAASksB,iBAAkBjsB,EAASisB,iBAAkB,mBAAoB,UAAWvmC,GACxG8B,GAAmBuY,EAAS+kB,WAAY9kB,EAAS8kB,WAAY,aAAc,SAAUp/B,GACrF8B,GAAmBuY,EAASmsB,WAAYlsB,EAASksB,WAAY,aAAc,SAAUxmC,GACrF8B,GAAmBuY,EAASosB,QAASnsB,EAASmsB,QAAS,UAAW,UAAWzmC,GAC7E8B,GAAmBuY,EAASqsB,oBAAqBpsB,EAASosB,oBAAqB,sBAAuB,UAAW1mC,GACjH8B,GAAmBuY,EAASssB,kBAAmBrsB,EAASqsB,kBAAmB,oBAAqB,SAAU3mC,GAC1G8B,GAAmBuY,EAASusB,aAActsB,EAASssB,aAAc,eAAgB,SAAU5mC,GAC3F8B,GAAmBuY,EAASwsB,kBAAmBvsB,EAASusB,kBAAmB,oBAAqB,SAAU7mC,GAC1G8B,GAAmBuY,EAASysB,gBAAiBxsB,EAASwsB,gBAAiB,kBAAmB,SAAU9mC,GACpG8B,GAAmBuY,EAAS0sB,OAAQzsB,EAASysB,OAAQ,SAAU,SAAU/mC,GACzE8B,GAAmBuY,EAAS2sB,SAAU1sB,EAAS0sB,SAAU,WAAY,kBAAmBhnC,GACxF8B,GAAmBuY,EAAS3b,KAAM4b,EAAS5b,KAAM,OAAQ,SAAUsB,GACnEsC,GAAoB+X,EAAS4sB,yBAA0B3sB,EAAS2sB,yBAA0B,2BAA4B,iDAAkDjnC,GACxKsC,GAAoB+X,EAAS6sB,iBAAkB5sB,EAAS4sB,iBAAkB,mBAAoB,iDAAkDlnC,GAChJsC,GAAoB+X,EAAS8sB,kBAAmB7sB,EAAS6sB,kBAAmB,oBAAqB,iDAAkDnnC,GACnJ8B,GAAmBuY,EAAS+sB,iBAAkB9sB,EAAS8sB,iBAAkB,mBAAoB,UAAWpnC,GACxGsC,GAAoB+X,EAASgtB,mCAAoC/sB,EAAS+sB,mCAAoC,qCAAsC,yCAA0CrnC,GAC9LsC,GAAoB+X,EAAS6pB,wBAAyB5pB,EAAS4pB,wBAAyB,0BAA2B,iDAAkDlkC,GACrKsC,GAAoB+X,EAASitB,qBAAsBhtB,EAASgtB,qBAAsB,uBAAwB,iDAAkDtnC,GAC5JsC,GAAoB+X,EAASktB,oBAAqBjtB,EAASitB,oBAAqB,sBAAuB,iDAAkDvnC,GACzJsC,GAAoB+X,EAASmtB,0BAA2BltB,EAASktB,0BAA2B,4BAA6B,iDAAkDxnC,GAC3KsC,GAAoB+X,EAASotB,sBAAuBntB,EAASmtB,sBAAuB,wBAAyB,iDAAkDznC,GAC/J8B,GAAmBuY,EAASqtB,iBAAkBptB,EAASotB,iBAAkB,mBAAoB,SAAU1nC,GACvG8B,GAAmBuY,EAASstB,gBAAiBrtB,EAASqtB,gBAAiB,kBAAmB,SAAU3nC,GACpG8B,GAAmBuY,EAASutB,cAAettB,EAASstB,cAAe,gBAAiB,SAAU5nC,GAC9F8B,GAAmBuY,EAAS+pB,KAAM9pB,EAAS8pB,KAAM,OAAQ,SAAUpkC,GACnE8B,GAAmBuY,EAASwtB,mBAAoBvtB,EAASutB,mBAAoB,qBAAsB,SAAU7nC,GAC7G8B,GAAmBuY,EAASslB,UAAWrlB,EAASqlB,UAAW,YAAa,SAAU3/B,GAClF8B,GAAmBuY,EAASrC,MAAOsC,EAAStC,MAAO,QAAS,kBAAmBhY,GAChD,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAY9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAIsrB,GACJ,IAAI9K,IAiChB,OA7BIuM,6BAAA,WACI,OAAOllC,KAAKmY,eAGhB+sB,4BAAA,SAAgB7sB,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGL6sB,aAAa,CAChC5sB,aAAgB,cAChBC,gBAAmB,YACnBC,UAAa,qCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,KAIDwsB,WAAoC,CACvD9I,gBAAkB,EAClBxjB,UAAa,qCAIrB,cAIA,OAHIusB,+BAAA,SAAmB1tB,EAAmCC,GAClD,OAAO,yBAYX,aACI1X,KAAKmY,cAAgB,CACjB,IAAIgtB,GACJ,IAAI1B,GACJ,IAAI9K,IAsBhB,OAlBIyM,6BAAA,WACI,OAAOplC,KAAKmY,eAGhBitB,4BAAA,SAAgB/sB,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGL+sB,aAAa,CAChC9sB,aAAgB,cAChBC,gBAAmB,gBACnBC,UAAa,qCACbC,WAAc,IAEK2sB,WAAoC,CACvDhJ,gBAAkB,EAClBxjB,UAAa,yCAIrB,cAeA,OAdIysB,+BAAA,SAAmB5tB,EAA0BC,GACzC,IAAMta,EAAiC,GAWvC,OAVA4B,GAAiByY,EAAS6tB,iBAAkB5tB,EAAS4tB,iBAAkB,mBAAoB,sBAAuBloC,GAClHmC,GAAsBkY,EAAS8tB,KAAM7tB,EAAS6tB,KAAM,OAAQ,WAAYnoC,GACxE8B,GAAmBuY,EAAS6hB,oBAAqB5hB,EAAS4hB,oBAAqB,sBAAuB,SAAUl8B,GAChH8B,GAAmBuY,EAAS+tB,UAAW9tB,EAAS8tB,UAAW,YAAa,SAAUpoC,GAClF8B,GAAmBuY,EAAS3b,KAAM4b,EAAS5b,KAAM,OAAQ,SAAUsB,GACnE8B,GAAmBuY,EAASukB,kBAAmBtkB,EAASskB,kBAAmB,oBAAqB,SAAU5+B,GAC1G8B,GAAmBuY,EAASguB,GAAI/tB,EAAS+tB,GAAI,KAAM,kBAAmBroC,GACtE8B,GAAmBuY,EAASiuB,GAAIhuB,EAASguB,GAAI,KAAM,kBAAmBtoC,GACtE8B,GAAmBuY,EAASkuB,GAAIjuB,EAASiuB,GAAI,KAAM,kBAAmBvoC,GACtE8B,GAAmBuY,EAASmuB,GAAIluB,EAASkuB,GAAI,KAAM,kBAAmBxoC,GACvC,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAY9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAIktB,GACJ,IAAI1M,IA4BhB,OAxBIkN,6BAAA,WACI,OAAO7lC,KAAKmY,eAGhB0tB,4BAAA,SAAgBxtB,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLwtB,aAAa,CAChCvtB,aAAgB,cAChBC,gBAAmB,OACnBC,UAAa,qCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,KAIDmtB,WAAoC,CACvDzJ,gBAAkB,EAClBxjB,UAAa,gCAIrB,cAYA,OAXIktB,+BAAA,SAAmBruB,EAA+BC,GAC9C,IAAMta,EAAiC,GAQvC,OAPAmC,GAAsBkY,EAAS8tB,KAAM7tB,EAAS6tB,KAAM,OAAQ,WAAYnoC,GACxE8B,GAAmBuY,EAAS6hB,oBAAqB5hB,EAAS4hB,oBAAqB,sBAAuB,SAAUl8B,GAChH8B,GAAmBuY,EAAS+tB,UAAW9tB,EAAS8tB,UAAW,YAAa,SAAUpoC,GAClF8B,GAAmBuY,EAAS3b,KAAM4b,EAAS5b,KAAM,OAAQ,SAAUsB,GACnE0B,GAAgB2Y,EAASsuB,cAAeruB,EAASquB,cAAe,gBAAiB,aAAc3oC,GAC/F8B,GAAmBuY,EAASukB,kBAAmBtkB,EAASskB,kBAAmB,oBAAqB,SAAU5+B,GAC1GwC,GAAgB6X,EAASnR,IAAKoR,EAASpR,IAAK,MAAO,8IAA+IlJ,GACnK,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAY9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAI2tB,GACJ,IAAInN,IA4BhB,OAxBIqN,6BAAA,WACI,OAAOhmC,KAAKmY,eAGhB6tB,4BAAA,SAAgB3tB,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGL2tB,aAAa,CAChC1tB,aAAgB,cAChBC,gBAAmB,YACnBC,UAAa,qCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,KAIDstB,WAAoC,CACvD5J,gBAAkB,EAClBxjB,UAAa,qCAIrB,cAYA,OAXIqtB,+BAAA,SAAmBxuB,EAAiCC,GAChD,IAAMta,EAAiC,GAQvC,OAPA8B,GAAmBuY,EAAS+kB,WAAY9kB,EAAS8kB,WAAY,aAAc,SAAUp/B,GACrF8B,GAAmBuY,EAASwrB,eAAgBvrB,EAASurB,eAAgB,iBAAkB,SAAU7lC,GACjG8B,GAAmBuY,EAASyuB,MAAOxuB,EAASwuB,MAAO,QAAS,SAAU9oC,GACtE8B,GAAmBuY,EAASyrB,UAAWxrB,EAASwrB,UAAW,YAAa,UAAW9lC,GACnF8B,GAAmBuY,EAAS3b,KAAM4b,EAAS5b,KAAM,OAAQ,SAAUsB,GACnEsC,GAAoB+X,EAAS0rB,6BAA8BzrB,EAASyrB,6BAA8B,+BAAgC,mCAAoC/lC,GACtK8B,GAAmBuY,EAASslB,UAAWrlB,EAASqlB,UAAW,YAAa,SAAU3/B,GACnD,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAY9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAI8tB,GACJ,IAAItN,IA4BhB,OAxBIwN,6BAAA,WACI,OAAOnmC,KAAKmY,eAGhBguB,4BAAA,SAAgB9tB,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGL8tB,aAAa,CAChC7tB,aAAgB,cAChBC,gBAAmB,cACnBC,UAAa,qCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,KAIDytB,WAAoC,CACvD/J,gBAAkB,EAClBxjB,UAAa,uCAIrB,cAgBA,OAfIwtB,+BAAA,SAAmB3uB,EAAgCC,GAC/C,IAAMta,EAAiC,GAYvC,OAXA8B,GAAmBuY,EAAS4uB,UAAW3uB,EAAS2uB,UAAW,YAAa,kBAAmBjpC,GAC3F8B,GAAmBuY,EAAS6uB,aAAc5uB,EAAS4uB,aAAc,eAAgB,UAAWlpC,GAC5F8B,GAAmBuY,EAAS8uB,eAAgB7uB,EAAS6uB,eAAgB,iBAAkB,UAAWnpC,GAClG8B,GAAmBuY,EAAS6nB,WAAY5nB,EAAS4nB,WAAY,aAAc,UAAWliC,GACtF8B,GAAmBuY,EAAS+uB,QAAS9uB,EAAS8uB,QAAS,UAAW,SAAUppC,GAC5E8B,GAAmBuY,EAASgvB,QAAS/uB,EAAS+uB,QAAS,UAAW,SAAUrpC,GAC5E8B,GAAmBuY,EAAS3b,KAAM4b,EAAS5b,KAAM,OAAQ,SAAUsB,GACnEsC,GAAoB+X,EAAS6rB,yBAA0B5rB,EAAS4rB,yBAA0B,2BAA4B,kCAAmClmC,GACzJ8B,GAAmBuY,EAASivB,KAAMhvB,EAASgvB,KAAM,OAAQ,SAAUtpC,GACnE8B,GAAmBuY,EAASkvB,WAAYjvB,EAASivB,WAAY,aAAc,kBAAmBvpC,GAC9F8B,GAAmBuY,EAAS5a,MAAO6a,EAAS7a,MAAO,QAAS,SAAUO,GACvC,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAY9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAIiuB,GACJ,IAAIzN,IA4BhB,OAxBIiO,6BAAA,WACI,OAAO5mC,KAAKmY,eAGhByuB,4BAAA,SAAgBvuB,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLuuB,aAAa,CAChCtuB,aAAgB,cAChBC,gBAAmB,aACnBC,UAAa,qCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,KAIDkuB,WAAoC,CACvDxK,gBAAkB,EAClBxjB,UAAa,sCAIrB,cAQA,OAPIiuB,+BAAA,SAAmBpvB,EAA+BC,GAC9C,IAAMta,EAAiC,GAIvC,OAHA8B,GAAmBuY,EAAS+kB,WAAY9kB,EAAS8kB,WAAY,aAAc,SAAUp/B,GACrF8B,GAAmBuY,EAASqvB,YAAapvB,EAASovB,YAAa,cAAe,SAAU1pC,GACxF8B,GAAmBuY,EAAS3b,KAAM4b,EAAS5b,KAAM,OAAQ,SAAUsB,GACpC,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAY9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAI0uB,GACJ,IAAIT,GACJ,IAAIzN,IA4BhB,OAxBIoO,6BAAA,WACI,OAAO/mC,KAAKmY,eAGhB4uB,4BAAA,SAAgB1uB,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGL0uB,aAAa,CAChCzuB,aAAgB,cAChBC,gBAAmB,YACnBC,UAAa,qCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,KAIDquB,WAAoC,CACvD3K,gBAAkB,EAClBxjB,UAAa,qCAIrB,cAYA,OAXIouB,+BAAA,SAAmBvvB,EAAoCC,GACnD,IAAMta,EAAiC,GAQvC,OANA8B,GAAmBuY,EAAS+mB,eAAgB9mB,EAAS8mB,eAAgB,iBAAkB,SAAUphC,GACjG8B,GAAmBuY,EAAS3b,KAAM4b,EAAS5b,KAAM,OAAQ,SAAUsB,GACnE8B,GAAmBuY,EAASwvB,4BAA6BvvB,EAASuvB,4BAA6B,8BAA+B,SAAU7pC,GACxI8B,GAAmBuY,EAASsnB,YAAarnB,EAASqnB,YAAa,cAAe,SAAU3hC,GAExF8B,GAAmBuY,EAASunB,YAAatnB,EAASsnB,YAAa,cAAe,SAAU5hC,GACzD,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAY9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAI6uB,GACJ,IAAIZ,GACJ,IAAIzN,IA4BhB,OAxBIuO,6BAAA,WACI,OAAOlnC,KAAKmY,eAGhB+uB,4BAAA,SAAgB7uB,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGL6uB,aAAa,CAChC5uB,aAAgB,cAChBC,gBAAmB,iBACnBC,UAAa,qCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,KAIDwuB,WAAoC,CACvD9K,gBAAkB,EAClBxjB,UAAa,0CAIrB,cAUA,OATIuuB,+BAAA,SAAmB1vB,EAA4BC,GAC3C,IAAMta,EAAiC,GAMvC,OALA8B,GAAmBuY,EAAS+kB,WAAY9kB,EAAS8kB,WAAY,aAAc,SAAUp/B,GACrF8B,GAAmBuY,EAASqvB,YAAapvB,EAASovB,YAAa,cAAe,SAAU1pC,GACxF8B,GAAmBuY,EAAS2vB,gBAAiB1vB,EAAS0vB,gBAAiB,kBAAmB,UAAWhqC,GACrG8B,GAAmBuY,EAAS4vB,cAAe3vB,EAAS2vB,cAAe,gBAAiB,UAAWjqC,GAC/F8B,GAAmBuY,EAAS3b,KAAM4b,EAAS5b,KAAM,OAAQ,SAAUsB,GACpC,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAY9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAIgvB,GACJ,IAAIf,GACJ,IAAIzN,IA4BhB,OAxBI2O,6BAAA,WACI,OAAOtnC,KAAKmY,eAGhBmvB,4BAAA,SAAgBjvB,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLivB,aAAa,CAChChvB,aAAgB,cAChBC,gBAAmB,SACnBC,UAAa,qCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,KAID4uB,WAAoC,CACvDlL,gBAAkB,EAClBxjB,UAAa,kCAIrB,cAUA,OATI2uB,+BAAA,SAAmB9vB,EAAsCC,GACrD,IAAMta,EAAiC,GAMvC,OAJA8B,GAAmBuY,EAAS6uB,aAAc5uB,EAAS4uB,aAAc,eAAgB,UAAWlpC,GAC5F8B,GAAmBuY,EAAS3b,KAAM4b,EAAS5b,KAAM,OAAQ,SAAUsB,GAGpC,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAY9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAIovB,GACJ,IAAInB,GACJ,IAAIzN,IA4BhB,OAxBI6O,6BAAA,WACI,OAAOxnC,KAAKmY,eAGhBqvB,4BAAA,SAAgBnvB,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLmvB,aAAa,CAChClvB,aAAgB,cAChBC,gBAAmB,mBACnBC,UAAa,qCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,KAID8uB,WAAoC,CACvDpL,gBAAkB,EAClBxjB,UAAa,4CAIrB,cAgBA,OAfI6uB,+BAAA,SAAmBhwB,EAAiCC,GAChD,IAAMta,EAAiC,GAYvC,OAXA8B,GAAmBuY,EAAS+kB,WAAY9kB,EAAS8kB,WAAY,aAAc,SAAUp/B,GACrF8B,GAAmBuY,EAASqqB,WAAYpqB,EAASoqB,WAAY,aAAc,SAAU1kC,GACrF8B,GAAmBuY,EAASuqB,UAAWtqB,EAASsqB,UAAW,YAAa,SAAU5kC,GAClF8B,GAAmBuY,EAASiwB,kBAAmBhwB,EAASgwB,kBAAmB,oBAAqB,UAAWtqC,GAC3G8B,GAAmBuY,EAASkwB,kBAAmBjwB,EAASiwB,kBAAmB,oBAAqB,UAAWvqC,GAC3G8B,GAAmBuY,EAASmwB,eAAgBlwB,EAASkwB,eAAgB,iBAAkB,SAAUxqC,GACjG8B,GAAmBuY,EAASowB,mBAAoBnwB,EAASmwB,mBAAoB,qBAAsB,SAAUzqC,GAC7G8B,GAAmBuY,EAASqwB,kBAAmBpwB,EAASowB,kBAAmB,oBAAqB,SAAU1qC,GAC1G8B,GAAmBuY,EAASswB,eAAgBrwB,EAASqwB,eAAgB,iBAAkB,SAAU3qC,GACjG8B,GAAmBuY,EAASuwB,kBAAmBtwB,EAASswB,kBAAmB,oBAAqB,SAAU5qC,GAC1G8B,GAAmBuY,EAAS3b,KAAM4b,EAAS5b,KAAM,OAAQ,SAAUsB,GACpC,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAY9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAIsvB,GACJ,IAAI9O,IA4BhB,OAxBIsP,6BAAA,WACI,OAAOjoC,KAAKmY,eAGhB8vB,4BAAA,SAAgB5vB,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGL4vB,aAAa,CAChC3vB,aAAgB,cAChBC,gBAAmB,cACnBC,UAAa,qCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,KAIDuvB,WAAoC,CACvD7L,gBAAkB,EAClBxjB,UAAa,uCAIrB,cAqBA,OApBIsvB,+BAAA,SAAmBzwB,EAA+BC,GAC9C,IAAMta,EAAiC,GAiBvC,OAhBA8B,GAAmBuY,EAAShP,UAAWiP,EAASjP,UAAW,YAAa,UAAWrL,GACnF8B,GAAmBuY,EAAS3b,KAAM4b,EAAS5b,KAAM,OAAQ,SAAUsB,GACnEsC,GAAoB+X,EAAS6iB,yBAA0B5iB,EAAS4iB,yBAA0B,2BAA4B,uDAAwDl9B,GAC9KsC,GAAoB+X,EAAS8iB,wBAAyB7iB,EAAS6iB,wBAAyB,0BAA2B,uDAAwDn9B,GAC3KsC,GAAoB+X,EAAS+iB,yBAA0B9iB,EAAS8iB,yBAA0B,2BAA4B,iDAAkDp9B,GACxKsC,GAAoB+X,EAASgjB,wBAAyB/iB,EAAS+iB,wBAAyB,0BAA2B,gDAAiDr9B,GACpKsC,GAAoB+X,EAASijB,uBAAwBhjB,EAASgjB,uBAAwB,yBAA0B,iDAAkDt9B,GAClKsC,GAAoB+X,EAASkjB,sBAAuBjjB,EAASijB,sBAAuB,wBAAyB,uDAAwDv9B,GAErK0B,GAAgB2Y,EAAS0lB,qBAAsBzlB,EAASylB,qBAAsB,uBAAwB,aAAc//B,GACpH0B,GAAgB2Y,EAAS2lB,sBAAuB1lB,EAAS0lB,sBAAuB,wBAAyB,aAAchgC,GACvH0B,GAAgB2Y,EAAS4lB,oBAAqB3lB,EAAS2lB,oBAAqB,sBAAuB,aAAcjgC,GACjH0B,GAAgB2Y,EAAS6lB,mBAAoB5lB,EAAS4lB,mBAAoB,qBAAsB,aAAclgC,GAC9GQ,GAAiB6Z,EAAS/R,SAAUgS,EAAShS,SAAU,WAAY,uBAAwBtI,GAC3FQ,GAAiB6Z,EAAShH,QAASiH,EAASjH,QAAS,UAAW,uBAAwBrT,GACxFwC,GAAgB6X,EAASQ,YAAaP,EAASO,YAAa,cAAe,qFAAsF7a,GAClI,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAY9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAI+vB,IA4BhB,OAxBIC,6BAAA,WACI,OAAOnoC,KAAKmY,eAGhBgwB,4BAAA,SAAgB9vB,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGL8vB,aAAa,CAChC7vB,aAAgB,cAChBC,gBAAmB,YACnBC,UAAa,uCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,KAIDyvB,WAAoC,CACvDC,gBAAkB,EAClBxvB,UAAa,qCAIrB,cAOA,OANIyvB,+BAAA,SAAmB5wB,EAAiCC,GAChD,IAAMta,EAAiC,GAGvC,OAFA8B,GAAmBuY,EAAS6wB,YAAa5wB,EAAS4wB,YAAa,cAAe,UAAWlrC,GACzFwC,GAAgB6X,EAASklB,WAAYjlB,EAASilB,WAAY,aAAc,+DAAgEv/B,GACzG,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAY9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAIkwB,GACJ,IAAIH,IA4BhB,OAxBIK,6BAAA,WACI,OAAOvoC,KAAKmY,eAGhBowB,4BAAA,SAAgBlwB,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLkwB,aAAa,CAChCjwB,aAAgB,cAChBC,gBAAmB,cACnBC,UAAa,uCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,KAID6vB,WAAoC,CACvDH,gBAAkB,EAClBxvB,UAAa,uCAIrB,cASA,OARI4vB,+BAAA,SAAmB/wB,EAAsCC,GACrD,IAAMta,EAAiC,GAKvC,OAJA8B,GAAmBuY,EAASgxB,QAAS/wB,EAAS+wB,QAAS,UAAW,SAAUrrC,GAC5E8B,GAAmBuY,EAAS0sB,OAAQzsB,EAASysB,OAAQ,SAAU,SAAU/mC,GACzE8B,GAAmBuY,EAASixB,YAAahxB,EAASgxB,YAAa,cAAe,SAAUtrC,GACxF8B,GAAmBuY,EAASkxB,KAAMjxB,EAASixB,KAAM,OAAQ,SAAUvrC,GACpC,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAY9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAIqwB,GACJ,IAAIH,GACJ,IAAIH,IAsBhB,OAlBIU,6BAAA,WACI,OAAO5oC,KAAKmY,eAGhBywB,4BAAA,SAAgBvwB,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLuwB,aAAa,CAChCtwB,aAAgB,cAChBC,gBAAmB,mBACnBC,UAAa,uCACbC,WAAc,IAEKmwB,WAAoC,CACvDR,gBAAkB,EAClBxvB,UAAa,4CAIrB,cAMA,OALIiwB,+BAAA,SAAmBpxB,EAAmCC,GAClD,IAAMta,EAAiC,GAEvC,OADA8B,GAAmBuY,EAAS8M,OAAQ7M,EAAS6M,OAAQ,SAAU,SAAUnnB,GAC1C,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAY9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAI0wB,GACJ,IAAIL,GACJ,IAAIH,GACJ,IAAIH,IAsBhB,OAlBIY,6BAAA,WACI,OAAO9oC,KAAKmY,eAGhB2wB,4BAAA,SAAgBzwB,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLywB,aAAa,CAChCxwB,aAAgB,cAChBC,gBAAmB,gBACnBC,UAAa,uCACbC,WAAc,IAEKqwB,WAAoC,CACvDV,gBAAkB,EAClBxvB,UAAa,yCAIrB,cAIA,OAHImwB,+BAAA,SAAmBtxB,EAAgCC,GAC/C,OAAO,yBAYX,aACI1X,KAAKmY,cAAgB,CACjB,IAAI4wB,GACJ,IAAIP,GACJ,IAAIH,GACJ,IAAIH,IAsBhB,OAlBIc,6BAAA,WACI,OAAOhpC,KAAKmY,eAGhB6wB,4BAAA,SAAgB3wB,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGL2wB,aAAa,CAChC1wB,aAAgB,cAChBC,gBAAmB,aACnBC,UAAa,uCACbC,WAAc,IAEKuwB,WAAoC,CACvDZ,gBAAkB,EAClBxvB,UAAa,sCAIrB,cAMA,OALIqwB,+BAAA,SAAmBxxB,EAAkCC,GACjD,IAAMta,EAAiC,GAEvC,OADA8B,GAAmBuY,EAASyxB,UAAWxxB,EAASwxB,UAAW,YAAa,SAAU9rC,GACnD,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAY9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAI8wB,GACJ,IAAIT,GACJ,IAAIH,GACJ,IAAIH,IAsBhB,OAlBIiB,6BAAA,WACI,OAAOnpC,KAAKmY,eAGhBgxB,4BAAA,SAAgB9wB,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGL8wB,aAAa,CAChC7wB,aAAgB,cAChBC,gBAAmB,eACnBC,UAAa,uCACbC,WAAc,IAEK0wB,WAAoC,CACvDf,gBAAkB,EAClBxvB,UAAa,wCAIrB,cAMA,OALIwwB,+BAAA,SAAmB3xB,EAAiCC,GAChD,IAAMta,EAAiC,GAEvC,OADA8B,GAAmBuY,EAAS8M,OAAQ7M,EAAS6M,OAAQ,SAAU,SAAUnnB,GAC1C,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAY9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAIixB,GACJ,IAAIZ,GACJ,IAAIH,GACJ,IAAIH,IAsBhB,OAlBImB,6BAAA,WACI,OAAOrpC,KAAKmY,eAGhBkxB,4BAAA,SAAgBhxB,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLgxB,aAAa,CAChC/wB,aAAgB,cAChBC,gBAAmB,cACnBC,UAAa,uCACbC,WAAc,IAEK4wB,WAAoC,CACvDjB,gBAAkB,EAClBxvB,UAAa,uCAIrB,cAOA,OANI0wB,+BAAA,SAAmB7xB,EAAkCC,GACjD,IAAMta,EAAiC,GAGvC,OAFA8B,GAAmBuY,EAAS6nB,WAAY5nB,EAAS4nB,WAAY,aAAc,UAAWliC,GACtF8B,GAAmBuY,EAAS0sB,OAAQzsB,EAASysB,OAAQ,SAAU,SAAU/mC,GAC1C,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAY9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAImxB,GACJ,IAAIjB,GACJ,IAAIH,IA4BhB,OAxBIqB,6BAAA,WACI,OAAOvpC,KAAKmY,eAGhBoxB,4BAAA,SAAgBlxB,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLkxB,aAAa,CAChCjxB,aAAgB,cAChBC,gBAAmB,eACnBC,UAAa,uCACbC,WAAc,CACV,CACI3c,KAAQ,aACR0B,KAAQ,UACRkb,UAAY,KAID6wB,WAAoC,CACvDnB,gBAAkB,EAClBxvB,UAAa,wCAIrB,cAIA,OAHI4wB,+BAAA,SAAmB/xB,EAAsCC,GACrD,OAAO,yBAYX,aACI1X,KAAKmY,cAAgB,CACjB,IAAIqxB,GACJ,IAAItB,IA4BhB,OAxBIuB,6BAAA,WACI,OAAOzpC,KAAKmY,eAGhBsxB,4BAAA,SAAgBpxB,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLoxB,aAAa,CAChCnxB,aAAgB,cAChBC,gBAAmB,mBACnBC,UAAa,uCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,KAID+wB,WAAoC,CACvDrB,gBAAkB,EAClBxvB,UAAa,4CAIrB,cAQA,OAPI8wB,+BAAA,SAAmBjyB,EAA8BC,GAC7C,IAAMta,EAAiC,GAIvC,OAHA4B,GAAiByY,EAASkyB,QAASjyB,EAASiyB,QAAS,UAAW,sBAAuBvsC,GACvF8B,GAAmBuY,EAASmyB,kBAAmBlyB,EAASkyB,kBAAmB,oBAAqB,SAAUxsC,GAC1G8B,GAAmBuY,EAASoyB,kBAAmBnyB,EAASmyB,kBAAmB,oBAAqB,SAAUzsC,GAC3E,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAY9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAIuxB,GACJ,IAAIF,GACJ,IAAItB,IA4BhB,OAxBI4B,6BAAA,WACI,OAAO9pC,KAAKmY,eAGhB2xB,4BAAA,SAAgBzxB,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLyxB,aAAa,CAChCxxB,aAAgB,cAChBC,gBAAmB,WACnBC,UAAa,uCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,KAIDoxB,WAAoC,CACvD1B,gBAAkB,EAClBxvB,UAAa,oCAIrB,cASA,OARImxB,+BAAA,SAAmBtyB,EAAuCC,GACtD,IAAMta,EAAiC,GAKvC,OAJA8B,GAAmBuY,EAASuyB,SAAUtyB,EAASsyB,SAAU,WAAY,SAAU5sC,GAC/E8B,GAAmBuY,EAASyE,iBAAkBxE,EAASwE,iBAAkB,mBAAoB,SAAU9e,GACvG8B,GAAmBuY,EAAS+pB,KAAM9pB,EAAS8pB,KAAM,OAAQ,SAAUpkC,GACnE8B,GAAmBuY,EAASwyB,YAAavyB,EAASuyB,YAAa,cAAe,SAAU7sC,GACzD,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAY9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAI4xB,GACJ,IAAIL,GACJ,IAAIF,GACJ,IAAItB,IAiChB,OA7BIgC,6BAAA,WACI,OAAOlqC,KAAKmY,eAGhB+xB,4BAAA,SAAgB7xB,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGL6xB,aAAa,CAChC5xB,aAAgB,cAChBC,gBAAmB,oBACnBC,UAAa,uCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,iBACR0B,KAAQ,UACRkb,UAAY,KAIDwxB,WAAoC,CACvD9B,gBAAkB,EAClBxvB,UAAa,6CAIrB,cAIA,OAHIuxB,+BAAA,SAAmB1yB,EAAkCC,GACjD,OAAO,yBAYX,aACI1X,KAAKmY,cAAgB,CACjB,IAAIgyB,GACJ,IAAIT,GACJ,IAAIF,GACJ,IAAItB,IAiChB,OA7BIkC,6BAAA,WACI,OAAOpqC,KAAKmY,eAGhBiyB,4BAAA,SAAgB/xB,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGL+xB,aAAa,CAChC9xB,aAAgB,cAChBC,gBAAmB,eACnBC,UAAa,uCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,oBACRkb,UAAY,GAEhB,CACI5c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,KAID0xB,WAAoC,CACvDhC,gBAAkB,EAClBxvB,UAAa,wCAIrB,cAgBA,OAfIyxB,+BAAA,SAAmB5yB,EAAiCC,GAChD,IAAMta,EAAiC,GAYvC,OAXA8B,GAAmBuY,EAAS5Y,UAAW6Y,EAAS7Y,UAAW,YAAa,UAAWzB,GACnF8B,GAAmBuY,EAAS3b,KAAM4b,EAAS5b,KAAM,OAAQ,SAAUsB,GACnEa,GAAgBwZ,EAAS6yB,aAAc5yB,EAAS4yB,aAAc,eAAgB,sBAAuBltC,GACrGsC,GAAoB+X,EAAS8yB,yBAA0B7yB,EAAS6yB,yBAA0B,2BAA4B,oDAAqDntC,GAC3KsC,GAAoB+X,EAAS+yB,0BAA2B9yB,EAAS8yB,0BAA2B,4BAA6B,qDAAsDptC,GAC/KsC,GAAoB+X,EAASgzB,0BAA2B/yB,EAAS+yB,0BAA2B,4BAA6B,oDAAqDrtC,GAC9KsC,GAAoB+X,EAASizB,oCAAqChzB,EAASgzB,oCAAqC,sCAAuC,oDAAqDttC,GAC5MsC,GAAoB+X,EAASkzB,2BAA4BjzB,EAASizB,2BAA4B,6BAA8B,qDAAsDvtC,GAClLsC,GAAoB+X,EAASK,oBAAqBJ,EAASI,oBAAqB,sBAAuB,oDAAqD1a,GAC5JsC,GAAoB+X,EAASmzB,wBAAyBlzB,EAASkzB,wBAAyB,0BAA2B,oDAAqDxtC,GACxK8B,GAAmBuY,EAASyE,iBAAkBxE,EAASwE,iBAAkB,mBAAoB,SAAU9e,GACxE,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAiB9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAIkyB,IAiChB,OA7BIQ,6BAAA,WACI,OAAO7qC,KAAKmY,eAGhB0yB,4BAAA,SAAgBxyB,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLwyB,aAAa,CAChCvyB,aAAgB,cAChBC,gBAAmB,cACnBC,UAAa,qCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,KAIDmyB,WAAoC,CACvDC,eAAiB,EACjBlyB,UAAa,uCAIrB,cAWA,OAVImyB,+BAAA,SAAmBtzB,EAA+BC,GAC9C,IAAMta,EAAiC,GAOvC,OANA8B,GAAmBuY,EAASuzB,eAAgBtzB,EAASszB,eAAgB,iBAAkB,SAAU5tC,GACjG0B,GAAgB2Y,EAASwzB,4BAA6BvzB,EAASuzB,4BAA6B,8BAA+B,iIAAkI7tC,GAC7P0B,GAAgB2Y,EAASyzB,8BAA+BxzB,EAASwzB,8BAA+B,gCAAiC,oHAAqH9tC,GACtP8B,GAAmBuY,EAASye,UAAWxe,EAASwe,UAAW,YAAa,SAAU94B,GAClFwC,GAAgB6X,EAAS0zB,gBAAiBzzB,EAASyzB,gBAAiB,kBAAmB,qCAAsC/tC,GAC7HwC,GAAgB6X,EAAS2zB,oBAAqB1zB,EAAS0zB,oBAAqB,sBAAuB,qCAAsChuC,GAC1G,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAgB9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAI4yB,GACJ,IAAIV,IAsChB,OAlCIgB,6BAAA,WACI,OAAOrrC,KAAKmY,eAGhBkzB,4BAAA,SAAgBhzB,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLgzB,aAAa,CAChC/yB,aAAgB,cAChBC,gBAAmB,YACnBC,UAAa,qCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,0CACRkb,UAAY,KAID2yB,WAAoC,CACvDP,eAAiB,EACjBlyB,UAAa,qCAIrB,cAcA,OAbI0yB,+BAAA,SAAmB7zB,EAAoCC,GACnD,IAAMta,EAAiC,GAUvC,OATA8B,GAAmBuY,EAAS8zB,mBAAoB7zB,EAAS6zB,mBAAoB,qBAAsB,SAAUnuC,GAC7G8B,GAAmBuY,EAAS+zB,iBAAkB9zB,EAAS8zB,iBAAkB,mBAAoB,SAAUpuC,GACvG8B,GAAmBuY,EAASg0B,UAAW/zB,EAAS+zB,UAAW,YAAa,UAAWruC,GACnF8B,GAAmBuY,EAAS3b,KAAM4b,EAAS5b,KAAM,OAAQ,SAAUsB,GACnEsC,GAAoB+X,EAASi0B,sBAAuBh0B,EAASg0B,sBAAuB,wBAAyB,uDAAwDtuC,GACrKsC,GAAoB+X,EAASk0B,uBAAwBj0B,EAASi0B,uBAAwB,yBAA0B,uDAAwDvuC,GACxK8B,GAAmBuY,EAASm0B,UAAWl0B,EAASk0B,UAAW,YAAa,UAAWxuC,GACnFwC,GAAgB6X,EAAS0zB,gBAAiBzzB,EAASyzB,gBAAiB,kBAAmB,qCAAsC/tC,GAC7HwC,GAAgB6X,EAASo0B,QAASn0B,EAASm0B,QAAS,UAAW,8FAA+FzuC,GAC/H,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAiB9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAImzB,GACJ,IAAIjB,IAsChB,OAlCIyB,6BAAA,WACI,OAAO9rC,KAAKmY,eAGhB2zB,4BAAA,SAAgBzzB,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLyzB,aAAa,CAChCxzB,aAAgB,cAChBC,gBAAmB,iBACnBC,UAAa,qCACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,+CACRkb,UAAY,KAIDozB,WAAoC,CACvDhB,eAAiB,EACjBlyB,UAAa,0CAIrB,cAkCA,OAjCImzB,+BAAA,SAAmBt0B,EAAiCC,GAChD,IAAMta,EAAiC,GA8BvC,OA5BA8B,GAAmBuY,EAASu0B,0BAA2Bt0B,EAASs0B,0BAA2B,4BAA6B,SAAU5uC,GAClI8B,GAAmBuY,EAASw0B,iBAAkBv0B,EAASu0B,iBAAkB,mBAAoB,SAAU7uC,GACvG8B,GAAmBuY,EAASy0B,gBAAiBx0B,EAASw0B,gBAAiB,kBAAmB,SAAU9uC,GACpG8B,GAAmBuY,EAASuF,eAAgBtF,EAASsF,eAAgB,iBAAkB,SAAU5f,GACjG8B,GAAmBuY,EAAS00B,WAAYz0B,EAASy0B,WAAY,aAAc,UAAW/uC,GACtF8B,GAAmBuY,EAAS20B,gBAAiB10B,EAAS00B,gBAAiB,kBAAmB,UAAWhvC,GACrG8B,GAAmBuY,EAAS40B,SAAU30B,EAAS20B,SAAU,WAAY,UAAWjvC,GAChF8B,GAAmBuY,EAAS60B,QAAS50B,EAAS40B,QAAS,UAAW,UAAWlvC,GAC7EgC,GAAiBqY,EAAS80B,kBAAmB70B,EAAS60B,kBAAmB,oBAAqB,2BAA4BnvC,GAC1H8B,GAAmBuY,EAAS+0B,UAAW90B,EAAS80B,UAAW,YAAa,UAAWpvC,GACnF8B,GAAmBuY,EAASg1B,KAAM/0B,EAAS+0B,KAAM,OAAQ,UAAWrvC,GACpE8B,GAAmBuY,EAASi1B,OAAQh1B,EAASg1B,OAAQ,SAAU,UAAWtvC,GAC1E8B,GAAmBuY,EAASk1B,eAAgBj1B,EAASi1B,eAAgB,iBAAkB,UAAWvvC,GAClG8B,GAAmBuY,EAASm1B,OAAQl1B,EAASk1B,OAAQ,SAAU,UAAWxvC,GAC1E8B,GAAmBuY,EAASo1B,MAAOn1B,EAASm1B,MAAO,QAAS,SAAUzvC,GACtE8B,GAAmBuY,EAASq1B,kBAAmBp1B,EAASo1B,kBAAmB,oBAAqB,UAAW1vC,GAC3G8B,GAAmBuY,EAASs1B,oBAAqBr1B,EAASq1B,oBAAqB,sBAAuB,SAAU3vC,GAChH8B,GAAmBuY,EAASu1B,mBAAoBt1B,EAASs1B,mBAAoB,qBAAsB,SAAU5vC,GAC7G8B,GAAmBuY,EAASw1B,gBAAiBv1B,EAASu1B,gBAAiB,kBAAmB,UAAW7vC,GAErG8B,GAAmBuY,EAAS3b,KAAM4b,EAAS5b,KAAM,OAAQ,SAAUsB,GACnE0B,GAAgB2Y,EAASI,UAAWH,EAASG,UAAW,YAAa,aAAcza,GACnFsC,GAAoB+X,EAASK,oBAAqBJ,EAASI,oBAAqB,sBAAuB,oDAAqD1a,GAE5J8B,GAAmBuY,EAASO,SAAUN,EAASM,SAAU,WAAY,SAAU5a,GAC/E8B,GAAmBuY,EAASy1B,MAAOx1B,EAASw1B,MAAO,QAAS,SAAU9vC,GACtE8B,GAAmBuY,EAAS01B,MAAOz1B,EAASy1B,MAAO,QAAS,SAAU/vC,GACtE8B,GAAmBuY,EAAS21B,MAAO11B,EAAS01B,MAAO,QAAS,SAAUhwC,GACvC,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAc9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAI4zB,IA4BhB,OAxBIsB,6BAAA,WACI,OAAOrtC,KAAKmY,eAGhBk1B,4BAAA,SAAgBh1B,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLg1B,aAAa,CAChC/0B,aAAgB,cAChBC,gBAAmB,cACnBC,UAAa,iDACbC,WAAc,CACV,CACI3c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,KAID20B,WAAoC,CACvDC,WAAa,EACb10B,UAAa,uCAIrB,cAWA,OAVI20B,+BAAA,SAAmB91B,EAAiCC,GAChD,IAAMta,EAAiC,GAOvC,OANAQ,GAAiB6Z,EAAS+1B,oBAAqB91B,EAAS81B,oBAAqB,sBAAuB,uBAAwBpwC,GAC5HQ,GAAiB6Z,EAASg2B,gBAAiB/1B,EAAS+1B,gBAAiB,kBAAmB,uBAAwBrwC,GAChHsC,GAAoB+X,EAASi2B,iBAAkBh2B,EAASg2B,iBAAkB,mBAAoB,oDAAqDtwC,GACnJ8B,GAAmBuY,EAASk2B,UAAWj2B,EAASi2B,UAAW,YAAa,SAAUvwC,GAClF8B,GAAmBuY,EAASm2B,IAAKl2B,EAASk2B,IAAK,MAAO,SAAUxwC,GAChEwC,GAAgB6X,EAASo2B,2BAA4Bn2B,EAASm2B,2BAA4B,6BAA8B,wCAAyCzwC,GAClI,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAY9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAIo1B,GACJ,IAAIxB,IAwFhB,OApFI+B,6BAAA,WACI,OAAO9tC,KAAKmY,eAGhB21B,4BAAA,SAAgBz1B,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLy1B,aAAa,CAChCx1B,aAAgB,cAChBC,gBAAmB,cACnBC,UAAa,iDACbC,WAAc,CACV,CACI3c,KAAQ,UACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,GAEhB,CACI5c,KAAQ,aACR0B,KAAQ,WACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,WACRkb,UAAY,GAEhB,CACI5c,KAAQ,SACR0B,KAAQ,aACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,8CACRkb,UAAY,GAEhB,CACI5c,KAAQ,SACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,cACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,kBACR0B,KAAQ,MACRkb,UAAY,GAEhB,CACI5c,KAAQ,oBACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,YACR0B,KAAQ,SACRkb,UAAY,KAIDo1B,WAAoC,CACvDR,WAAa,EACb10B,UAAa,uCAIrB,cAIA,OAHIm1B,+BAAA,SAAmBt2B,EAAoCC,GACnD,OAAO,yBAYX,aACI1X,KAAKmY,cAAgB,CACjB,IAAI41B,GACJ,IAAIR,GACJ,IAAIxB,IAoEhB,OAhEIiC,6BAAA,WACI,OAAOhuC,KAAKmY,eAGhB61B,4BAAA,SAAgB31B,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGL21B,aAAa,CAChC11B,aAAgB,cAChBC,gBAAmB,iBACnBC,UAAa,iDACbC,WAAc,CACV,CACI3c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,GAEhB,CACI5c,KAAQ,OACR0B,KAAQ,oBACRkb,UAAY,GAEhB,CACI5c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,SACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,kBACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,eACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,cACR0B,KAAQ,SACRkb,UAAY,KAIDs1B,WAAoC,CACvDV,WAAa,EACb10B,UAAa,0CAIrB,cAmBA,OAlBIq1B,+BAAA,SAAmBx2B,EAA6BC,GAC5C,IAAMta,EAAiC,GAevC,OAbA8B,GAAmBuY,EAASy2B,WAAYx2B,EAASw2B,WAAY,aAAc,UAAW9wC,GACtFsC,GAAoB+X,EAASi2B,iBAAkBh2B,EAASg2B,iBAAkB,mBAAoB,gDAAiDtwC,GAC/I8B,GAAmBuY,EAAS02B,KAAMz2B,EAASy2B,KAAM,OAAQ,SAAU/wC,GACnE8B,GAAmBuY,EAAS22B,QAAS12B,EAAS02B,QAAS,UAAW,SAAUhxC,GAC5E8B,GAAmBuY,EAASm2B,IAAKl2B,EAASk2B,IAAK,MAAO,SAAUxwC,GAChE8B,GAAmBuY,EAAS42B,gBAAiB32B,EAAS22B,gBAAiB,kBAAmB,SAAUjxC,GACpG8B,GAAmBuY,EAAS62B,OAAQ52B,EAAS42B,OAAQ,SAAU,SAAUlxC,GACzE8B,GAAmBuY,EAAS82B,KAAM72B,EAAS62B,KAAM,OAAQ,SAAUnxC,GACnE8B,GAAmBuY,EAAS+2B,QAAS92B,EAAS82B,QAAS,UAAW,SAAUpxC,GAC5E8B,GAAmBuY,EAASg3B,gBAAiB/2B,EAAS+2B,gBAAiB,kBAAmB,SAAUrxC,GACpG8B,GAAmBuY,EAASi3B,OAAQh3B,EAASg3B,OAAQ,SAAU,SAAUtxC,GACzE8B,GAAmBuY,EAASk3B,KAAMj3B,EAASi3B,KAAM,OAAQ,SAAUvxC,GACnE8B,GAAmBuY,EAASm3B,gBAAiBl3B,EAASk3B,gBAAiB,kBAAmB,SAAUxxC,GACrE,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAY9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAI81B,GACJ,IAAIlC,IA8EhB,OA1EI8C,6BAAA,WACI,OAAO7uC,KAAKmY,eAGhB02B,4BAAA,SAAgBx2B,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLw2B,aAAa,CAChCv2B,aAAgB,cAChBC,gBAAmB,UACnBC,UAAa,iDACbC,WAAc,CACV,CACI3c,KAAQ,MACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,gBACR0B,KAAQ,+CACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,eACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,SACR0B,KAAQ,aACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,8CACRkb,UAAY,GAEhB,CACI5c,KAAQ,SACR0B,KAAQ,iFACRkb,UAAY,GAEhB,CACI5c,KAAQ,eACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,SACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,SACRkb,UAAY,KAIDm2B,WAAoC,CACvDvB,WAAa,EACb10B,UAAa,mCAIrB,cAMA,OALIk2B,+BAAA,SAAmBr3B,EAAgCC,GAC/C,IAAMta,EAAiC,GAEvC,OADA8B,GAAmBuY,EAASs3B,OAAQr3B,EAASq3B,OAAQ,SAAU,SAAU3xC,GAC1C,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAc9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAI22B,GACJ,IAAIb,GACJ,IAAIlC,IAoEhB,OAhEIiD,6BAAA,WACI,OAAOhvC,KAAKmY,eAGhB62B,4BAAA,SAAgB32B,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGL22B,aAAa,CAChC12B,aAAgB,cAChBC,gBAAmB,aACnBC,UAAa,iDACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,kBACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,SACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,SACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,GAEhB,CACI5c,KAAQ,kBACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,eACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,KAIDs2B,WAAoC,CACvD1B,WAAa,EACb10B,UAAa,sCAIrB,cAqBA,OApBIq2B,+BAAA,SAAmBx3B,EAAuCC,GACtD,IAAMta,EAAiC,GAiBvC,OAhBA8B,GAAmBuY,EAASy3B,UAAWx3B,EAASw3B,UAAW,YAAa,UAAW9xC,GACnF8B,GAAmBuY,EAASi1B,OAAQh1B,EAASg1B,OAAQ,SAAU,UAAWtvC,GAC1E8B,GAAmBuY,EAAS5Y,UAAW6Y,EAAS7Y,UAAW,YAAa,UAAWzB,GACnF0B,GAAgB2Y,EAAS03B,YAAaz3B,EAASy3B,YAAa,cAAe,aAAc/xC,GACzFsC,GAAoB+X,EAAS23B,sBAAuB13B,EAAS03B,sBAAuB,wBAAyB,0DAA2DhyC,GACxK8B,GAAmBuY,EAAS43B,YAAa33B,EAAS23B,YAAa,cAAe,SAAUjyC,GACxFwC,GAAgB6X,EAAS6S,UAAW5S,EAAS4S,UAAW,YAAa,iFAAkFltB,GACvJwC,GAAgB6X,EAAS+S,UAAW9S,EAAS8S,UAAW,YAAa,iFAAkFptB,GACvJwC,GAAgB6X,EAASiT,SAAUhT,EAASgT,SAAU,WAAY,oEAAqEttB,GACvIwC,GAAgB6X,EAASkT,UAAWjT,EAASiT,UAAW,YAAa,sEAAuEvtB,GAC5IwC,GAAgB6X,EAAS63B,YAAa53B,EAAS43B,YAAa,cAAe,2BAA4BlyC,GACvGwC,GAAgB6X,EAASmT,OAAQlT,EAASkT,OAAQ,SAAU,oEAAqExtB,GACjIwC,GAAgB6X,EAASqT,UAAWpT,EAASoT,UAAW,YAAa,iFAAkF1tB,GACvJwC,GAAgB6X,EAASwT,WAAYvT,EAASuT,WAAY,aAAc,oFAAqF7tB,GAC7JwC,GAAgB6X,EAAS0T,WAAYzT,EAASyT,WAAY,aAAc,kFAAmF/tB,GAC3JwC,GAAgB6X,EAAS2T,WAAY1T,EAAS0T,WAAY,aAAc,kFAAmFhuB,GAC5H,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAa9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAI82B,GACJ,IAAIhB,GACJ,IAAIlC,IA0DhB,OAtDIwD,6BAAA,WACI,OAAOvvC,KAAKmY,eAGhBo3B,4BAAA,SAAgBl3B,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLk3B,aAAa,CAChCj3B,aAAgB,cAChBC,gBAAmB,oBACnBC,UAAa,iDACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,OACR0B,KAAQ,MACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,MACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,GAEhB,CACI5c,KAAQ,kBACR0B,KAAQ,uBACRkb,UAAY,GAEhB,CACI5c,KAAQ,kBACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,SACR0B,KAAQ,UACRkb,UAAY,KAID62B,WAAoC,CACvDjC,WAAa,EACb10B,UAAa,6CAIrB,cAMA,OALI42B,+BAAA,SAAmB/3B,EAA6CC,GAC5D,IAAMta,EAAiC,GAEvC,OADA8B,GAAmBuY,EAASg4B,QAAS/3B,EAAS+3B,QAAS,UAAW,UAAWryC,GAC9C,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAa9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAIq3B,GACJ,IAAIP,GACJ,IAAIhB,GACJ,IAAIlC,IAqDhB,OAjDI2D,6BAAA,WACI,OAAO1vC,KAAKmY,eAGhBu3B,4BAAA,SAAgBr3B,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLq3B,aAAa,CAChCp3B,aAAgB,cAChBC,gBAAmB,0BACnBC,UAAa,iDACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,cACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,GAEhB,CACI5c,KAAQ,kBACR0B,KAAQ,uBACRkb,UAAY,GAEhB,CACI5c,KAAQ,kBACR0B,KAAQ,UACRkb,UAAY,KAIDg3B,WAAoC,CACvDpC,WAAa,EACb10B,UAAa,mDAIrB,cASA,OARI+2B,+BAAA,SAAmBl4B,EAA4CC,GAC3D,IAAMta,EAAiC,GAKvC,OAJA8B,GAAmBuY,EAASm4B,qBAAsBl4B,EAASk4B,qBAAsB,uBAAwB,SAAUxyC,GACnH8B,GAAmBuY,EAASo4B,WAAYn4B,EAASm4B,WAAY,aAAc,SAAUzyC,GACrF8B,GAAmBuY,EAASq4B,QAASp4B,EAASo4B,QAAS,UAAW,SAAU1yC,GAC5E8B,GAAmBuY,EAASs4B,YAAar4B,EAASq4B,YAAa,cAAe,SAAU3yC,GACzD,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAY9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAIw3B,GACJ,IAAIV,GACJ,IAAIhB,GACJ,IAAIlC,IAgDhB,OA5CIiE,6BAAA,WACI,OAAOhwC,KAAKmY,eAGhB63B,4BAAA,SAAgB33B,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGL23B,aAAa,CAChC13B,aAAgB,cAChBC,gBAAmB,yBACnBC,UAAa,iDACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,GAEhB,CACI5c,KAAQ,kBACR0B,KAAQ,uBACRkb,UAAY,GAEhB,CACI5c,KAAQ,kBACR0B,KAAQ,UACRkb,UAAY,KAIDs3B,WAAoC,CACvD1C,WAAa,EACb10B,UAAa,kDAIrB,cAmCA,OAlCIq3B,+BAAA,SAAmBx4B,EAAyCC,GACxD,IAAMta,EAAiC,GA+BvC,OA7BAQ,GAAiB6Z,EAAS+1B,oBAAqB91B,EAAS81B,oBAAqB,sBAAuB,uBAAwBpwC,GAC5HQ,GAAiB6Z,EAASg2B,gBAAiB/1B,EAAS+1B,gBAAiB,kBAAmB,uBAAwBrwC,GAChHa,GAAgBwZ,EAASy4B,WAAYx4B,EAASw4B,WAAY,aAAc,sBAAuB9yC,GAC/F8B,GAAmBuY,EAASy0B,gBAAiBx0B,EAASw0B,gBAAiB,kBAAmB,SAAU9uC,GACpG0B,GAAgB2Y,EAAS04B,qBAAsBz4B,EAASy4B,qBAAsB,uBAAwB,uTAAwT/yC,GAC9Z0B,GAAgB2Y,EAAS24B,oBAAqB14B,EAAS04B,oBAAqB,sBAAuB,mIAAoIhzC,GACvO8B,GAAmBuY,EAAS44B,qBAAsB34B,EAAS24B,qBAAsB,uBAAwB,UAAWjzC,GACpH8B,GAAmBuY,EAASi1B,OAAQh1B,EAASg1B,OAAQ,SAAU,UAAWtvC,GAC1E0B,GAAgB2Y,EAAS64B,cAAe54B,EAAS44B,cAAe,gBAAiB,8BAA+BlzC,GAChHsC,GAAoB+X,EAAS84B,wBAAyB74B,EAAS64B,wBAAyB,0BAA2B,kCAAmCnzC,GACtJ0B,GAAgB2Y,EAAS+4B,cAAe94B,EAAS84B,cAAe,gBAAiB,aAAcpzC,GAC/FsC,GAAoB+X,EAASg5B,wBAAyB/4B,EAAS+4B,wBAAyB,0BAA2B,4DAA6DrzC,GAChLsC,GAAoB+X,EAASi5B,uBAAwBh5B,EAASg5B,uBAAwB,yBAA0B,4DAA6DtzC,GAC7K0B,GAAgB2Y,EAASk5B,eAAgBj5B,EAASi5B,eAAgB,iBAAkB,8BAA+BvzC,GACnHsC,GAAoB+X,EAASpR,yBAA0BqR,EAASrR,yBAA0B,2BAA4B,kCAAmCjJ,GACzJ0B,GAAgB2Y,EAASm5B,QAASl5B,EAASk5B,QAAS,UAAW,wCAAyCxzC,GACxGsC,GAAoB+X,EAASo5B,kBAAmBn5B,EAASm5B,kBAAmB,oBAAqB,+CAAgDzzC,GACjJsC,GAAoB+X,EAASq5B,mBAAoBp5B,EAASo5B,mBAAoB,qBAAsB,4DAA6D1zC,GACjK8B,GAAmBuY,EAAS43B,YAAa33B,EAAS23B,YAAa,cAAe,SAAUjyC,GAExF0B,GAAgB2Y,EAASs5B,oBAAqBr5B,EAASq5B,oBAAqB,sBAAuB,uDAAwD3zC,GAC3J8B,GAAmBuY,EAASu5B,gBAAiBt5B,EAASs5B,gBAAiB,kBAAmB,UAAW5zC,GACrG8B,GAAmBuY,EAASw5B,cAAev5B,EAASu5B,cAAe,gBAAiB,UAAW7zC,GAE/F8B,GAAmBuY,EAASy5B,QAASx5B,EAASw5B,QAAS,UAAW,SAAU9zC,GAC5E8B,GAAmBuY,EAAS05B,uBAAwBz5B,EAASy5B,uBAAwB,yBAA0B,UAAW/zC,GAC1HwC,GAAgB6X,EAAS25B,eAAgB15B,EAAS05B,eAAgB,iBAAkB,mDAAoDh0C,GACxIwC,GAAgB6X,EAAS45B,kCAAmC35B,EAAS25B,kCAAmC,oCAAqC,uEAAwEj0C,GACrNwC,GAAgB6X,EAAS65B,kBAAmB55B,EAAS45B,kBAAmB,oBAAqB,0SAA2Sl0C,GACzW,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAc9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAI83B,GACJ,IAAIhC,GACJ,IAAIlC,IAwFhB,OApFIwF,6BAAA,WACI,OAAOvxC,KAAKmY,eAGhBo5B,4BAAA,SAAgBl5B,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLk5B,aAAa,CAChCj5B,aAAgB,cAChBC,gBAAmB,sBACnBC,UAAa,iDACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,OACR0B,KAAQ,oFACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,GAEhB,CACI5c,KAAQ,kBACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,yBACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,SACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,eACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,sBACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,wBACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,SACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,kBACR0B,KAAQ,UACRkb,UAAY,KAID64B,WAAoC,CACvDjE,WAAa,EACb10B,UAAa,+CAIrB,cAYA,OAXI44B,+BAAA,SAAmB/5B,EAAmCC,GAClD,IAAMta,EAAiC,GAQvC,OAPA8B,GAAmBuY,EAASg6B,mBAAoB/5B,EAAS+5B,mBAAoB,qBAAsB,SAAUr0C,GAC7G8B,GAAmBuY,EAASi6B,WAAYh6B,EAASg6B,WAAY,aAAc,SAAUt0C,GACrF8B,GAAmBuY,EAASk6B,YAAaj6B,EAASi6B,YAAa,cAAe,SAAUv0C,GACxF8B,GAAmBuY,EAASm6B,YAAal6B,EAASk6B,YAAa,cAAe,SAAUx0C,GACxF8B,GAAmBuY,EAASo6B,UAAWn6B,EAASm6B,UAAW,YAAa,SAAUz0C,GAGnD,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAe9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAIq5B,GACJ,IAAIvB,GACJ,IAAIhC,GACJ,IAAIlC,IA0DhB,OAtDI+F,6BAAA,WACI,OAAO9xC,KAAKmY,eAGhB25B,4BAAA,SAAgBz5B,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLy5B,aAAa,CAChCx5B,aAAgB,cAChBC,gBAAmB,gBACnBC,UAAa,iDACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,OACR0B,KAAQ,mEACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,GAEhB,CACI5c,KAAQ,kBACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,eACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,sBACR0B,KAAQ,UACRkb,UAAY,KAIDo5B,WAAoC,CACvDxE,WAAa,EACb10B,UAAa,yCAIrB,cAQA,OAPIm5B,+BAAA,SAAmBt6B,EAAuCC,GACtD,IAAMta,EAAiC,GAIvC,OAHA8B,GAAmBuY,EAASy5B,QAASx5B,EAASw5B,QAAS,UAAW,SAAU9zC,GAC5E8B,GAAmBuY,EAAS01B,MAAOz1B,EAASy1B,MAAO,QAAS,SAAU/vC,GACtE8B,GAAmBuY,EAAS21B,MAAO11B,EAAS01B,MAAO,QAAS,SAAUhwC,GACvC,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAe9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAI45B,GACJ,IAAI9B,GACJ,IAAIhC,GACJ,IAAIlC,IAgDhB,OA5CIiG,6BAAA,WACI,OAAOhyC,KAAKmY,eAGhB65B,4BAAA,SAAgB35B,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGL25B,aAAa,CAChC15B,aAAgB,cAChBC,gBAAmB,oBACnBC,UAAa,iDACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,OACR0B,KAAQ,MACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,yCACRkb,UAAY,KAIDs5B,WAAoC,CACvD1E,WAAa,EACb10B,UAAa,6CAIrB,cAOA,OANIq5B,+BAAA,SAAmBx6B,EAAuCC,GACtD,IAAMta,EAAiC,GAGvC,OAFA8B,GAAmBuY,EAASy6B,MAAOx6B,EAASw6B,MAAO,QAAS,SAAU90C,GAEvC,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAa9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAI85B,GACJ,IAAIhC,GACJ,IAAIhC,GACJ,IAAIlC,IA2ChB,OAvCIoG,6BAAA,WACI,OAAOnyC,KAAKmY,eAGhBg6B,4BAAA,SAAgB95B,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGL85B,aAAa,CAChC75B,aAAgB,cAChBC,gBAAmB,oBACnBC,UAAa,iDACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,GAEhB,CACI5c,KAAQ,kBACR0B,KAAQ,UACRkb,UAAY,KAIDy5B,WAAoC,CACvD7E,WAAa,EACb10B,UAAa,6CAIrB,cAIA,OAHIw5B,+BAAA,SAAmB36B,EAA2CC,GAC1D,OAAO,yBAYX,aACI1X,KAAKmY,cAAgB,CACjB,IAAIi6B,GACJ,IAAInC,GACJ,IAAIhC,GACJ,IAAIlC,IAiChB,OA7BIsG,6BAAA,WACI,OAAOryC,KAAKmY,eAGhBk6B,4BAAA,SAAgBh6B,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLg6B,aAAa,CAChC/5B,aAAgB,cAChBC,gBAAmB,wBACnBC,UAAa,iDACbC,WAAc,CACV,CACI3c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,GAEhB,CACI5c,KAAQ,OACR0B,KAAQ,mEACRkb,UAAY,KAID25B,WAAoC,CACvD/E,WAAa,EACb10B,UAAa,iDAIrB,cAKA,OAJI05B,+BAAA,SAAmB76B,EAAkCC,GAEjD,OAAO,yBAaX,aACI1X,KAAKmY,cAAgB,CACjB,IAAIm6B,GACJ,IAAIrE,GACJ,IAAIlC,IA0DhB,OAtDIwG,6BAAA,WACI,OAAOvyC,KAAKmY,eAGhBo6B,4BAAA,SAAgBl6B,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLk6B,aAAa,CAChCj6B,aAAgB,cAChBC,gBAAmB,eACnBC,UAAa,iDACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,MACR0B,KAAQ,uCACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,GAEhB,CACI5c,KAAQ,kBACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,eACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,oCACRkb,UAAY,KAID65B,WAAoC,CACvDjF,WAAa,EACb10B,UAAa,wCAIrB,cAIA,OAHI45B,+BAAA,SAAmB/6B,EAAoCC,GACnD,OAAO,yBAYX,aACI1X,KAAKmY,cAAgB,CACjB,IAAIq6B,GACJ,IAAIvE,GACJ,IAAIlC,IAqDhB,OAjDI0G,6BAAA,WACI,OAAOzyC,KAAKmY,eAGhBs6B,4BAAA,SAAgBp6B,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLo6B,aAAa,CAChCn6B,aAAgB,cAChBC,gBAAmB,iBACnBC,UAAa,iDACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,MACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,GAEhB,CACI5c,KAAQ,kBACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,eACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,SACR0B,KAAQ,SACRkb,UAAY,KAID+5B,WAAoC,CACvDnF,WAAa,EACb10B,UAAa,0CAIrB,cA0BA,OAzBI85B,+BAAA,SAAmBj7B,EAA4CC,GAC3D,IAAMta,EAAiC,GAsBvC,OArBA8B,GAAmBuY,EAAS+kB,WAAY9kB,EAAS8kB,WAAY,aAAc,SAAUp/B,GACrF8B,GAAmBuY,EAASk7B,cAAej7B,EAASi7B,cAAe,gBAAiB,SAAUv1C,GAE9F8B,GAAmBuY,EAASm7B,YAAal7B,EAASk7B,YAAa,cAAe,SAAUx1C,GACxF8B,GAAmBuY,EAASo7B,WAAYn7B,EAASm7B,WAAY,aAAc,SAAUz1C,GACrF8B,GAAmBuY,EAASq7B,aAAcp7B,EAASo7B,aAAc,eAAgB,UAAW11C,GAC5FsC,GAAoB+X,EAASs7B,wBAAyBr7B,EAASq7B,wBAAyB,0BAA2B,8DAA+D31C,GAClLsC,GAAoB+X,EAASu7B,wBAAyBt7B,EAASs7B,wBAAyB,0BAA2B,8DAA+D51C,GAGlLsC,GAAoB+X,EAASw7B,sBAAuBv7B,EAASu7B,sBAAuB,wBAAyB,sDAAuD71C,GAEpKsC,GAAoB+X,EAASy7B,0BAA2Bx7B,EAASw7B,0BAA2B,4BAA6B,+CAAgD91C,GACzKsC,GAAoB+X,EAAS07B,sBAAuBz7B,EAASy7B,sBAAuB,wBAAyB,8DAA+D/1C,GAC5KsC,GAAoB+X,EAAS27B,sBAAuB17B,EAAS07B,sBAAuB,wBAAyB,8DAA+Dh2C,GAC5K8B,GAAmBuY,EAAS47B,YAAa37B,EAAS27B,YAAa,cAAe,UAAWj2C,GACzF8B,GAAmBuY,EAAS67B,kBAAmB57B,EAAS47B,kBAAmB,oBAAqB,UAAWl2C,GAC3G8B,GAAmBuY,EAAS87B,YAAa77B,EAAS67B,YAAa,cAAe,SAAUn2C,GACxF8B,GAAmBuY,EAAS+7B,8BAA+B97B,EAAS87B,8BAA+B,gCAAiC,UAAWp2C,GAC/I8B,GAAmBuY,EAASg8B,iBAAkB/7B,EAAS+7B,iBAAkB,mBAAoB,UAAWr2C,GACxGwC,GAAgB6X,EAASklB,WAAYjlB,EAASilB,WAAY,aAAc,wEAAyEv/B,GAClH,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAY9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAIu6B,GACJ,IAAIF,GACJ,IAAIvE,GACJ,IAAIlC,IAqDhB,OAjDI2H,6BAAA,WACI,OAAO1zC,KAAKmY,eAGhBu7B,4BAAA,SAAgBr7B,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLq7B,aAAa,CAChCp7B,aAAgB,cAChBC,gBAAmB,yBACnBC,UAAa,iDACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,SACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,GAEhB,CACI5c,KAAQ,kBACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,eACR0B,KAAQ,SACRkb,UAAY,KAIDg7B,WAAoC,CACvDpG,WAAa,EACb10B,UAAa,kDAYjB,aACI5Y,KAAKmY,cAAgB,CACjB,IAAIu6B,GACF,IAAIF,GACJ,IAAIvE,GACJ,IAAIlC,IAiDlB,OA7CI4H,6BAAA,WACI,OAAO3zC,KAAKmY,eAGhBw7B,4BAAA,SAAgBt7B,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLs7B,aAAa,CAChCr7B,aAAgB,gBAChBC,gBAAmB,yBACnBC,UAAa,kBACbyO,cAAiB,gBACjBxO,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,4BACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,SACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,qBACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,mBACR0B,KAAQ,UACRkb,UAAY,KAIDi7B,WAAoC,CACvDrG,WAAa,EACb10B,UAAa,sCAgBjB,aACI5Y,KAAKmY,cAAgB,CACjB,IAAIu6B,GACF,IAAIF,GACJ,IAAIvE,GACJ,IAAIlC,IA4ClB,OAxCI6H,6BAAA,WACI,OAAO5zC,KAAKmY,eAGhBy7B,4BAAA,SAAgBv7B,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLu7B,aAAa,CAChCt7B,aAAgB,gBAChBC,gBAAmB,yBACnBC,UAAa,kBACbyO,cAAiB,qBACjBxO,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,aACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,SACRkb,UAAY,KAIDk7B,WAAoC,CACvDtG,WAAa,EACb10B,UAAa,2CAIrB,cAMA,OALIi7B,+BAAA,SAAmBp8B,EAAkCC,GACjD,IAAMta,EAAiC,GAEvC,OADA8B,GAAmBuY,EAASs3B,OAAQr3B,EAASq3B,OAAQ,SAAU,SAAU3xC,GAC1C,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAY9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAI07B,GACJ,IAAI5F,GACJ,IAAIlC,IAyEhB,OArEI+H,6BAAA,WACI,OAAO9zC,KAAKmY,eAGhB27B,4BAAA,SAAgBz7B,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLy7B,aAAa,CAChCx7B,aAAgB,cAChBC,gBAAmB,eACnBC,UAAa,iDACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,kBACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,SACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,SACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,GAEhB,CACI5c,KAAQ,kBACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,eACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,cACR0B,KAAQ,SACRkb,UAAY,KAIDo7B,WAAoC,CACvDxG,WAAa,EACb10B,UAAa,wCAIrB,cAMA,OALIm7B,+BAAA,SAAmBt8B,EAAuCC,GACtD,IAAMta,EAAiC,GAEvC,OADA8B,GAAmBuY,EAASs3B,OAAQr3B,EAASq3B,OAAQ,SAAU,SAAU3xC,GAC1C,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAY9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAI47B,GACJ,IAAI9F,GACJ,IAAIlC,IAyEhB,OArEIiI,6BAAA,WACI,OAAOh0C,KAAKmY,eAGhB67B,4BAAA,SAAgB37B,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGL27B,aAAa,CAChC17B,aAAgB,cAChBC,gBAAmB,oBACnBC,UAAa,iDACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,kBACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,SACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,SACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,GAEhB,CACI5c,KAAQ,kBACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,eACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,cACR0B,KAAQ,SACRkb,UAAY,KAIDs7B,WAAoC,CACvD1G,WAAa,EACb10B,UAAa,6CAIrB,cAQA,OAPIq7B,+BAAA,SAAmBx8B,EAAyCC,GACxD,IAAMta,EAAiC,GAIvC,OADA8B,GAAmBuY,EAASm2B,IAAKl2B,EAASk2B,IAAK,MAAO,SAAUxwC,GACjC,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAiB9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAI87B,GACJ,IAAIlI,IAiChB,OA7BImI,6BAAA,WACI,OAAOl0C,KAAKmY,eAGhB+7B,4BAAA,SAAgB77B,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGL67B,aAAa,CAChC57B,aAAgB,cAChBC,gBAAmB,sBACnBC,UAAa,iDACbC,WAAc,CACV,CACI3c,KAAQ,MACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,KAIDw7B,WAAoC,CACvD5G,WAAa,EACb10B,UAAa,+CAIrB,cAUA,OATIu7B,+BAAA,SAAmB18B,EAAgDC,GAC/D,IAAMta,EAAiC,GAMvC,OALA8B,GAAmBuY,EAASy0B,gBAAiBx0B,EAASw0B,gBAAiB,kBAAmB,SAAU9uC,GAIpG8B,GAAmBuY,EAASm2B,IAAKl2B,EAASk2B,IAAK,MAAO,SAAUxwC,GACjC,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAY9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAIg8B,GACJ,IAAIpI,IA0DhB,OAtDIqI,6BAAA,WACI,OAAOp0C,KAAKmY,eAGhBi8B,4BAAA,SAAgB/7B,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGL+7B,aAAa,CAChC97B,aAAgB,cAChBC,gBAAmB,6BACnBC,UAAa,iDACbC,WAAc,CACV,CACI3c,KAAQ,MACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,GAEhB,CACI5c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,aACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,SACR0B,KAAQ,aACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,8CACRkb,UAAY,KAID07B,WAAoC,CACvD9G,WAAa,EACb10B,UAAa,sDAIrB,cAaA,OAZIy7B,+BAAA,SAAmB58B,EAAoCC,GACnD,IAAMta,EAAiC,GASvC,OARAQ,GAAiB6Z,EAAS+1B,oBAAqB91B,EAAS81B,oBAAqB,sBAAuB,uBAAwBpwC,GAC5HQ,GAAiB6Z,EAASg2B,gBAAiB/1B,EAAS+1B,gBAAiB,kBAAmB,uBAAwBrwC,GAChH8B,GAAmBuY,EAASy0B,gBAAiBx0B,EAASw0B,gBAAiB,kBAAmB,SAAU9uC,GACpG8B,GAAmBuY,EAASy2B,WAAYx2B,EAASw2B,WAAY,aAAc,UAAW9wC,GAEtF8B,GAAmBuY,EAASk2B,UAAWj2B,EAASi2B,UAAW,YAAa,SAAUvwC,GAClF8B,GAAmBuY,EAASm2B,IAAKl2B,EAASk2B,IAAK,MAAO,SAAUxwC,GAChEwC,GAAgB6X,EAASo2B,2BAA4Bn2B,EAASm2B,2BAA4B,6BAA8B,wCAAyCzwC,GAClI,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAe9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAIk8B,GACJ,IAAItI,IAoEhB,OAhEIuI,6BAAA,WACI,OAAOt0C,KAAKmY,eAGhBm8B,4BAAA,SAAgBj8B,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLi8B,aAAa,CAChCh8B,aAAgB,cAChBC,gBAAmB,iBACnBC,UAAa,iDACbC,WAAc,CACV,CACI3c,KAAQ,MACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,GAEhB,CACI5c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,oBACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,aACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,SACR0B,KAAQ,aACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,8CACRkb,UAAY,KAID47B,WAAoC,CACvDhH,WAAa,EACb10B,UAAa,0CAIrB,cAKA,OAJI27B,+BAAA,SAAmB98B,EAAwCC,GAEvD,OAAO,yBAkBX,aACI1X,KAAKmY,cAAgB,CACjB,IAAIo8B,GACJ,IAAIxI,IAsChB,OAlCIyI,6BAAA,WACI,OAAOx0C,KAAKmY,eAGhBq8B,4BAAA,SAAgBn8B,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLm8B,aAAa,CAChCl8B,aAAgB,cAChBC,gBAAmB,qBACnBC,UAAa,iDACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,uCACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,0CACRkb,UAAY,KAID87B,WAAoC,CACvDlH,WAAa,EACb10B,UAAa,8CAIrB,cAOA,OANI67B,+BAAA,SAAmBh9B,EAAkCC,GACjD,IAAMta,EAAiC,GAGvC,OAFAsC,GAAoB+X,EAASi9B,+BAAgCh9B,EAASg9B,+BAAgC,iCAAkC,gDAAiDt3C,GACzLwC,GAAgB6X,EAASklB,WAAYjlB,EAASilB,WAAY,aAAc,gEAAiEv/B,GAC1G,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAY9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAIs8B,IA4BhB,OAxBIE,6BAAA,WACI,OAAO30C,KAAKmY,eAGhBw8B,4BAAA,SAAgBt8B,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLs8B,aAAa,CAChCr8B,aAAgB,cAChBC,gBAAmB,eACnBC,UAAa,iCACbC,WAAc,CACV,CACI3c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,KAIDi8B,WAAoC,CACvDvM,gBAAkB,EAClBxvB,UAAa,wCAIrB,cAkCA,OAjCIg8B,+BAAA,SAAmBn9B,EAAqCC,GACpD,IAAMta,EAAiC,GA8BvC,OA7BA8B,GAAmBuY,EAAShZ,KAAMiZ,EAASjZ,KAAM,OAAQ,SAAUrB,GACnE8B,GAAmBuY,EAASo9B,cAAen9B,EAASm9B,cAAe,gBAAiB,SAAUz3C,GAC9F8B,GAAmBuY,EAASi6B,WAAYh6B,EAASg6B,WAAY,aAAc,SAAUt0C,GACrF8B,GAAmBuY,EAASq9B,UAAWp9B,EAASo9B,UAAW,YAAa,SAAU13C,GAClF8B,GAAmBuY,EAASs9B,iCAAkCr9B,EAASq9B,iCAAkC,mCAAoC,SAAU33C,GAEvJ8B,GAAmBuY,EAASu9B,SAAUt9B,EAASs9B,SAAU,WAAY,SAAU53C,GAC/E8B,GAAmBuY,EAASw9B,WAAYv9B,EAASu9B,WAAY,aAAc,SAAU73C,GACrF8B,GAAmBuY,EAAS/B,OAAQgC,EAAShC,OAAQ,SAAU,SAAUtY,GACzE8B,GAAmBuY,EAASy9B,iBAAkBx9B,EAASw9B,iBAAkB,mBAAoB,SAAU93C,GACvG8B,GAAmBuY,EAAS09B,mBAAoBz9B,EAASy9B,mBAAoB,qBAAsB,UAAW/3C,GAC9G8B,GAAmBuY,EAAS29B,mBAAoB19B,EAAS09B,mBAAoB,qBAAsB,SAAUh4C,GAC7G8B,GAAmBuY,EAAS49B,WAAY39B,EAAS29B,WAAY,aAAc,SAAUj4C,GACrFsC,GAAoB+X,EAAS69B,qCAAsC59B,EAAS49B,qCAAsC,uCAAwC,6CAA8Cl4C,GACxMsC,GAAoB+X,EAAS89B,iCAAkC79B,EAAS69B,iCAAkC,mCAAoC,+CAAgDn4C,GAC9LsC,GAAoB+X,EAAS+9B,sCAAuC99B,EAAS89B,sCAAuC,wCAAyC,6CAA8Cp4C,GAC3MsC,GAAoB+X,EAASg+B,kCAAmC/9B,EAAS+9B,kCAAmC,oCAAqC,+CAAgDr4C,GACjM8B,GAAmBuY,EAASi+B,mBAAoBh+B,EAASg+B,mBAAoB,qBAAsB,UAAWt4C,GAC9G8B,GAAmBuY,EAASk+B,iCAAkCj+B,EAASi+B,iCAAkC,mCAAoC,UAAWv4C,GACxJ8B,GAAmBuY,EAASm+B,4BAA6Bl+B,EAASk+B,4BAA6B,8BAA+B,UAAWx4C,GACzI8B,GAAmBuY,EAASo+B,6BAA8Bn+B,EAASm+B,6BAA8B,+BAAgC,UAAWz4C,GAC5I8B,GAAmBuY,EAASq+B,0BAA2Bp+B,EAASo+B,0BAA2B,4BAA6B,UAAW14C,GACnI8B,GAAmBuY,EAASs+B,wBAAyBr+B,EAASq+B,wBAAyB,0BAA2B,UAAW34C,GAC7H8B,GAAmBuY,EAASu+B,cAAet+B,EAASs+B,cAAe,gBAAiB,UAAW54C,GAC/F8B,GAAmBuY,EAASw+B,6BAA8Bv+B,EAASu+B,6BAA8B,+BAAgC,UAAW74C,GAC5I8B,GAAmBuY,EAASy+B,mBAAoBx+B,EAASw+B,mBAAoB,qBAAsB,UAAW94C,GAC9GwC,GAAgB6X,EAAS0+B,gBAAiBz+B,EAASy+B,gBAAiB,kBAAmB,mGAAoG/4C,GAC3LwC,GAAgB6X,EAAS2+B,YAAa1+B,EAAS0+B,YAAa,cAAe,sDAAuDh5C,GAClIwC,GAAgB6X,EAAS4+B,sBAAuB3+B,EAAS2+B,sBAAuB,wBAAyB,0DAA2Dj5C,GACrI,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAc9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAIy8B,IAsChB,OAlCI0B,6BAAA,WACI,OAAOt2C,KAAKmY,eAGhBm+B,4BAAA,SAAgBj+B,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLi+B,aAAa,CAChCh+B,aAAgB,cAChBC,gBAAmB,kBACnBC,UAAa,iDACbC,WAAc,CACV,CACI3c,KAAQ,UACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,4BACRkb,UAAY,GAEhB,CACI5c,KAAQ,mBACR0B,KAAQ,UACRkb,UAAY,KAID49B,WAAoC,CACvDC,eAAiB,EACjB39B,UAAa,2CAIrB,cAOA,OANI49B,+BAAA,SAAmB/+B,EAAuCC,GACtD,IAAMta,EAAiC,GAGvC,OAFAsC,GAAoB+X,EAASg/B,kBAAmB/+B,EAAS++B,kBAAmB,oBAAqB,kEAAmEr5C,GACpKwC,GAAgB6X,EAASi/B,aAAch/B,EAASg/B,aAAc,eAAgB,wCAAyCt5C,GACxF,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAc9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAIq+B,IAiChB,OA7BIG,6BAAA,WACI,OAAO32C,KAAKmY,eAGhBw+B,4BAAA,SAAgBt+B,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLs+B,aAAa,CAChCr+B,aAAgB,cAChBC,gBAAmB,oBACnBC,UAAa,4CACbC,WAAc,CACV,CACI3c,KAAQ,UACR0B,KAAQ,kDACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,KAIDi+B,WAAoC,CACvDC,eAAiB,EACjBh+B,UAAa,6CAIrB,cAgCA,OA/BIi+B,+BAAA,SAAmBp/B,EAAqCC,GACpD,IAAMta,EAAiC,GA4BvC,OA3BA0B,GAAgB2Y,EAASq/B,UAAWp/B,EAASo/B,UAAW,YAAa,aAAc15C,GACnF0B,GAAgB2Y,EAASs/B,WAAYr/B,EAASq/B,WAAY,aAAc,aAAc35C,GACtF8B,GAAmBuY,EAASu/B,SAAUt/B,EAASs/B,SAAU,WAAY,SAAU55C,GAC/E8B,GAAmBuY,EAASw/B,KAAMv/B,EAASu/B,KAAM,OAAQ,SAAU75C,GAEnE0B,GAAgB2Y,EAAS4D,UAAW3D,EAAS2D,UAAW,YAAa,8BAA+Bje,GACpG0B,GAAgB2Y,EAASy/B,eAAgBx/B,EAASw/B,eAAgB,iBAAkB,+FAAgG95C,GAGpL8B,GAAmBuY,EAAS0/B,mBAAoBz/B,EAASy/B,mBAAoB,qBAAsB,SAAU/5C,GAC7G8B,GAAmBuY,EAAS2/B,SAAU1/B,EAAS0/B,SAAU,WAAY,SAAUh6C,GAC/E8B,GAAmBuY,EAAS4/B,YAAa3/B,EAAS2/B,YAAa,cAAe,SAAUj6C,GACxF8B,GAAmBuY,EAAS6/B,SAAU5/B,EAAS4/B,SAAU,WAAY,SAAUl6C,GAC/E8B,GAAmBuY,EAAS8/B,KAAM7/B,EAAS6/B,KAAM,OAAQ,UAAWn6C,GACpE8B,GAAmBuY,EAAS+/B,UAAW9/B,EAAS8/B,UAAW,YAAa,SAAUp6C,GAClF8B,GAAmBuY,EAASja,KAAMka,EAASla,KAAM,OAAQ,SAAUJ,GACnE8B,GAAmBuY,EAASO,SAAUN,EAASM,SAAU,WAAY,SAAU5a,GAC/E8B,GAAmBuY,EAASggC,mBAAoB//B,EAAS+/B,mBAAoB,qBAAsB,SAAUr6C,GAC7GwC,GAAgB6X,EAASigC,UAAWhgC,EAASggC,UAAW,YAAa,gLAAiLt6C,GACtPwC,GAAgB6X,EAASkgC,QAASjgC,EAASigC,QAAS,UAAW,gKAAiKv6C,GAChOwC,GAAgB6X,EAASmgC,SAAUlgC,EAASkgC,SAAU,WAAY,oHAAqHx6C,GACvLwC,GAAgB6X,EAASogC,mBAAoBngC,EAASmgC,mBAAoB,qBAAsB,4CAA6Cz6C,GAC7IwC,GAAgB6X,EAASqgC,iBAAkBpgC,EAASogC,iBAAkB,mBAAoB,4CAA6C16C,GACvIwC,GAAgB6X,EAASsgC,iBAAkBrgC,EAASqgC,iBAAkB,mBAAoB,+CAAgD36C,GAC1IwC,GAAgB6X,EAASugC,kBAAmBtgC,EAASsgC,kBAAmB,oBAAqB,4CAA6C56C,GAC1IwC,GAAgB6X,EAASwgC,QAASvgC,EAASugC,QAAS,UAAW,0BAA2B76C,GAC1FwC,GAAgB6X,EAASygC,SAAUxgC,EAASwgC,SAAU,WAAY,+CAAgD96C,GACnF,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAY9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAI0+B,IA2ChB,OAvCIsB,6BAAA,WACI,OAAOn4C,KAAKmY,eAGhBggC,4BAAA,SAAgB9/B,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGL8/B,aAAa,CAChC7/B,aAAgB,cAChBC,gBAAmB,kBACnBC,UAAa,0CACbC,WAAc,CACV,CACI3c,KAAQ,SACR0B,KAAQ,qCACRkb,UAAY,GAEhB,CACI5c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,yCACRkb,UAAY,GAEhB,CACI5c,KAAQ,SACR0B,KAAQ,qBACRkb,UAAY,KAIDy/B,WAAoC,CACvD5B,eAAiB,EACjB39B,UAAa,2CAIrB,cA2CA,OA1CIw/B,+BAAA,SAAmB3gC,EAAwCC,GACvD,IAAMta,EAAiC,GAuCvC,OApCA8B,GAAmBuY,EAAS4gC,YAAa3gC,EAAS2gC,YAAa,cAAe,UAAWj7C,GACzF8B,GAAmBuY,EAAS6gC,oBAAqB5gC,EAAS4gC,oBAAqB,sBAAuB,UAAWl7C,GAEjH8B,GAAmBuY,EAAS8gC,gCAAiC7gC,EAAS6gC,gCAAiC,kCAAmC,UAAWn7C,GACrJ8B,GAAmBuY,EAAS+gC,kBAAmB9gC,EAAS8gC,kBAAmB,oBAAqB,UAAWp7C,GAE3G0B,GAAgB2Y,EAASghC,uBAAwB/gC,EAAS+gC,uBAAwB,yBAA0B,+CAAgDr7C,GAE5JsC,GAAoB+X,EAASihC,sBAAuBhhC,EAASghC,sBAAuB,wBAAyB,gDAAiDt7C,GAC9JsC,GAAoB+X,EAASkhC,4BAA6BjhC,EAASihC,4BAA6B,8BAA+B,yEAA0Ev7C,GACzMsC,GAAoB+X,EAASmhC,uBAAwBlhC,EAASkhC,uBAAwB,yBAA0B,gDAAiDx7C,GACjKsC,GAAoB+X,EAAS6K,iCAAkC5K,EAAS4K,iCAAkC,mCAAoC,wDAAyDllB,GACvMsC,GAAoB+X,EAASohC,uBAAwBnhC,EAASmhC,uBAAwB,yBAA0B,2DAA4Dz7C,GAC5KsC,GAAoB+X,EAASqhC,sBAAuBphC,EAASohC,sBAAuB,wBAAyB,2DAA4D17C,GACzKsC,GAAoB+X,EAASshC,6BAA8BrhC,EAASqhC,6BAA8B,+BAAgC,0GAA2G37C,GAC7OsC,GAAoB+X,EAASuhC,gBAAiBthC,EAASshC,gBAAiB,kBAAmB,oDAAqD57C,GAChJsC,GAAoB+X,EAASwhC,kBAAmBvhC,EAASuhC,kBAAmB,oBAAqB,qDAAsD77C,GACvJsC,GAAoB+X,EAASyhC,yBAA0BxhC,EAASwhC,yBAA0B,2BAA4B,qDAAsD97C,GAG5KQ,GAAiB6Z,EAAS/R,SAAUgS,EAAShS,SAAU,WAAY,uBAAwBtI,GAC3F0B,GAAgB2Y,EAAS0hC,sBAAuBzhC,EAASyhC,sBAAuB,wBAAyB,+CAAgD/7C,GACzJ8B,GAAmBuY,EAAS2hC,+BAAgC1hC,EAAS0hC,+BAAgC,iCAAkC,UAAWh8C,GAClJ8B,GAAmBuY,EAAS4hC,qBAAsB3hC,EAAS2hC,qBAAsB,uBAAwB,UAAWj8C,GAGpH8B,GAAmBuY,EAAS6hC,2BAA4B5hC,EAAS4hC,2BAA4B,6BAA8B,UAAWl8C,GACtI8B,GAAmBuY,EAAS8hC,uBAAwB7hC,EAAS6hC,uBAAwB,yBAA0B,UAAWn8C,GAC1H8B,GAAmBuY,EAAS+hC,uBAAwB9hC,EAAS8hC,uBAAwB,yBAA0B,UAAWp8C,GAG1H8B,GAAmBuY,EAASgiC,WAAY/hC,EAAS+hC,WAAY,aAAc,UAAWr8C,GACtFwC,GAAgB6X,EAASiiC,aAAchiC,EAASgiC,aAAc,eAAgB,0CAA2Ct8C,GACzHwC,GAAgB6X,EAASkiC,aAAcjiC,EAASiiC,aAAc,eAAgB,2EAA4Ev8C,GAC1JwC,GAAgB6X,EAASmiC,cAAeliC,EAASkiC,cAAe,gBAAiB,2EAA4Ex8C,GAC7JwC,GAAgB6X,EAASoiC,sBAAuBniC,EAASmiC,sBAAuB,wBAAyB,8BAA+Bz8C,GACzG,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAa9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAIigC,IAgChB,OA5BI0B,6BAAA,WACI,OAAO95C,KAAKmY,eAGhB2hC,4BAAA,SAAgBzhC,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLyhC,aAAa,CAChCxhC,aAAgB,cAChBC,gBAAmB,qBACnBC,UAAa,gDACbC,WAAc,CACV,CACI3c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,GAEhB,CACI5c,KAAQ,eACR0B,KAAQ,yCACRkb,UAAY,KAIDohC,WAAoC,CACvDlhC,UAAa,8CAIrB,cA4BA,OA3BImhC,+BAAA,SAAmBtiC,EAAoCC,GACnD,IAAMta,EAAiC,GAwBvC,OAtBA8B,GAAmBuY,EAASuiC,oBAAqBtiC,EAASsiC,oBAAqB,sBAAuB,SAAU58C,GAChH8B,GAAmBuY,EAASwiC,eAAgBviC,EAASuiC,eAAgB,iBAAkB,UAAW78C,GAClG8B,GAAmBuY,EAASyiC,WAAYxiC,EAASwiC,WAAY,aAAc,SAAU98C,GACrF8B,GAAmBuY,EAAS7P,gBAAiB8P,EAAS9P,gBAAiB,kBAAmB,UAAWxK,GACrGmC,GAAsBkY,EAASxL,UAAWyL,EAASzL,UAAW,YAAa,WAAY7O,GACvF8B,GAAmBuY,EAAS0iC,aAAcziC,EAASyiC,aAAc,eAAgB,UAAW/8C,GAC5F8B,GAAmBuY,EAAS2iC,aAAc1iC,EAAS0iC,aAAc,eAAgB,UAAWh9C,GAC5F8B,GAAmBuY,EAAS4iC,aAAc3iC,EAAS2iC,aAAc,eAAgB,UAAWj9C,GAC5F8B,GAAmBuY,EAAS6iC,aAAc5iC,EAAS4iC,aAAc,eAAgB,UAAWl9C,GAI5F8B,GAAmBuY,EAAS/W,QAASgX,EAAShX,QAAS,UAAW,SAAUtD,GAC5E8B,GAAmBuY,EAAS7W,QAAS8W,EAAS9W,QAAS,UAAW,SAAUxD,GAE5E8B,GAAmBuY,EAAS3b,KAAM4b,EAAS5b,KAAM,OAAQ,SAAUsB,GACnE8B,GAAmBuY,EAAS8iC,yBAA0B7iC,EAAS6iC,yBAA0B,2BAA4B,UAAWn9C,GAChI8B,GAAmBuY,EAASlR,kBAAmBmR,EAASnR,kBAAmB,oBAAqB,UAAWnJ,GAE3G8B,GAAmBuY,EAASnO,cAAeoO,EAASpO,cAAe,gBAAiB,SAAUlM,GAC9F8B,GAAmBuY,EAASjO,cAAekO,EAASlO,cAAe,gBAAiB,SAAUpM,GAC9F8B,GAAmBuY,EAASlL,wBAAyBmL,EAASnL,wBAAyB,0BAA2B,UAAWnP,GAC9F,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAU9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAI4hC,IA6GhB,OAzGIS,6BAAA,WACI,OAAOx6C,KAAKmY,eAGhBqiC,4BAAA,SAAgBniC,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLmiC,aAAa,CAChCliC,aAAgB,cAChBC,gBAAmB,iBACnBC,UAAa,8BACbC,WAAc,CACV,CACI3c,KAAQ,OACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,QACR0B,KAAQ,qBACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,CACJ,CACI1B,KAAQ,aACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,0BACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,UACR0B,KAAQ,SACRkb,UAAY,GAEhB,CACI5c,KAAQ,SACR0B,KAAQ,0BACRkb,UAAY,GAEhB,CACI5c,KAAQ,YACR0B,KAAQ,0BACRkb,UAAY,GAEhB,CACI5c,KAAQ,aACR0B,KAAQ,0BACRkb,UAAY,GAEhB,CACI5c,KAAQ,aACR0B,KAAQ,UACRkb,UAAY,GAEhB,CACI5c,KAAQ,SACR0B,KAAQ,sBACRkb,UAAY,GAEhB,CACI5c,KAAQ,YACR0B,KAAQ,8BACRkb,UAAY,GAEhB,CACI5c,KAAQ,MACR0B,KAAQ,mCACRkb,UAAY,GAEhB,CACI5c,KAAQ,cACR0B,KAAQ,8BACRkb,UAAY,GAEhB,CACI5c,KAAQ,WACR0B,KAAQ,8BACRkb,UAAY,GAEhB,CACI5c,KAAQ,qBACR0B,KAAQ,MACRkb,UAAY,IAGpBA,UAAY,KAID8hC,WAAoC,CACvDtzB,kBAAoB,EACpBtO,UAAa,0CAIrB,cASA,OARI6hC,+BAAA,SAAmBhjC,EAA0CC,GACzD,IAAMta,EAAiC,GAKvC,OAJA8B,GAAmBuY,EAASijC,kBAAmBhjC,EAASgjC,kBAAmB,oBAAqB,SAAUt9C,GAC1G8B,GAAmBuY,EAASkjC,uBAAwBjjC,EAASijC,uBAAwB,yBAA0B,SAAUv9C,GACzH8B,GAAmBuY,EAASmjC,qBAAsBljC,EAASkjC,qBAAsB,uBAAwB,SAAUx9C,GACnH8B,GAAmBuY,EAASojC,mBAAoBnjC,EAASmjC,mBAAoB,qBAAsB,UAAWz9C,GAC/E,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAY9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAIsiC,IAsBhB,OAlBIK,6BAAA,WACI,OAAO96C,KAAKmY,eAGhB2iC,4BAAA,SAAgBziC,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLyiC,aAAa,CAChCxiC,aAAgB,cAChBC,gBAAmB,uBACnBC,UAAa,yDACbC,WAAc,IAEKqiC,WAAoC,CACvDC,YAAc,EACdniC,UAAa,gDAIrB,cASA,OARIoiC,+BAAA,SAAmBvjC,EAAsCC,GACrD,IAAMta,EAAiC,GAKvC,OAJA8B,GAAmBuY,EAASwjC,oBAAqBvjC,EAASujC,oBAAqB,sBAAuB,UAAW79C,GACjH8B,GAAmBuY,EAASyjC,2BAA4BxjC,EAASwjC,2BAA4B,6BAA8B,SAAU99C,GACrI8B,GAAmBuY,EAAS0jC,mBAAoBzjC,EAASyjC,mBAAoB,qBAAsB,SAAU/9C,GAC7G8B,GAAmBuY,EAAS2jC,2BAA4B1jC,EAAS0jC,2BAA4B,6BAA8B,SAAUh+C,GACtG,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAY9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAI6iC,IAsBhB,OAlBIK,6BAAA,WACI,OAAOr7C,KAAKmY,eAGhBkjC,4BAAA,SAAgBhjC,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLgjC,aAAa,CAChC/iC,aAAgB,cAChBC,gBAAmB,mBACnBC,UAAa,qDACbC,WAAc,IAEK4iC,WAAoC,CACvDN,YAAc,EACdniC,UAAa,4CAIrB,cAcA,OAbI0iC,+BAAA,SAAmB7jC,EAAqCC,GACpD,IAAMta,EAAiC,GAUvC,OATA8B,GAAmBuY,EAAS8jC,sCAAuC7jC,EAAS6jC,sCAAuC,wCAAyC,UAAWn+C,GACvK8B,GAAmBuY,EAAS+jC,iBAAkB9jC,EAAS8jC,iBAAkB,mBAAoB,SAAUp+C,GACvG8B,GAAmBuY,EAASgkC,oBAAqB/jC,EAAS+jC,oBAAqB,sBAAuB,SAAUr+C,GAChH8B,GAAmBuY,EAASikC,wBAAyBhkC,EAASgkC,wBAAyB,0BAA2B,SAAUt+C,GAC5H8B,GAAmBuY,EAASkkC,YAAajkC,EAASikC,YAAa,cAAe,SAAUv+C,GACxF8B,GAAmBuY,EAAS8G,KAAM7G,EAAS6G,KAAM,OAAQ,SAAUnhB,GACnE8B,GAAmBuY,EAASmkC,cAAelkC,EAASkkC,cAAe,gBAAiB,SAAUx+C,GAC9F8B,GAAmBuY,EAASokC,YAAankC,EAASmkC,YAAa,cAAe,SAAUz+C,GACxF8B,GAAmBuY,EAASojC,mBAAoBnjC,EAASmjC,mBAAoB,qBAAsB,UAAWz9C,GAC/E,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAY9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAImjC,IAsBhB,OAlBIQ,6BAAA,WACI,OAAO97C,KAAKmY,eAGhB2jC,4BAAA,SAAgBzjC,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLyjC,aAAa,CAChCxjC,aAAgB,cAChBC,gBAAmB,kBACnBC,UAAa,oDACbC,WAAc,IAEKqjC,WAAoC,CACvDf,YAAc,EACdniC,UAAa,2CAIrB,cASA,OARImjC,+BAAA,SAAmBtkC,EAAyCC,GACxD,IAAMta,EAAiC,GAKvC,OAJA8B,GAAmBuY,EAASukC,6BAA8BtkC,EAASskC,6BAA8B,+BAAgC,SAAU5+C,GAC3I8B,GAAmBuY,EAASwkC,qBAAsBvkC,EAASukC,qBAAsB,uBAAwB,SAAU7+C,GACnH8B,GAAmBuY,EAAS3b,KAAM4b,EAAS5b,KAAM,OAAQ,SAAUsB,GAEpC,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAY9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAI4jC,IA4BhB,OAxBIG,6BAAA,WACI,OAAOl8C,KAAKmY,eAGhB+jC,4BAAA,SAAgB7jC,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGL6jC,aAAa,CAChC5jC,aAAgB,cAChBC,gBAAmB,sBACnBC,UAAa,uDACbC,WAAc,CACV,CACI3c,KAAQ,KACR0B,KAAQ,6BACRkb,UAAY,KAIDwjC,WAAoC,CACvDnB,YAAc,EACdniC,UAAa,+CAIrB,cAOA,OANIujC,+BAAA,SAAmB1kC,EAAuCC,GACtD,IAAMta,EAAiC,GAGvC,OAFA8B,GAAmBuY,EAAS2kC,MAAO1kC,EAAS0kC,MAAO,QAAS,SAAUh/C,GACtE8B,GAAmBuY,EAAS4kC,WAAY3kC,EAAS2kC,WAAY,aAAc,SAAUj/C,GACtD,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAY9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAIgkC,IAsBhB,OAlBIG,6BAAA,WACI,OAAOt8C,KAAKmY,eAGhBmkC,4BAAA,SAAgBjkC,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLikC,aAAa,CAChChkC,aAAgB,cAChBC,gBAAmB,oBACnBC,UAAa,qDACbC,WAAc,IAEK6jC,WAAoC,CACvDvB,YAAc,EACdniC,UAAa,6CAIrB,cAIA,OAHI2jC,+BAAA,SAAmB9kC,EAA+CC,GAC9D,OAAO,yBAYX,aACI1X,KAAKmY,cAAgB,CACjB,IAAIokC,IAsBhB,OAlBIC,6BAAA,WACI,OAAOx8C,KAAKmY,eAGhBqkC,4BAAA,SAAgBnkC,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLmkC,aAAa,CAChClkC,aAAgB,cAChBC,gBAAmB,4BACnBC,UAAa,6DACbC,WAAc,IAEK+jC,WAAoC,CACvDzB,YAAc,EACdniC,UAAa,qDAIrB,cAsBA,OArBI6jC,+BAAA,SAAmBhlC,EAAyCC,GACxD,IAAMta,EAAiC,GAkBvC,OAhBA8B,GAAmBuY,EAASilC,yBAA0BhlC,EAASglC,yBAA0B,2BAA4B,SAAUt/C,GAC/H8B,GAAmBuY,EAASklC,qBAAsBjlC,EAASilC,qBAAsB,uBAAwB,UAAWv/C,GACpH8B,GAAmBuY,EAASmlC,eAAgBllC,EAASklC,eAAgB,iBAAkB,SAAUx/C,GACjG8B,GAAmBuY,EAASolC,SAAUnlC,EAASmlC,SAAU,WAAY,UAAWz/C,GAChF8B,GAAmBuY,EAASqlC,QAASplC,EAASolC,QAAS,UAAW,UAAW1/C,GAC7EQ,GAAiB6Z,EAASslC,iBAAkBrlC,EAASqlC,iBAAkB,mBAAoB,uBAAwB3/C,GACnH8B,GAAmBuY,EAASulC,aAActlC,EAASslC,aAAc,eAAgB,SAAU5/C,GAC3F8B,GAAmBuY,EAASwlC,aAAcvlC,EAASulC,aAAc,eAAgB,UAAW7/C,GAC5FsC,GAAoB+X,EAASylC,oBAAqBxlC,EAASwlC,oBAAqB,sBAAuB,wFAAyF9/C,GAChMsC,GAAoB+X,EAAS0lC,iBAAkBzlC,EAASylC,iBAAkB,mBAAoB,kLAAmL//C,GACjRsC,GAAoB+X,EAAS2lC,sBAAuB1lC,EAAS0lC,sBAAuB,wBAAyB,wFAAyFhgD,GAEtM8B,GAAmBuY,EAAS4lC,mCAAoC3lC,EAAS2lC,mCAAoC,qCAAsC,UAAWjgD,GAC9J8B,GAAmBuY,EAAS6lC,gBAAiB5lC,EAAS4lC,gBAAiB,kBAAmB,UAAWlgD,GACrG8B,GAAmBuY,EAAS8lC,gCAAiC7lC,EAAS6lC,gCAAiC,kCAAmC,UAAWngD,GACrJ0B,GAAgB2Y,EAAS+lC,aAAc9lC,EAAS8lC,aAAc,eAAgB,oDAAqDpgD,GACpG,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAY9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAIskC,IAuChB,OAnCIgB,6BAAA,WACI,OAAOz9C,KAAKmY,eAGhBslC,4BAAA,SAAgBplC,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLolC,aAAa,CAChCnlC,aAAgB,cAChBC,gBAAmB,sBACnBC,UAAa,uDACbC,WAAc,CACV,CACI3c,KAAQ,UACR0B,KAAQ,CACJ,CACI1B,KAAQ,WACR0B,KAAQ,uBACRkb,UAAY,GAEhB,CACI5c,KAAQ,kBACR0B,KAAQ,uBACRkb,UAAY,IAGpBA,UAAY,KAID+kC,WAAoC,CACvD1C,YAAc,EACdniC,UAAa,+CAIrB,cAaA,OAZI8kC,+BAAA,SAAmBjmC,EAAwCC,GACvD,IAAMta,EAAiC,GASvC,OARA8B,GAAmBuY,EAASilC,yBAA0BhlC,EAASglC,yBAA0B,2BAA4B,SAAUt/C,GAC/H8B,GAAmBuY,EAASklC,qBAAsBjlC,EAASilC,qBAAsB,uBAAwB,UAAWv/C,GACpH8B,GAAmBuY,EAASmlC,eAAgBllC,EAASklC,eAAgB,iBAAkB,SAAUx/C,GACjG8B,GAAmBuY,EAASolC,SAAUnlC,EAASmlC,SAAU,WAAY,UAAWz/C,GAChFsC,GAAoB+X,EAASylC,oBAAqBxlC,EAASwlC,oBAAqB,sBAAuB,8BAA+B9/C,GACtIsC,GAAoB+X,EAAS2lC,sBAAuB1lC,EAAS0lC,sBAAuB,wBAAyB,8BAA+BhgD,GAC5I8B,GAAmBuY,EAASkmC,oBAAqBjmC,EAASimC,oBAAqB,sBAAuB,UAAWvgD,GAElF,IAAxBA,EAAaqC,OAAe,KAAOrC,sBAY9C,aACI4C,KAAKmY,cAAgB,CACjB,IAAIulC,IAsBhB,OAlBIE,6BAAA,WACI,OAAO59C,KAAKmY,eAGhBylC,4BAAA,SAAgBvlC,GACZrY,KAAKmY,cAAcvc,KAAKyc,IAGLulC,aAAa,CAChCtlC,aAAgB,cAChBC,gBAAmB,qBACnBC,UAAa,sDACbC,WAAc,IAEKmlC,WAAoC,CACvD7C,YAAc,EACdniC,UAAa,8CAIrB,cAmKA,OAlKIilC,+BAAA,SAAmBpmC,EAA2BC,GAC1C,IAAMta,EAAiC,GA+JvC,OA3JA0B,GAAgB2Y,EAASqmC,kBAAmBpmC,EAASomC,kBAAmB,oBAAqB,aAAc1gD,GAC3G0B,GAAgB2Y,EAASsmC,YAAarmC,EAASqmC,YAAa,cAAe,aAAc3gD,GACzFW,GAAgB0Z,EAASqU,aAAcpU,EAASoU,aAAc,eAAgB,sBAAuB1uB,GAErG8B,GAAmBuY,EAASumC,kBAAmBtmC,EAASsmC,kBAAmB,oBAAqB,UAAW5gD,GAC3G8B,GAAmBuY,EAASwmC,mBAAoBvmC,EAASumC,mBAAoB,qBAAsB,SAAU7gD,GAC7G8B,GAAmBuY,EAASy3B,UAAWx3B,EAASw3B,UAAW,YAAa,UAAW9xC,GACnF8B,GAAmBuY,EAASymC,yBAA0BxmC,EAASwmC,yBAA0B,2BAA4B,UAAW9gD,GAChI0B,GAAgB2Y,EAAS0mC,mBAAoBzmC,EAASymC,mBAAoB,qBAAsB,aAAc/gD,GAC9G0B,GAAgB2Y,EAAS2mC,aAAc1mC,EAAS0mC,aAAc,eAAgB,aAAchhD,GAC5F8B,GAAmBuY,EAAS4mC,wCAAyC3mC,EAAS2mC,wCAAyC,0CAA2C,UAAWjhD,GAC7K8B,GAAmBuY,EAAS6mC,4BAA6B5mC,EAAS4mC,4BAA6B,8BAA+B,UAAWlhD,GAEzIa,GAAgBwZ,EAASy4B,WAAYx4B,EAASw4B,WAAY,aAAc,sBAAuB9yC,GAO/F8B,GAAmBuY,EAAS8mC,kBAAmB7mC,EAAS6mC,kBAAmB,oBAAqB,UAAWnhD,GAC3G8B,GAAmBuY,EAAS+mC,iCAAkC9mC,EAAS8mC,iCAAkC,mCAAoC,UAAWphD,GACxJ0B,GAAgB2Y,EAASgnC,kBAAmB/mC,EAAS+mC,kBAAmB,oBAAqB,8FAA+FrhD,GAE5L8B,GAAmBuY,EAASinC,cAAehnC,EAASgnC,cAAe,gBAAiB,SAAUthD,GAG9F8B,GAAmBuY,EAASknC,mCAAoCjnC,EAASinC,mCAAoC,qCAAsC,UAAWvhD,GAC9J8B,GAAmBuY,EAASmnC,mBAAoBlnC,EAASknC,mBAAoB,qBAAsB,UAAWxhD,GAC9G8B,GAAmBuY,EAASonC,iBAAkBnnC,EAASmnC,iBAAkB,mBAAoB,SAAUzhD,GACvG8B,GAAmBuY,EAASqnC,sBAAuBpnC,EAASonC,sBAAuB,wBAAyB,SAAU1hD,GACtH8B,GAAmBuY,EAASsnC,sBAAuBrnC,EAASqnC,sBAAuB,wBAAyB,UAAW3hD,GACvHgC,GAAiBqY,EAASmb,uBAAwBlb,EAASkb,uBAAwB,yBAA0B,2BAA4Bx1B,GACzI8B,GAAmBuY,EAASob,qBAAsBnb,EAASmb,qBAAsB,uBAAwB,SAAUz1B,GACnHgC,GAAiBqY,EAAS2Z,mBAAoB1Z,EAAS0Z,mBAAoB,qBAAsB,2BAA4Bh0B,GAC7H8B,GAAmBuY,EAASunC,yBAA0BtnC,EAASsnC,yBAA0B,2BAA4B,UAAW5hD,GAChIW,GAAgB0Z,EAASwnC,SAAUvnC,EAASunC,SAAU,WAAY,sBAAuB7hD,GACzF8B,GAAmBuY,EAASynC,WAAYxnC,EAASwnC,WAAY,aAAc,SAAU9hD,GACrF8B,GAAmBuY,EAAS2R,WAAY1R,EAAS0R,WAAY,aAAc,UAAWhsB,GACtF8B,GAAmBuY,EAAS0nC,OAAQznC,EAASynC,OAAQ,SAAU,SAAU/hD,GACzE8B,GAAmBuY,EAAS2nC,QAAS1nC,EAAS0nC,QAAS,UAAW,SAAUhiD,GAC5E8B,GAAmBuY,EAAS4nC,SAAU3nC,EAAS2nC,SAAU,WAAY,SAAUjiD,GAC/E8B,GAAmBuY,EAAS6nC,iBAAkB5nC,EAAS4nC,iBAAkB,mBAAoB,UAAWliD,GACxG8B,GAAmBuY,EAAS8nC,eAAgB7nC,EAAS6nC,eAAgB,iBAAkB,UAAWniD,GAElG0B,GAAgB2Y,EAAS+nC,wBAAyB9nC,EAAS8nC,wBAAyB,0BAA2B,gEAAiEpiD,GAChL0B,GAAgB2Y,EAASgoC,2BAA4B/nC,EAAS+nC,2BAA4B,6BAA8B,0FAA2FriD,GACnN0B,GAAgB2Y,EAASioC,8BAA+BhoC,EAASgoC,8BAA+B,gCAAiC,2HAA4HtiD,GAC7P0B,GAAgB2Y,EAASkoC,0BAA2BjoC,EAASioC,0BAA2B,4BAA6B,eAAgBviD,GACrI0B,GAAgB2Y,EAASmoC,iCAAkCloC,EAASkoC,iCAAkC,mCAAoC,sHAAuHxiD,GACjQQ,GAAiB6Z,EAASooC,QAASnoC,EAASmoC,QAAS,UAAW,uBAAwBziD,GACxF8B,GAAmBuY,EAAS8hB,YAAa7hB,EAAS6hB,YAAa,cAAe,SAAUn8B,GAExF8B,GAAmBuY,EAASqoC,kBAAmBpoC,EAASooC,kBAAmB,oBAAqB,UAAW1iD,GAC3G8B,GAAmBuY,EAASsoC,cAAeroC,EAASqoC,cAAe,gBAAiB,UAAW3iD,GAC/F8B,GAAmBuY,EAASuoC,kBAAmBtoC,EAASsoC,kBAAmB,oBAAqB,SAAU5iD,GAC1G8B,GAAmBuY,EAASwoC,eAAgBvoC,EAASuoC,eAAgB,iBAAkB,SAAU7iD,GAGjGsC,GAAoB+X,EAASyoC,sBAAuBxoC,EAASwoC,sBAAuB,wBAAyB,8CAA+C9iD,GAC5JsC,GAAoB+X,EAAS0oC,wCAAyCzoC,EAASyoC,wCAAyC,0CAA2C,8CAA+C/iD,GAClNsC,GAAoB+X,EAAS2oC,4BAA6B1oC,EAAS0oC,4BAA6B,8BAA+B,8CAA+ChjD,GAC9KsC,GAAoB+X,EAAS4oC,8BAA+B3oC,EAAS2oC,8BAA+B,gCAAiC,+CAAgDjjD,GACrLsC,GAAoB+X,EAAS6oC,2BAA4B5oC,EAAS4oC,2BAA4B,6BAA8B,8CAA+CljD,GAC3KsC,GAAoB+X,EAAS8oC,oCAAqC7oC,EAAS6oC,oCAAqC,sCAAuC,8CAA+CnjD,GACtMsC,GAAoB+X,EAAS+oC,8BAA+B9oC,EAAS8oC,8BAA+B,gCAAiC,+CAAgDpjD,GACrLsC,GAAoB+X,EAASgpC,gCAAiC/oC,EAAS+oC,gCAAiC,kCAAmC,2DAA4DrjD,GACvMsC,GAAoB+X,EAAS84B,wBAAyB74B,EAAS64B,wBAAyB,0BAA2B,8CAA+CnzC,GAClKsC,GAAoB+X,EAASipC,qCAAsChpC,EAASgpC,qCAAsC,uCAAwC,8CAA+CtjD,GACzMsC,GAAoB+X,EAASkpC,sBAAuBjpC,EAASipC,sBAAuB,wBAAyB,8CAA+CvjD,GAC5JsC,GAAoB+X,EAASmpC,kCAAmClpC,EAASkpC,kCAAmC,oCAAqC,8CAA+CxjD,GAChMsC,GAAoB+X,EAASopC,yCAA0CnpC,EAASmpC,yCAA0C,2CAA4C,8CAA+CzjD,GACrNsC,GAAoB+X,EAASqpC,6BAA8BppC,EAASopC,6BAA8B,+BAAgC,8CAA+C1jD,GACjLsC,GAAoB+X,EAASspC,+BAAgCrpC,EAASqpC,+BAAgC,iCAAkC,+CAAgD3jD,GACxLsC,GAAoB+X,EAASupC,4BAA6BtpC,EAASspC,4BAA6B,8BAA+B,8CAA+C5jD,GAC9KsC,GAAoB+X,EAASwpC,qCAAsCvpC,EAASupC,qCAAsC,uCAAwC,8CAA+C7jD,GACzMsC,GAAoB+X,EAASypC,iCAAkCxpC,EAASwpC,iCAAkC,mCAAoC,2DAA4D9jD,GAC1MsC,GAAoB+X,EAASpR,yBAA0BqR,EAASrR,yBAA0B,2BAA4B,8CAA+CjJ,GACrKsC,GAAoB+X,EAAS0pC,sCAAuCzpC,EAASypC,sCAAuC,wCAAyC,8CAA+C/jD,GAC5MsC,GAAoB+X,EAAS2pC,uBAAwB1pC,EAAS0pC,uBAAwB,yBAA0B,8CAA+ChkD,GAC/JsC,GAAoB+X,EAAS4pC,0BAA2B3pC,EAAS2pC,0BAA2B,4BAA6B,+CAAgDjkD,GACzKsC,GAAoB+X,EAAS6pC,uBAAwB5pC,EAAS4pC,uBAAwB,yBAA0B,8CAA+ClkD,GAC/J0B,GAAgB2Y,EAASI,UAAWH,EAASG,UAAW,YAAa,aAAcza,GACnFsC,GAAoB+X,EAASK,oBAAqBJ,EAASI,oBAAqB,sBAAuB,8CAA+C1a,GACtJsC,GAAoB+X,EAAS8pC,4BAA6B7pC,EAAS6pC,4BAA6B,8BAA+B,iDAAkDnkD,GACjLsC,GAAoB+X,EAAS+pC,qBAAsB9pC,EAAS8pC,qBAAsB,uBAAwB,qDAAsDpkD,GAChKsC,GAAoB+X,EAASgqC,yBAA0B/pC,EAAS+pC,yBAA0B,2BAA4B,8CAA+CrkD,GACrKsC,GAAoB+X,EAASiqC,4BAA6BhqC,EAASgqC,4BAA6B,8BAA+B,iDAAkDtkD,GACjLsC,GAAoB+X,EAASkqC,yBAA0BjqC,EAASiqC,yBAA0B,2BAA4B,qDAAsDvkD,GAC5KsC,GAAoB+X,EAASmqC,wBAAyBlqC,EAASkqC,wBAAyB,0BAA2B,qDAAsDxkD,GACzKsC,GAAoB+X,EAASoqC,2BAA4BnqC,EAASmqC,2BAA4B,6BAA8B,+CAAgDzkD,GAC5KsC,GAAoB+X,EAASqqC,6BAA8BpqC,EAASoqC,6BAA8B,+BAAgC,iDAAkD1kD,GACpLsC,GAAoB+X,EAASsqC,0BAA2BrqC,EAASqqC,0BAA2B,4BAA6B,8CAA+C3kD,GACxKsC,GAAoB+X,EAASuqC,6BAA8BtqC,EAASsqC,6BAA8B,+BAAgC,iDAAkD5kD,GACpLsC,GAAoB+X,EAASwqC,yBAA0BvqC,EAASuqC,yBAA0B,2BAA4B,qDAAsD7kD,GAC5KsC,GAAoB+X,EAASyqC,6BAA8BxqC,EAASwqC,6BAA8B,+BAAgC,iDAAkD9kD,GACpLsC,GAAoB+X,EAAS0qC,4BAA6BzqC,EAASyqC,4BAA6B,8BAA+B,oDAAqD/kD,GACpLsC,GAAoB+X,EAAS2qC,kCAAmC1qC,EAAS0qC,kCAAmC,oCAAqC,sDAAuDhlD,GACxM0B,GAAgB2Y,EAAS4qC,cAAe3qC,EAAS2qC,cAAe,gBAAiB,wGAAyGjlD,GAC1L0B,GAAgB2Y,EAAS6qC,cAAe5qC,EAAS4qC,cAAe,gBAAiB,wGAAyGllD,GAC1LsC,GAAoB+X,EAAS8qC,oBAAqB7qC,EAAS6qC,oBAAqB,sBAAuB,oDAAqDnlD,GAC5J0B,GAAgB2Y,EAAS+qC,cAAe9qC,EAAS8qC,cAAe,gBAAiB,kEAAmEplD,GACpJ0B,GAAgB2Y,EAASgrC,YAAa/qC,EAAS+qC,YAAa,cAAe,wGAAyGrlD,GACpLsC,GAAoB+X,EAASirC,wBAAyBhrC,EAASgrC,wBAAyB,0BAA2B,wDAAyDtlD,GAC5KsC,GAAoB+X,EAASkrC,uBAAwBjrC,EAASirC,uBAAwB,yBAA0B,uDAAwDvlD,GACxKsC,GAAoB+X,EAASmrC,kBAAmBlrC,EAASkrC,kBAAmB,oBAAqB,8CAA+CxlD,GAChJsC,GAAoB+X,EAASorC,4BAA6BnrC,EAASmrC,4BAA6B,8BAA+B,iDAAkDzlD,GACjLsC,GAAoB+X,EAASqrC,2BAA4BprC,EAASorC,2BAA4B,6BAA8B,oDAAqD1lD,GACjLsC,GAAoB+X,EAASsrC,iCAAkCrrC,EAASqrC,iCAAkC,mCAAoC,sDAAuD3lD,GACrM8B,GAAmBuY,EAASurC,iBAAkBtrC,EAASsrC,iBAAkB,mBAAoB,UAAW5lD,GACxG0B,GAAgB2Y,EAASwrC,qBAAsBvrC,EAASurC,qBAAsB,uBAAwB,+CAAgD7lD,GACtJ0B,GAAgB2Y,EAASyrC,qBAAsBxrC,EAASwrC,qBAAsB,uBAAwB,+CAAgD9lD,GACtJ0B,GAAgB2Y,EAAS0rC,mBAAoBzrC,EAASyrC,mBAAoB,qBAAsB,+CAAgD/lD,GAChJ8B,GAAmBuY,EAAS2rC,SAAU1rC,EAAS0rC,SAAU,WAAY,SAAUhmD,GAC/E8B,GAAmBuY,EAAS4rC,SAAU3rC,EAAS2rC,SAAU,WAAY,SAAUjmD,GAE/E8B,GAAmBuY,EAAS6rC,qBAAsB5rC,EAAS4rC,qBAAsB,uBAAwB,UAAWlmD,GAEpH8B,GAAmBuY,EAAS8rC,4BAA6B7rC,EAAS6rC,4BAA6B,8BAA+B,UAAWnmD,GACzI8B,GAAmBuY,EAAS+rC,0BAA2B9rC,EAAS8rC,0BAA2B,4BAA6B,UAAWpmD,GACnI8B,GAAmBuY,EAASgsC,cAAe/rC,EAAS+rC,cAAe,gBAAiB,UAAWrmD,GAC/F8B,GAAmBuY,EAASisC,0BAA2BhsC,EAASgsC,0BAA2B,4BAA6B,UAAWtmD,GACnI8B,GAAmBuY,EAASksC,qBAAsBjsC,EAASisC,qBAAsB,uBAAwB,UAAWvmD,GACpH8B,GAAmBuY,EAASmsC,oBAAqBlsC,EAASksC,oBAAqB,sBAAuB,UAAWxmD,GAEjH8B,GAAmBuY,EAASosC,eAAgBnsC,EAASmsC,eAAgB,iBAAkB,UAAWzmD,GAClG8B,GAAmBuY,EAASqsC,iBAAkBpsC,EAASosC,iBAAkB,mBAAoB,UAAW1mD,GACxG8B,GAAmBuY,EAASssC,oBAAqBrsC,EAASqsC,oBAAqB,sBAAuB,UAAW3mD,GACjH8B,GAAmBuY,EAASusC,eAAgBtsC,EAASssC,eAAgB,iBAAkB,UAAW5mD,GAClG8B,GAAmBuY,EAASwsC,gBAAiBvsC,EAASusC,gBAAiB,kBAAmB,UAAW7mD,GACrG8B,GAAmBuY,EAASysC,8BAA+BxsC,EAASwsC,8BAA+B,gCAAiC,UAAW9mD,GAC/I8B,GAAmBuY,EAAS0sC,yBAA0BzsC,EAASysC,yBAA0B,2BAA4B,UAAW/mD,GAChI8B,GAAmBuY,EAAS2sC,qBAAsB1sC,EAAS0sC,qBAAsB,uBAAwB,UAAWhnD,GACpHwC,GAAgB6X,EAAS4sC,iBAAkB3sC,EAAS2sC,iBAAkB,mBAAoB,kEAAmEjnD,GAC7JwC,GAAgB6X,EAAS6sC,aAAc5sC,EAAS4sC,aAAc,eAAgB,kDAAmDlnD,GACjIwC,GAAgB6X,EAAS8sC,kBAAmB7sC,EAAS6sC,kBAAmB,oBAAqB,4DAA6DnnD,GAC1JwC,GAAgB6X,EAAS+sC,UAAW9sC,EAAS8sC,UAAW,YAAa,4CAA6CpnD,GAClHwC,GAAgB6X,EAASgtC,gBAAiB/sC,EAAS+sC,gBAAiB,kBAAmB,sCAAuCrnD,GAC9HwC,GAAgB6X,EAASitC,YAAahtC,EAASgtC,YAAa,cAAe,gDAAiDtnD,GAC5HwC,GAAgB6X,EAASktC,SAAUjtC,EAASitC,SAAU,WAAY,0CAA2CvnD,GAC7GwC,GAAgB6X,EAASmtC,YAAaltC,EAASktC,YAAa,cAAe,gDAAiDxnD,GAC5HwC,GAAgB6X,EAASo0B,QAASn0B,EAASm0B,QAAS,UAAW,qEAAsEzuC,GACrIwC,GAAgB6X,EAASotC,sBAAuBntC,EAASmtC,sBAAuB,wBAAyB,oEAAqEznD,GAC9KwC,GAAgB6X,EAASqtC,iBAAkBptC,EAASotC,iBAAkB,mBAAoB,0DAA2D1nD,GACrJwC,GAAgB6X,EAASstC,kBAAmBrtC,EAASqtC,kBAAmB,oBAAqB,6DAA8D3nD,GAC3JwC,GAAgB6X,EAASutC,YAAattC,EAASstC,YAAa,cAAe,gDAAiD5nD,GAC5HwC,GAAgB6X,EAASwtC,WAAYvtC,EAASutC,WAAY,aAAc,kDAAmD7nD,GAC3HwC,GAAgB6X,EAASytC,iBAAkBxtC,EAASwtC,iBAAkB,mBAAoB,0DAA2D9nD,GACrJwC,GAAgB6X,EAAS0tC,oBAAqBztC,EAASytC,oBAAqB,sBAAuB,uCAAwC/nD,GAC3IwC,GAAgB6X,EAAS2tC,sBAAuB1tC,EAAS0tC,sBAAuB,wBAAyB,yCAA0ChoD,GACnJwC,GAAgB6X,EAAS4tC,mBAAoB3tC,EAAS2tC,mBAAoB,qBAAsB,6CAA8CjoD,GAC9IwC,GAAgB6X,EAAS45B,kCAAmC35B,EAAS25B,kCAAmC,oCAAqC,2GAA4Gj0C,GACzPwC,GAAgB6X,EAAS65B,kBAAmB55B,EAAS45B,kBAAmB,oBAAqB,0SAA2Sl0C,GACxYwC,GAAgB6X,EAAS6tC,UAAW5tC,EAAS4tC,UAAW,YAAa,+BAAgCloD,GACrGwC,GAAgB6X,EAAS8tC,mBAAoB7tC,EAAS6tC,mBAAoB,qBAAsB,2IAA4InoD,GAC7M,IAAxBA,EAAaqC,OAAe,KAAOrC,QAIrCooD,GAAqB,aAAcC,GAA0B,kBAAmBC,GAA2B,mBAAoBC,GAAuB,eAAgBC,GAAiC,yBAA0BC,GAAkC,0BAA2BC,GAA6B,qBAAsBC,GAAgC,wBAAyBC,GAAkC,0BAA2BC,GAA0B,kBAAmBC,GAA0B,kBAAmBC,GAA8B,sBAAuBC,GAA+B,uBAAwBC,GAA6B,qBAAsBC,GAAqB,aAAcC,GAAsB,cAAeC,GAA2B,mBAAoBC,GAAc,MAAOC,GAAiB,SAAUC,GAAmB,WAAYC,GAAiB,SAAUC,GAAmB,WAAYC,GAA8B,sBAAuBC,GAAsB,cAAeC,GAAoB,YAAaC,GAAsB,cAAehoD,GAAkB,UAAWioD,GAAoB,YAAaC,GAAsB,cAAeC,GAAkC,0BAA2BC,GAAmB,WAAYC,GAAwB,gBAAiBC,GAAsB,cAAeC,GAAgB,QAASC,GAAkC,0BAA2BC,GAA2B,mBAAoBC,GAAe,OAAQC,GAAsB,cAAej/C,GAAyB,iBAAkBk/C,GAAyB,iBAAkBC,GAAsB,cAAeC,GAAkB,UAAWC,GAA4B,oBAAqBC,GAAqC,6BAA8BC,GAAyB,iBAAkBC,GAAuB,eAAgBC,GAA6B,qBAAsBC,GAA4B,oBAAqBC,GAAyB,iBAAkBC,GAAoB,YAAaC,GAAuB,eAAgBC,GAA0B,kBAAmBC,GAAqB,aAAcC,GAAuB,eAAgBC,GAAwB,gBAAiBC,GAAoB,YAAaC,GAAe,OAAQC,GAAiB,SAAUC,GAA8B,sBAAuBC,GAAyB,iBAAkBC,GAA2B,mBAAoBC,GAAyB,iBAAkBC,GAA4B,oBAAqBC,GAA6B,qBAAsBC,GAAoB,YAAaC,GAAgB,QAASC,GAA2B,mBAAoBC,GAAyB,iBAAkBC,GAAwB,gBAAiBC,GAAoB,YAAaC,GAAgB,QAASC,GAAgB,QAASC,GAAe,OAAQC,GAAqB,aAAcC,GAAgB,QAASC,GAAmB,WAAY9lD,GAAe,OAAQ+lD,GAAuB,eAAgBC,GAAwB,gBAAiBC,GAAgB,QAASC,GAAoB,YAAaC,GAAwB,gBAAiBC,GAAoC,4BAA6BC,GAA4B,oBAAqBC,GAAgC,wBAAyBC,GAAe,OAAQC,GAAuB,eAAgBC,GAAiC,yBAA0BC,GAA0B,kBAAmBC,GAAgC,wBAAyBC,GAAsB,cAAeC,GAAuC,+BAAgCC,GAAwC,gCAAiCC,GAA0B,kBAAmBC,GAAgB,QAASC,GAAqB,aAAcC,GAAqB,aAAcC,GAA8B,sBAAuBC,GAAkB,UAAWC,GAAqB,aAAcC,GAA4B,oBAAqBC,GAAuB,eAAgBC,GAAsB,cAAeC,GAAyB,iBAAkBC,GAAqB,aAAcC,GAA4B,oBAAqBC,GAAuB,eAAgBC,GAAoB,YAAaC,GAA4B,oBAAqBC,GAA8B,sBAAuBC,GAAiB,SAAUC,GAAuB,eAAgBC,GAAoB,YAAaC,GAAuB,eAAgBC,GAAyB,iBAAkBC,GAAyB,iBAAkBC,GAA0B,kBAAmBC,GAAsB,cAAeC,GAA6B,qBAAsBC,GAAiB,SAAUC,GAAiB,SAAUC,GAAsB,cAAeC,GAAoB,YAAaC,GAAqB,aAAcC,GAAuB,eAAgBC,GAA2B,mBAAoBC,GAAsC,8BAA+BC,GAAiC,yBAA0BC,GAAoC,4BAA6BC,GAAsC,8BAA+BC,GAAuB,eAAgBC,GAAoB,YAAanuD,GAAkB,UAAWouD,GAAmB,WAAYC,GAAsB,cAAeC,GAAqB,aAAcC,GAAgB,QAASC,GAAoB,YAAaC,GAAsB,cAAeC,GAAwB,gBAAiBC,GAAe,OAAQC,GAA0B,kBAAmBC,GAA6C,qCAAsCC,GAAwC,gCAAiCC,GAA2C,mCAAoCC,GAA6B,qBAAsBC,GAAuB,eAAgBC,GAAiC,yBAA0BC,GAA0B,kBAAmBC,GAA2B,mBAAoBC,GAA0B,kBAAmBC,GAAsB,cAAeC,GAA8B,sBACrvMC,GAAqB,CACvBC,eAAgBC,GAA0BpmD,eAAgBomD,GAC1DC,cAAeC,EAA4BC,cAAeD,EAC1DE,KAAMC,EAAmB1E,KAAM0E,EAC/BtvD,MAAOuvD,EAAoBC,MAAOD,EAClCluD,OAAQouD,EAAqB3I,OAAQ2I,EACrCC,kBAAmBC,EAAgCzH,kBAAmByH,EACtEC,YAAaC,EAA0B7H,YAAa6H,EACpDC,MAAOC,EAAoBhG,MAAOgG,EAClCC,SAAUC,EAAuB9F,SAAU8F,EAC3Ch7C,KAAMi7C,EAAmB7rD,KAAM6rD,EAC/BC,YAAaC,EAA0BxrD,YAAawrD,EACpDC,gBAAiBC,EAA8BlF,gBAAiBkF,EAChEC,uBAAwBC,EAAoC1K,uBAAwB0K,EACpFC,aAAcC,EAA0B7H,aAAc6H,EACtDC,qBAAsBC,EAAmCtK,qBAAsBsK,EAC/EC,iBAAkBC,EAA+BpK,iBAAkBoK,EACnEC,gBAAiBC,EAA8BrI,gBAAiBqI,EAChEC,oBAAqBC,EAAkC7K,oBAAqB6K,EAC5EC,kBAAmBC,EAAgC7I,kBAAmB6I,EACtEC,0BAA2BC,EAAwC7G,0BAA2B6G,EAC9FC,oBAAqBC,EAAkChG,oBAAqBgG,EAC5EC,mBAAoBC,EAAiC7E,mBAAoB6E,EACzEC,mBAAoBC,EAAiCrD,mBAAoBqD,EACzEC,gBAAiBC,EAA8BnF,gBAAiBmF,EAChEjgC,YAAakgC,EAA0BtL,YAAasL,EACpDC,QAASC,EAAqB9yD,QAAS8yD,EACvCC,UAAWC,EAAuBzE,UAAWyE,EAC7CC,UAAWC,EAAuBjL,UAAWiL,EAC7CC,cAAeC,EAA4BtE,cAAesE,EAC1DC,aAAcC,EAA2B5M,aAAc4M,EACvDC,oBAAqBC,EAAkCvG,oBAAqBuG,EAC5EC,aAAcC,EAA2BpF,aAAcoF,EACvDC,WAAYC,EAAyBnK,WAAYmK,EACjDC,YAAaC,EAA0BjF,YAAaiF,EACpDC,gBAAiBC,EAA8BhF,gBAAiBgF,EAChEC,cAAeC,EAA4BvK,cAAeuK,EAC1DC,sBAAuBC,EAAoCtN,sBAAuBsN,EAClFC,0BAA2BC,EAAwClG,0BAA2BkG,EAC9FC,wBAAyBC,EAAsCzN,wBAAyByN,EACxFC,4BAA6BC,EAA0CrG,4BAA6BqG,EACpGC,wBAAyBC,EAAsCpM,wBAAyBoM,EACxFC,8BAA+BC,EAA4C5F,8BAA+B4F,EAC1GC,iCAAkCC,EAA+C7F,iCAAkC6F,EACnHC,mBAAoBC,EAAiCrO,mBAAoBqO,EACzEC,uBAAwBC,EAAqCjH,uBAAwBiH,EACrFC,uBAAwBC,EAAqChG,uBAAwBgG,EACrFC,gBAAiBC,GAA8B/F,gBAAiB+F,GAChEC,YAAaC,GAA0BhG,YAAagG,GACpDC,gBAAiBC,GAA8B3O,gBAAiB2O,GAChEC,wBAAyBC,GAAsClP,wBAAyBkP,GACxFC,4BAA6BC,GAA0C9H,4BAA6B8H,GACpGC,mCAAoCC,GAAiDjH,mCAAoCiH,GACzHC,UAAWC,GAAwB9M,UAAW8M,GAC9CC,aAAcC,GAA2B/M,aAAc+M,GACvDC,gBAAiBC,GAA8BxP,gBAAiBwP,GAChEC,eAAgBC,GAA6BnJ,eAAgBmJ,GAC7DC,QAASC,GAAsBx2D,QAASw2D,GACxCC,cAAeC,GAA4BzL,cAAeyL,GAC1DC,aAAcC,GAA2BvK,aAAcuK,GACvDC,iBAAkBC,GAA+BjJ,iBAAkBiJ,GACnEC,mBAAoBC,GAAiChQ,mBAAoBgQ,GACzEC,YAAaC,GAA0B7J,YAAa6J,GACpDC,gBAAiBC,GAA8B5L,gBAAiB4L,GAChEC,sBAAuBC,GAAoC7L,sBAAuB6L,GAClFC,6BAA8BC,GAA2C7L,6BAA8B6L,GACvGC,8BAA+BC,GAA4C9L,8BAA+B8L,GAC1GC,YAAaC,GAA0BlM,YAAakM,GACpDC,aAAcC,GAA2BxM,aAAcwM,GACvDC,eAAgBC,GAA4B/O,eAAgB+O,GAC5DC,iBAAkBC,GAA+B7P,iBAAkB6P,GACnEC,WAAYC,GAAyBpM,WAAYoM,GACjDC,UAAWC,GAAwB5K,UAAW4K,GAC9CC,iBAAkBC,GAA+B3O,iBAAkB2O,GACnEC,UAAWC,GAAuB/Q,UAAW+Q,GAC7CC,UAAWC,GAAuBjM,UAAWiM,GAC7CC,iBAAkBC,GAAoBzR,OAAQyR,GAC9CC,eAAgBC,GAA4B9L,eAAgB8L,GAC5DC,aAAcC,GAA0BjM,aAAciM,GACtDC,gBAAiBC,GAAmBlP,MAAOkP,GAC3CC,WAAYC,GAAwB3L,WAAY2L,GAChDC,gBAAiBC,GAA6BrK,gBAAiBqK,GAC/DC,kBAAmBC,GAAqBhR,QAASgR,GACjDC,KAAMC,GAAkBnQ,KAAMmQ,GAC9BC,mBAAoBC,GAAiCvK,oBAAqBuK,GAC1EC,SAAUC,GAAsBxS,SAAUwS,GAC1CC,YAAaC,GAAyBxS,YAAawS,GACnDC,UAAWC,GAAuB9P,UAAW8P,GAC7CC,cAAeC,GAA2BjQ,cAAeiQ,GACzDC,eAAgBC,GAAkB/P,KAAM+P,GACxCC,UAAWC,GAAuB1P,UAAW0P,GAC7CC,YAAaC,GAAyBtO,YAAasO,GACnDC,WAAYC,GAAwB7T,WAAY6T,GAChDC,UAAWC,GAAuBhO,UAAWgO,GAC7CC,eAAgBC,GAA4B9Q,eAAgB8Q,GAC5DC,OAAQC,GAAoB7N,OAAQ6N,GACpCC,iBAAkBC,GAA8BnR,iBAAkBmR,GAClEC,YAAaC,GAAyBjT,YAAaiT,GACnDC,YAAaC,GAAyB9T,YAAa8T,GACnDC,iBAAkBC,GAA8BxM,iBAAkBwM,GAClEC,cAAeC,GAA2B7T,cAAe6T,GACzDC,WAAYC,GAAwBjQ,WAAYiQ,GAChDC,aAAcC,GAA0BnP,aAAcmP,GACtDC,YAAaC,GAAyB3O,YAAa2O,GACnDC,aAAcC,GAA0B1O,aAAc0O,GACtDC,iBAAkBC,GAA8BnW,iBAAkBmW,GAClEC,SAAUC,GAAsBpV,SAAUoV,GAC1CC,kBAAmBC,GAA+B7S,kBAAmB6S,GACrEC,aAAcC,GAA0BjS,aAAciS,GACtDC,UAAWC,GAAwBxT,UAAWwT,GAC9CC,eAAgBC,GAA6BpT,eAAgBoT,GAC7DC,YAAaC,GAA0BtV,YAAasV,GACpDC,eAAgBC,GAA6B/Q,eAAgB+Q,GAC7DC,WAAYC,GAAyBhR,WAAYgR,GACjDC,kBAAmBC,GAAgCtR,kBAAmBsR,GACtEC,wBAAyBC,GAAsC7V,wBAAyB6V,GACxFC,uBAAwBC,GAAqCvS,uBAAwBuS,GACrFC,cAAeC,GAA4BlT,cAAekT,GAC1DC,kBAAmBC,GAAgC/S,kBAAmB+S,GACtElvC,kBAAmBmvC,GAAgCvR,kBAAmBuR,GACtEC,sBAAuBC,GAAoCjT,sBAAuBiT,GAClFC,aAAcC,GAA2BtP,aAAcsP,GACvDC,eAAgBC,GAA6BjW,eAAgBiW,GAC7DC,aAAcC,GAA2BjS,aAAciS,GACvDC,kBAAmBC,GAAgCpS,kBAAmBoS,GACtEC,oBAAqBC,GAAkCtX,oBAAqBsX,GAC5EC,2BAA4BC,GAAyCrW,2BAA4BqW,GACjGC,eAAgBC,GAA6BvV,eAAgBuV,GAC7DC,mBAAoBC,GAAiCrV,mBAAoBqV,IAEhEC,GAA4B,CACrC7P,eAAgB,iBAChBE,cAAe,gBACfG,KAAM,OACNrvD,MAAO,QACPqB,OAAQ,SACRquD,kBAAmB,oBACnBE,YAAa,cACbE,MAAO,QACPE,SAAU,WACV/6C,KAAM,OACNk7C,YAAa,cACbE,gBAAiB,kBACjBE,uBAAwB,yBACxBE,aAAc,eACdE,qBAAsB,uBACtBE,iBAAkB,mBAClBE,gBAAiB,kBACjBE,oBAAqB,sBACrBE,kBAAmB,oBACnBE,0BAA2B,4BAC3BE,oBAAqB,sBACrBE,mBAAoB,qBACpBE,mBAAoB,qBACpBE,gBAAiB,kBACjBhgC,YAAa,cACbmgC,QAAS,UACTE,UAAW,YACXE,UAAW,YACXE,cAAe,gBACfE,aAAc,eACdE,oBAAqB,sBACrBE,aAAc,eACdE,WAAY,aACZE,YAAa,cACbE,gBAAiB,kBACjBE,cAAe,gBACfE,sBAAuB,wBACvBE,0BAA2B,4BAC3BE,wBAAyB,0BACzBE,4BAA6B,8BAC7BE,wBAAyB,0BACzBE,8BAA+B,gCAC/BE,iCAAkC,mCAClCE,mBAAoB,qBACpBE,uBAAwB,yBACxBE,uBAAwB,yBACxBE,gBAAiB,kBACjBE,YAAa,cACbE,gBAAiB,kBACjBE,wBAAyB,0BACzBE,4BAA6B,8BAC7BE,mCAAoC,qCACpCE,UAAW,YACXE,aAAc,eACdE,gBAAiB,kBACjBE,eAAgB,iBAChBE,QAAS,UACTE,cAAe,gBACfE,aAAc,eACdE,iBAAkB,mBAClBE,mBAAoB,qBACpBE,YAAa,cACbE,gBAAiB,kBACjBE,sBAAuB,wBACvBE,6BAA8B,+BAC9BE,8BAA+B,gCAC/BE,YAAa,cACbE,aAAc,eACdE,eAAgB,iBAChBE,iBAAkB,mBAClBE,WAAY,aACZE,UAAW,YACXE,iBAAkB,mBAClBE,UAAW,YACXE,UAAW,YACXE,iBAAkB,SAClBE,eAAgB,iBAChBE,aAAc,eACdE,gBAAiB,QACjBE,WAAY,aACZE,gBAAiB,kBACjBE,kBAAmB,UACnBE,KAAM,OACNE,mBAAoB,sBACpBE,SAAU,WACVE,YAAa,cACbE,UAAW,YACXE,cAAe,gBACfE,eAAgB,OAChBE,UAAW,YACXE,YAAa,cACbE,WAAY,aACZE,UAAW,YACXE,eAAgB,iBAChBE,OAAQ,SACRE,iBAAkB,mBAClBE,YAAa,cACbE,YAAa,cACbE,iBAAkB,mBAClBE,cAAe,gBACfE,WAAY,aACZE,aAAc,eACdE,YAAa,cACbE,aAAc,eACdE,iBAAkB,mBAClBE,SAAU,WACVE,kBAAmB,oBACnBE,aAAc,eACdE,UAAW,YACXE,eAAgB,iBAChBE,YAAa,cACbE,eAAgB,iBAChBE,WAAY,aACZE,kBAAmB,oBACnBE,wBAAyB,0BACzBE,uBAAwB,yBACxBE,cAAe,gBACfE,kBAAmB,oBACnBjvC,kBAAmB,oBACnBovC,sBAAuB,wBACvBE,aAAc,eACdE,eAAgB,iBAChBE,aAAc,eACdE,kBAAmB,oBACnBE,oBAAqB,sBACrBE,2BAA4B,6BAC5BE,eAAgB,iBAChBE,mBAAoB,qBACpBG,WAAY,aACZC,gBAAiB,kBACjBC,IAAK,MACLC,SAAU,WACVC,YAAa,cACbC,MAAO,QACPC,KAAM,OACNC,eAAgB,iBAChBC,aAAc,eACdC,mBAAoB,qBACpBC,OAAQ,SACRC,oBAAqB,sBACrBC,UAAW,YACXC,MAAO,QACPC,MAAO,QACPC,WAAY,aACZC,MAAO,QACPC,kBAAmB,UACnBC,WAAY,aACZC,OAAQ,SACRC,OAAQ,SACRC,SAAU,WACVC,YAAa,cACbC,WAAY,aACZC,MAAO,QACPC,UAAW,YACXC,KAAM,iBAGMC,GAAoBC,GAChC,OAAQ3R,GAAmB2R,+vPAlSG,6BAAwC,mCAA8C,gCAA2C,sCAAiD,iDAA4D,6CAAwD,2CAAsD,gDAA2D,0CAAqD,kCAA6C,sCAAiD,2CAAsD,0CAAqD,gCAA2C,yBAAoC,+BAA0C,uBAAkC,aAAwB,kBAA6B,kBAA6B,kBAA6B,+BAA0C,kCAA6C,wBAAmC,wBAAmC,sBAAiC,oBAA+B,wBAAmC,sCAAiD,mCAA8C,yBAAoC,4BAAuC,oBAA+B,gCAA2C,2CAAsD,wBAAmC,mBAA8B,6BAAwC,gCAA2C,6BAAwC,sBAAiC,4BAAuC,+CAA0D,4CAAuD,8BAAyC,kCAA6C,uCAAkD,mCAA8C,2BAAsC,yBAAoC,+BAA0C,6BAAwC,0BAAqC,6BAAwC,0BAAqC,iBAA4B,cAAyB,6BAAwC,qCAAgD,kCAA6C,kCAA6C,mCAA8C,uCAAkD,+BAA0C,kBAA6B,yBAAoC,kCAA6C,+BAA0C,0BAAqC,kBAA6B,cAAyB,aAAwB,kBAA6B,mBAA8B,iBAA4B,gBAA2B,oBAA+B,6BAAwC,sBAAiC,kBAA6B,0BAAqC,0CAAqD,8CAAyD,0CAAqD,6BAAwC,oBAA+B,sCAAiD,yCAAoD,wCAAmD,oCAA+C,2CAAsD,6DAAwE,gDAA2D,wBAAmC,mBAA8B,wBAAmC,iCAA4C,8BAAyC,qBAAgC,+BAA0C,iCAA4C,2BAAsC,6BAAwC,4BAAuC,+BAA0C,iCAA4C,yBAAoC,8BAAyC,wCAAmD,6BAAwC,sBAAiC,yBAAoC,yBAAoC,8BAAyC,gCAA2C,iCAA4C,8BAAyC,iCAA4C,4BAAuC,gBAA2B,qBAAgC,wBAAmC,uBAAkC,0BAAqC,gCAA2C,+CAA0D,qDAAgE,mDAA8D,wDAAmE,2CAAsD,yBAAoC,oBAA+B,mBAA8B,uBAAkC,yBAAoC,mBAA8B,kBAA6B,wBAAmC,4BAAuC,qBAAgC,uBAAkC,qDAAgE,mEAA8E,iEAA4E,sDAAiE,kCAA6C,sCAAiD,yCAAoD,mCAA8C,mCAA8C,8BAAyC,kCAA6C;;;;;;;;;;;;;;gmBCr8X9uMC,GAAmBC,GAAoC,CAClEC,OAAQ,KACR3qD,OAAQ,gBAKM4qD,GAIdC,GAEA,OAAO,SAAwBC,GAC7B,OACEC,iBAACN,GAAiBO,eACf,SAAAC,GAAO,OAAAF,iBAACF,QAAcC,GAAcI,iBAAkBD,aC/BnDE,GDqCCC,GAAmB,WAAiC,OAAAC,GAAWZ,IAAkBE,QACjFW,GAAmB,WAA2D,OAAAD,GAAWZ,IAAkBzqD,uBA0CtH,WAAY8qD,GAAZ,MACES,YAAMT,gBAPAt6D,UAAsC,KACtCA,UAA+D,KAEhEA,+BAA4D,IAAI7G,GAChE6G,4BAAyD,IAAI7G,GAuCpE6G,cAAc,SAACuK,GAGTvK,EAAKs6D,MAAMU,cACbh7D,EAAKi7D,QAAUxrD,SAASyrD,eAAe,iBACvChmE,QAAQiC,MAAM,aAAc6I,EAAKi7D,UAE7B1wD,IAGFvK,EAAKi7D,QAAU1wD,IAiDrBvK,iBAAiB,WACXA,EAAKm7D,SACPn7D,EAAKm7D,QAAQC,UA/Ffp7D,EAAKuR,MAAQ,CACX8pD,WAAW,KAiGjB,OA7GqBC,QAgBnBC,8BAAA,WAAA,WACE/hE,KAAK2hE,QAAU,IAAIK,GACjBhiE,KAAKyhE,SACoB,IAAzBzhE,KAAK8gE,MAAMmB,UACXjiE,KAAK8gE,MAAMoB,eACuB,IAAlCliE,KAAK8gE,MAAMqB,oBAGbniE,KAAK2hE,QAAQS,eAAc,WACrB57D,EAAK67D,6BAA6BC,gBACpC97D,EAAK67D,6BAA6BE,gBAAgB/7D,EAAKm7D,SAEzDn7D,EAAKm7D,QAASa,OAAOC,SAAQ,SAAA3iE,GAC3BA,EAAM4iE,YAEJl8D,EAAKm8D,0BAA0BL,gBACjC97D,EAAKm8D,0BAA0BJ,gBAAgB/7D,EAAKm7D,YAIxD3hE,KAAK2hE,QAAQiB,wBAAwBt8D,KAAI,SAACu8D,GACxCnnE,QAAQ4D,IAAI,wCAAyCujE,MAGvDC,OAAOC,iBAAiB,SAAU/iE,KAAKgjE,gBAEvChjE,KAAKijE,SAAS,CAACpB,WAAW,KAmB5BE,iCAAA,WACEe,OAAOI,oBAAoB,SAAUljE,KAAKgjE,iBAG5CjB,mBAAA,WACE,IAA6B,IAAzB/hE,KAAK+X,MAAM8pD,gBAA6CpmE,IAArBuE,KAAK8gE,MAAMqC,QAA4C,IAArBnjE,KAAK8gE,MAAMqC,MAClF,MAAgC,kBAArBnjE,KAAK8gE,MAAMqC,MACb,KAEFnjE,KAAK8gE,MAAMqC,MAGpB,IAAIC,aAAEC,oBAAiBjuD,UAAOC,WAAQiuD,gBAAaC,aAE/CC,sYAAY,IAoBhB,OAlBwB,IAApBH,IACFG,EAAK,gBAAkB,aAGX/nE,IAAV2Z,QAAkC3Z,IAAX4Z,IACzBmuD,EAAKpuD,MAAQA,EACbouD,EAAKnuD,OAASA,GAGZkuD,IACFC,EAAK5rD,GAAK2rD,GAGRD,IACFE,EAAKC,MAAQH,GAIRvC,iBAACN,GAAiBiD,UAAS7mE,MAAO,CAAE8jE,OAAQ3gE,KAAK2hE,QAAU3rD,OAAQhW,KAAKyhE,UAC7EV,gCAAYyC,GAAMG,IAAK3jE,KAAK4jE,cACV,OAAjB5jE,KAAK2hE,SACJ3hE,KAAK8gE,MAAM+C,eAlGE9C,GAAMF,WEvEdiD,GAAwB,SAACC,EAAmBt+D,EAAwBjI,GAC/E,IAAIgnB,OAA2B/oB,IAAlBgK,EAAO+e,OAAuBu/C,EAAat+D,EAAO+e,QAAUu/C,EAEzE,OAAQt+D,EAAOhI,YACb,KAAK5C,GAAesE,UACpB,KAAKtE,GAAe2D,kBACpB,KAAK3D,GAAekE,iBACpB,KAAKlE,GAAewE,QAElBmlB,EAAO/e,EAAOvI,cAAgBuI,EAAO5I,MACrC,MACF,KAAKhC,GAAegD,QACd2mB,EAAO/e,EAAOvI,cACfsnB,EAAO/e,EAAOvI,cAA0B8W,SAASvO,EAAO5I,OAChD4I,EAAO5I,MAChB2nB,EAAO/e,EAAOvI,cAAgBuI,EAAO5I,MAAMmnE,QAE3Cx/C,EAAO/e,EAAOvI,cAAgBuI,EAAO5I,MAEvC,MACF,KAAKhC,GAAemD,OACpB,KAAKnD,GAAeqD,OAClB,GAAIsmB,EAAO/e,EAAOvI,cAChB,OAAQuI,EAAOhI,YACb,KAAK5C,GAAemD,OAGpB,KAAKnD,GAAeqD,OACjBsmB,EAAO/e,EAAOvI,cAAyB8W,SAASvO,EAAO5I,YAGnD4I,EAAO5I,MAChB2nB,EAAO/e,EAAOvI,cAAgBuI,EAAO5I,MAAMmnE,QAE3Cx/C,EAAO/e,EAAOvI,cAAgBuI,EAAO5I,MAEvC,MACF,KAAKhC,GAAeoE,QAGpB,KAAKpE,GAAe2E,aAClBglB,EAAO/e,EAAOvI,cAAgBuI,EAAO5I,MACrC,MACF,KAAKhC,GAAe8E,WAClB6kB,EAAO/e,EAAOvI,cAAcoJ,IAAIb,EAAO5I,OACvC,MACF,KAAKhC,GAAegF,OACyB,mBAAhC2kB,EAAO/e,EAAOvI,cACnBhC,MAAMC,QAAQsK,EAAO5I,OACvB2nB,EAAO/e,EAAOvI,oBAAdsnB,EAA+B/e,EAAO5I,OAC7BE,OAAO0I,EAAO5I,SAAW4I,EAAO5I,MAGzC2nB,EAAO/e,EAAOvI,cAAcuI,EAAO5I,QAGnCnB,QAAQiC,MAAM,8EACd6mB,EAAO/e,EAAOvI,oBAAdsnB,EAA+BznB,OAAOknE,OAAOx+D,EAAO5I,SAGtDnB,QAAQiC,MAAM,gCAAgC8H,EAAOvI,yBAAyBuI,EAAOjI,KAAMgnB,GAE7F,MACF,QACE9oB,QAAQiC,MAAM,qCAAqC8H,EAAOhI,kBAAiBgI,EAAOjI,QAY3E0mE,GAA8B,SAACC,EAAgCrD,GAC1E,GAAKqD,EAAShsD,cAAd,CAKA,IAAIisD,EAAgC,GACpCD,EAAShsD,cAAcksD,mBAAmB5B,SAAQ,SAACpqD,GAGjD,IAAIisD,EAA0CjsD,EAAYksD,mBACxD,GACAzD,GAEqB,OAAnBwD,GACFF,EAAYxoE,WAAZwoE,EAAoBE,MAIpBF,EAAY3kE,OAAS,GACvB2kE,EAAY3B,SAAQ,SAAAh9D,GAClBq+D,GAAsBK,EAASJ,aAAct+D,EAAQ0+D,EAASK,SAAU5rD,mFCpF5E,WAAmB9Y,EAAc6gE,EAAgBG,GAC/C9gE,KAAKiB,OAASnB,EACdE,KAAK2hE,QAAUhB,EAEXG,EAAM2D,YAA0C,mBAArB3D,EAAM2D,aACnCzkE,KAAK0kE,YAAc5D,EAAM2D,YAGvB3D,EAAM6D,cAA8C,mBAAvB7D,EAAM6D,eACrC3kE,KAAK4kE,cAAgB9D,EAAM6D,cAGzB7D,EAAM+D,SAAoC,mBAAlB/D,EAAM+D,UAChC7kE,KAAK8kE,SAAWhE,EAAM+D,SAGpB/D,EAAMiE,WAAwC,mBAApBjE,EAAMiE,YAClC/kE,KAAKglE,WAAalE,EAAMiE,WA6B9B,OAzBSE,uBAAP,SAAkBC,QACDzpE,IAAXypE,QAA6CzpE,IAArBuE,KAAK0kE,cAC/B1kE,KAAKmlE,iBAAmBnlE,KAAK0kE,YAAY1kE,KAAKiB,OAAQjB,KAAK2hE,QAASuD,KAIjED,yBAAP,SAAoBG,GACdplE,KAAK4kE,gBACP5kE,KAAKmlE,iBAAmBnlE,KAAK4kE,cAAc5kE,KAAKiB,OAAQjB,KAAK2hE,QAASyD,EAAOplE,KAAKmlE,oBAI/EF,oBAAP,SAAed,GACTnkE,KAAK8kE,WACP9kE,KAAKmlE,iBAAmBnlE,KAAK8kE,SAAS9kE,KAAKiB,OAAQjB,KAAK2hE,QAASwC,EAAUnkE,KAAKmlE,oBAI7EF,oBAAP,WACMjlE,KAAKglE,YACPhlE,KAAKglE,WAAWhlE,KAAKiB,OAAQjB,KAAK2hE,QAAS3hE,KAAKmlE,mBAI7CF,sBAAP,kBC1DWI,GAAyB,iEAAA,wDCQpC,WAAYvlE,EAAcghE,GACxB9gE,KAAKF,MAAQA,EACbE,KAAK8gE,MAAQA,EAwFjB,OArFEwE,uBAAA,SAAWJ,EAA8BE,KAEzCE,yBAAA,SAAaF,EAA6BF,KAE1CI,oBAAA,SAAQnB,GAGN,GAFAnkE,KAAKulE,YAAYpB,GAEbA,EAASqB,YAAYC,oBAAqB,CAG5C,IAAI1wD,EAAaovD,EAASe,OAAQnB,aAG5BjU,EAAW,IAAI5C,GAAiB,iCAAkCn4C,EAAK2wD,YAC7E5V,EAAShnC,iBAAkB,EAC3BgnC,EAASnjC,aAAe3uB,GAAO2nE,QAC/B7V,EAASthC,cAAgBxwB,GAAO2nE,aAEHlqE,IAA1B0oE,EAASJ,aACVroE,QAAQiC,MAAM,oBAEVqC,KAAK8gE,MAAMz0B,UACbyjB,EAASjjC,eAAiBs3C,EAASJ,aACnCjU,EAAS5iC,gBAAkBi3C,EAASJ,aACpCI,EAASJ,aAAa13B,UAAW,IAEjCyjB,EAAS5iC,gBAAkBi3C,EAASJ,aACpCjU,EAAShiC,eAAiBq2C,EAASJ,cAIvChvD,EAAK+6C,SAAWA,EAIhB,IAAI8V,GAAgE,IAA1C5lE,KAAK8gE,MAAc8E,mBAE7CzB,EAASJ,aAAc8B,aAAa9wD,EAAM6wD,KAI9CN,wBAAA,SAAYnB,GAAZ,WAUE,GAPAA,EAASN,SAASpB,SAAQ,SAAA2C,IACc,IAAlCA,EAAMZ,SAASpoC,iBACjB+nC,EAASJ,aAAcpnC,WAAWyoC,EAAMrB,cACxCqB,EAAMrtD,MAAQ,CAAE+tD,OAAO,YAIsBrqE,IAA7C0oE,EAASqB,YAAYO,qBAAqC7qE,MAAMC,QAAQgpE,EAASqB,YAAYO,qBAAsB,CAGrH,IAFA,IAAIC,EAAyB7B,EAASqB,YAAYO,oBAC9CE,EAAO9B,EACY,OAAhB8B,EAAKf,QACVe,EAAOA,EAAKf,OAEdllE,KAAKkmE,QACH/B,EACA8B,EACAD,GAIJ7B,EAASN,SAASpB,SAAQ,SAAA2C,GACxB5+D,EAAK++D,YAAYH,OAIrBE,oBAAA,SAAQa,EAAgCC,EAAsCJ,GAA9E,WACMI,EAAe5B,SAASpoC,gBAAkBgqC,EAAerC,eAA4E,IAA5DiC,EAAahqE,QAAQoqE,EAAerC,aAAajoE,OAE5HqqE,EAASpC,aAAamC,QAAQE,EAAerC,cAG/CqC,EAAevC,SAASpB,SAAQ,SAAA2C,GAC9B,OAAA5+D,EAAK0/D,QACHC,EACAf,EACAY,OAKNV,sBAAA,iCAMF,4DAA0G,OAApDxD,WAAAwD,kBClGpD,WAAYxlE,EAAwBghE,EAAY9qD,GAC9ChW,KAAK8gE,MAAQA,EACb9gE,KAAKgW,OAASA,EACdhW,KAAKF,MAAQA,EAsCjB,OAnCEumE,uBAAA,SAAWnB,EAA8BE,GACnCF,EAAOV,SAAS7rD,QAAUysD,EAAMZ,SAAS7rD,SAG3CysD,EAAMrB,aAAamB,OAASA,EAAOnB,eAIvCsC,yBAAA,SAAajB,EAA6BF,KAE1CmB,oBAAA,SAAQlC,GACN,QAA8B1oE,IAA1B0oE,EAASJ,aAAb,CAMA,IAAM5iE,EAASgjE,EAASJ,aAClBuC,GAAmD,IAAhCtmE,KAAK8gE,MAAMwF,iBAMpC,GAFAnlE,EAAOolE,cAAcvmE,KAAKgW,OAAQswD,GAE9BnC,EAASK,SAASgC,cAAgBxmE,KAAK8gE,MAAM2F,qBAC/C,GAAmB,OAAfzmE,KAAKF,MACPpE,QAAQiC,MAAM,+BAEOwD,EACRulE,aAAe1mE,KAAKF,MAAM6mE,cAAc3mE,KAAK8gE,MAAM2F,2BAjBlE/qE,QAAQiC,MAAM,qBAsBlB0oE,sBAAA,gCCzCA,WAAYvmE,EAAcghE,GACxB9gE,KAAKF,MAAQA,EACbE,KAAK8gE,MAAQA,EAwBjB,OArBE8F,uBAAA,SAAW1B,EAA8BE,KAEzCwB,yBAAA,SAAaxB,EAA6BF,KAE1C0B,oBAAA,SAAQzC,QACwB1oE,IAA1B0oE,EAASJ,cAMT/jE,KAAK8gE,MAAM+F,WACb1C,EAASJ,aAAartB,aAAa12C,KAAK8gE,MAAM+F,WAG5C7mE,KAAK8gE,MAAMgG,2BACbprE,QAAQiC,MAAM,uGAVdjC,QAAQiC,MAAM,qBAclBipE,sBAAA,gCC5BF,cAmEA,OAlEEG,uBAAA,SAAW7B,EAA8BE,KAEzC2B,yBAAA,SAAa3B,EAA6BF,KAE1C6B,oBAAA,SAAQ5C,GACN,QAAiB1oE,IAAb0oE,GAgBJ,IAX6C,IAAzCA,EAASqB,YAAYwB,iBACnB7C,EAASJ,wBAAwBvV,KAEnC2V,EAASJ,aAAa1jC,WAAW,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MACpF8jC,EAASJ,aAAa1jC,WAAW,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAC/E8jC,EAASJ,aAAa1jC,WAAW,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MACzF8jC,EAASJ,aAAa1jC,WAAW,CAAC,IAAU,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MACzF8jC,EAASJ,aAAa1jC,WAAW,CAAC,KAAM,CAAC,CAAEjrB,MAAO,aAIlD+uD,EAASpsD,QAAkC,IAAzBosD,EAASpsD,MAAM+tD,MAArC,CAOA,IAHA,IAAImB,EAA2C,KAE3CC,EAAM/C,EAASe,OACZgC,GAAK,CACV,GAAIA,EAAI1C,SAASpoC,gBACX8qC,EAAInvD,QAA6B,IAApBmvD,EAAInvD,MAAM+tD,MAAgB,CACzCmB,EAAcC,EACd,MAGJA,EAAMA,EAAIhC,OAGR+B,GACFjnE,KAAKulE,YAAY0B,SAjCjBvrE,QAAQiC,MAAM,qBAqClBopE,wBAAA,SAAY5C,GAAZ,WASE,GARAA,EAASN,SAASpB,SAAQ,SAAA2C,IACc,IAAlCA,EAAMZ,SAASpoC,iBAEjB+nC,EAASJ,aAAapnC,WAAWyoC,EAAMrB,cACvCqB,EAAMrtD,MAAQ,CAAE+tD,OAAO,YAIsBrqE,IAA7C0oE,EAASqB,YAAYO,qBAAqC7qE,MAAMC,QAAQgpE,EAASqB,YAAYO,qBAG/F,IADA,IAAIE,EAAO9B,EACY,OAAhB8B,EAAKf,QACVe,EAAOA,EAAKf,OAIhBf,EAASN,SAASpB,SAAQ,SAAA2C,GACxB5+D,EAAK++D,YAAYH,OAIrB2B,sBAAA,gCC/DA,WAAYjnE,GACVE,KAAKF,MAAQA,EAyEjB,OAtEEqnE,uBAAA,SAAWjC,EAA8BE,KAEzC+B,yBAAA,SAAa/B,EAA6BF,KAE1CiC,oBAAA,SAAQhD,GACN,IAAIA,EAASpsD,QAAkC,IAAzBosD,EAASpsD,MAAM+tD,MAArC,CAOA,IAHA,IAAImB,EAA2C,KAE3CC,EAAM/C,EAASe,OACZgC,GAAK,CACV,IAAoC,IAAhCA,EAAI1C,SAASp8B,gBACX8+B,EAAInvD,QAA6B,IAApBmvD,EAAInvD,MAAM+tD,MAAgB,CACzCmB,EAAcC,EACd,MAGJA,EAAMA,EAAIhC,OAGR+B,GACFjnE,KAAKulE,YAAY0B,EAAaA,KAIlCE,wBAAA,SAAYhD,EAAgCiD,GAA5C,WACQC,GAAoE,IAArClD,EAASK,SAASp8B,eAA0B+7B,EAAWiD,EAE5FjD,EAASN,SAASpB,SAAQ,SAAA2C,GACxB,IAA6C,IAAzCiC,EAAO7B,YAAY8B,kBACrBD,EAAOtD,aAAap6B,QAAUy7B,EAAMrB,aACpCqB,EAAMrtD,MAAQ,CAAE+tD,OAAO,EAAMn8B,SAAS,QACjC,IAAsC,IAAlCy7B,EAAMZ,SAASp8B,eAAyB,CAIjD,GAHAi/B,EAAOtD,aAAapnC,WAAWyoC,EAAMrB,cAGjCqB,EAAMI,YAAY+B,0BAA2B,CAC/C,IAAMC,EAAmChhE,EAAK1G,MAAO6mE,cAAcvB,EAAMI,YAAY+B,2BACpE,OAAbC,EACFpC,EAAMrB,aAAa0D,oBAAoBD,GAGvC9rE,QAAQiC,MACN,wCACAwmE,EAASqB,YAAY+B,0BACrB,uIAKNnC,EAAMrtD,MAAQ,CAAE+tD,OAAO,OAIvB3B,EAASN,SAASpkE,OAAS,GAC7B0kE,EAASN,SAASpB,SAAQ,SAAA2C,GACnBA,EAAMrtD,QAAiC,IAAxBqtD,EAAMrtD,MAAM4xB,UAC1By7B,EAAMrtD,QAA+B,IAAtBqtD,EAAMrtD,MAAM+tD,OAAkBV,EAAMI,YAAYkC,gBACjEtC,EAAMI,YAAYkC,eAAetC,GAGnC5+D,EAAK++D,YAAYH,EAAOiC,QAMhCF,sBAAA,gCC1EA,WAAYrnE,GACVE,KAAKF,MAAQA,EA4DjB,OAzDE6nE,uBAAA,SAAWzC,KACXyC,yBAAA,SAAavC,KACbuC,oBAAA,SAAQxD,QACW1oE,IAAb0oE,EAKJnkE,KAAKulE,YAAYpB,EAAUA,GAJzBzoE,QAAQiC,MAAM,qBAUlBgqE,wBAAA,SAAYxD,EAAgCiD,GAA5C,WAGEjD,EAASN,SAASpB,SAAQ,SAAC2C,GACzB,IAAsC,IAAlCA,EAAMZ,SAASp8B,eACjB,IAAuD,IAAnDg/B,EAAiB5B,YAAY8B,kBAC/BF,EAAiBrD,aAAap6B,QAAUy7B,EAAMrB,aAC9CqB,EAAMrtD,MAAQ,CAAE+tD,OAAO,EAAMn8B,SAAS,QAMtC,GAJAy9B,EAAiBrD,aAAapnC,WAAWyoC,EAAMrB,cAC/CqB,EAAMrtD,MAAQ,CAAE+tD,OAAO,GAGnBV,EAAMI,YAAY+B,0BAA2B,CAC/C,IAAMC,EAAmChhE,EAAK1G,MAAM6mE,cAAcvB,EAAMI,YAAY+B,2BACnE,OAAbC,EACFpC,EAAMrB,aAAa0D,oBAAoBD,GAEvC9rE,QAAQiC,MACN,mCACAwmE,EAASqB,YAAY+B,0BACrB,qGAWV,GAJInC,EAAMrtD,QAA+B,IAAtBqtD,EAAMrtD,MAAM+tD,OAAkBV,EAAMI,YAAYkC,gBACjEtC,EAAMI,YAAYkC,eAAetC,IAG9BA,EAAMrtD,QAAiC,IAAxBqtD,EAAMrtD,MAAM4xB,QAAkB,CAChD,IAAM09B,GAAiE,IAAlCjC,EAAMZ,SAASp8B,eAA0Bg9B,EAAQgC,EACtF5gE,EAAK++D,YAAYH,EAAOiC,OAK5B3rE,QAAQiC,MAAM,0CAGhBgqE,sBAAA,gCC9DF,cAwEA,OAvEEC,sBAAA,SAAUzD,EAAqCrkE,GAC7C,GAAIqkE,EAASqB,YAAYqC,qBAAsB,CAC7C,IAAK3sE,MAAMC,QAAQgpE,EAASqB,YAAYqC,sBAEtC,YADAnsE,QAAQiC,MAAM,sDAAuDwmE,EAASqB,YAAYqC,sBAI5F,QAA8BpsE,IAA1B0oE,EAASJ,aAEX,YADAroE,QAAQiC,MAAM,yBAIhB,IAAImqE,EAAgC3D,EAASqB,YAAYqC,qBAAqB5rE,MAAM,GAGpF6D,EAAMmiD,yBAAyB37C,KAAI,SAACyO,GAC9B+yD,EAAoB9rE,QAAQ+Y,EAAKjZ,OAAS,GAC5CisE,YAAW,WACThzD,EAAK+6C,SAAWqU,EAASJ,eACxB,MAIPjkE,EAAMkoE,OAAOvF,SAAQ,SAAC1tD,GAChB+yD,EAAoB9rE,QAAQ+Y,EAAKjZ,OAAS,IAC5CiZ,EAAK+6C,SAAWqU,EAASJ,mBAKjC6D,uBAAA,SAAW1C,KACX0C,yBAAA,SAAaxC,KACbwC,oBAAA,SAAQzD,GACN,QAAiB1oE,IAAb0oE,GAKJ,IAAKA,EAASqB,YAAYqC,qBAIxB,IAHA,IAAII,EAAW9D,EAASJ,aACpBmD,EAAmC/C,EAASe,oBAG9C,GAAIgC,EAAI1C,WAA8C,IAAlC0C,EAAI1C,SAASt9C,iBAA2B,CAC1D,GAAIi9C,EAASqB,YAAY0C,SAAU,CACjC,IAAMC,EAAsBhE,EAASqB,YAAY0C,SAASE,MAAM,KAC5DC,EAAenB,EAAInD,aACvBoE,EAAU1F,SAAQ,SAAC6F,EAAcvsE,QACJN,IAAvB4sE,EAAaC,KAEf5sE,QAAQC,KAAK,6BAA8B2sE,EAAM,KAAMD,GACvDA,EAAaC,GAAQ,IAGnBvsE,IAAUosE,EAAU1oE,OAAS,EAC/B4oE,EAAaC,GAAQL,EAErBI,EAAeA,EAAaC,WAIhCpB,EAAInD,aAAajU,SAAWmY,gBAIhCf,EAAMA,EAAIhC,QAvBG,OAARgC,iCARPxrE,QAAQiC,MAAM,qBAoClBiqE,sBAAA,mBVzEF,SAAYzG,GACVA,yBACAA,uBACAA,qBAHF,CAAYA,KAAAA,QAMZ,kBAAA,cAuEA,OA5DEpkE,sBAAWwrE,gCAAX,WACE,IAAKvoE,KAAKwoE,SACR,OAAO,KAIT,IAAIv4D,EAAyB,KACzBw4D,EAAyB,KAiB7B,OAfAzoE,KAAKwoE,SAASE,iBAAiBjG,SAAQ,SAAAkG,GAC/B,IAAAvF,kCAAEwF,iBAAcC,iBAEpB54D,EADU,OAARA,EACI24D,EAEA/qE,GAAQirE,SAAS74D,EAAK24D,GAI5BH,EADU,OAARA,EACII,EAEAhrE,GAAQkrE,SAASN,EAAKI,MAIpB,OAAR54D,GAAuB,MAAPw4D,EACX,IAAIO,GAAa/4D,EAAKw4D,GAGxB,sCAMFF,oBAAP,WACMvoE,KAAKgoE,SACPhoE,KAAKgoE,OAAOvF,SAAQ,SAAA1tD,GAClBA,EAAKk0D,SAAQ,GAA2B,MAE1CjpE,KAAKgoE,OAAS,IAGZhoE,KAAKkpE,kBACPlpE,KAAKkpE,gBAAgBzG,SAAQ,SAAA0G,GAE3BA,EAAGF,aAELjpE,KAAKkpE,gBAAkB,IAGrBlpE,KAAKopE,YACPppE,KAAKopE,UAAU3G,SAAQ,SAAA4G,GAAY,OAAAA,EAASJ,aAC5CjpE,KAAKopE,UAAY,IAGfppE,KAAKspE,kBACPtpE,KAAKspE,gBAAgB7G,SAAQ,SAAA8G,GAAkB,OAAAA,EAAeN,aAC9DjpE,KAAKspE,gBAAkB,yBWjD3B,oBACE/H,YAAM,CAAC,IAAIiI,WAEf,OAJgC1H,sBCnB9B,WAAY3pD,GACVnY,KAAKmY,cAAgBA,EAUzB,OAPEsxD,6BAAA,WACE,OAAOzpE,KAAKmY,eAGdsxD,4BAAA,SAAgBpxD,GACdrY,KAAKmY,cAAcvc,KAAKyc,wBDgB5B,cA0BA,OAzBEmxD,+BAAA,SAAmB/xD,EAAsBC,GACvC,IAAMS,EAAqC,CACzC,IAAI2E,GACJ,IAAI/C,GACJ,IAAIlB,GACJ,IAAIrB,IAGFkyD,EAAgC,GASpC,OARAvxD,EAAcsqD,SAAQ,SAAApqD,GAEpB,IAAIisD,EAA0CjsD,EAAYksD,mBAAmB9sD,EAAUC,GAChE,OAAnB4sD,GACFoF,EAAY9tE,WAAZ8tE,EAAoBpF,MAIG,IAAvBoF,EAAYjqE,OACP,MAITiqE,EAAYjH,SAAQ,SAAAkH,GAAkB,OAACA,EAAenlD,OAAS,cACxDklD,uBE9BT,WAAY5pE,EAAcghE,GACxB9gE,KAAK8gE,MAAQA,EACb9gE,KAAKF,MAAQA,EA0FjB,OAvFE8pE,uBAAA,SAAW1E,EAA8BE,KAEzCwE,yBAAA,SAAaxE,EAA6BF,KAE1C0E,oBAAA,SAAQzF,GAAR,WACM0F,EAAc,IAAItB,GAEtBsB,EAAYC,OAAS3I,GAAa4I,QAClC5F,EAASJ,aAAe8F,EAExB,IAAIG,EAAiEC,GAAYC,gBAC/EzuE,EACAuE,KAAK8gE,MAAMqJ,QACXnqE,KAAK8gE,MAAMsJ,cACXpqE,KAAKF,OACL,SAACkoE,EAAwBkB,EAAoCE,EAAuBE,GAClFO,EAAYrB,SAAW,IAAI7iB,GAAan/C,EAAKs6D,MAAMsJ,cAAgB,cAAe5jE,EAAK1G,OACvF+pE,EAAYrB,SAASlxD,0BAA2B,EAEhDuyD,EAAY7B,OAAS,GACrBA,EAAOvF,SAAQ,SAAA1tD,GACb80D,EAAY7B,OAAQpsE,KAAKmZ,GAGpBA,EAAKmwD,SACRnwD,EAAKmwD,OAAS2E,EAAYrB,WAEM,IAA9BhiE,EAAKs6D,MAAM7kD,iBACblH,EAAKkH,gBAAiB,MAG1B4tD,EAAYX,gBAAkBA,EAC9BW,EAAYT,UAAYA,EACxBS,EAAYP,gBAAkBA,EAE1B9iE,EAAKs6D,MAAMuJ,eACb7jE,EAAKs6D,MAAMuJ,cAAcR,GAG3BA,EAAYC,OAAS3I,GAAamJ,OAGlC,IAAMC,GAAyB,IAAIf,IAAoBjF,mBAAmB,CAAE4F,QAAS,GAAIC,cAAe,IAAM5jE,EAAKs6D,OAMnH,GAJgB,OAAZyJ,GACFA,EAAQ9H,SAAQ,SAAAh9D,GAAU,OAAAq+D,GAAsBK,EAASJ,aAAct+D,MAGrEe,EAAKs6D,MAAM0J,kBAAoBX,GAAeA,EAAYW,mBAAqBhkE,EAAKs6D,MAAM0J,iBAAkB,CAC9G,IAAMC,EAAeZ,EAAYY,aACjC,GAAIA,EAAc,CAChB,IAAMC,EAAmBhnE,KAAK+kE,IAC5B/kE,KAAKC,IAAI8mE,EAAahkC,QAAQxmC,EAAIwqE,EAAajkC,QAAQvmC,GACvDyD,KAAKC,IAAI8mE,EAAahkC,QAAQ1jC,EAAI0nE,EAAajkC,QAAQzjC,GACvDW,KAAKC,IAAI8mE,EAAahkC,QAAQvmC,EAAIuqE,EAAajkC,QAAQtmC,IAGnDyqE,EAAYnkE,EAAKs6D,MAAM0J,iBAAmBE,EAEhDb,EAAYrB,SAAS/3D,QAAQqD,aAAa62D,GAC1Cd,EAAYW,iBAAmBhkE,EAAKs6D,MAAM0J,sBAIhD,SAACI,GACKpkE,EAAKs6D,MAAM+J,gBACbrkE,EAAKs6D,MAAM+J,eAAeD,MAG9B,SAAC9qE,EAAcgrE,EAAiBC,GAC9BlB,EAAYC,OAAS3I,GAAa6J,MAClCnB,EAAYoB,aAAe,UAAUH,UAAcC,EAAYA,EAAUD,QAAU,gBAC/EtkE,EAAKs6D,MAAMoK,cACb1kE,EAAKs6D,MAAMoK,aAAarB,KAG5B7pE,KAAK8gE,MAAMqK,iBAIXtB,EAAYuB,WADVpB,EACuBA,EAAOluE,KAEP,mBAI7B8tE,sBAAA,gCC9GA,WAAsB9pE,EAAsBghE,GAAtB9gE,WAAAF,EAAsBE,WAAA8gE,EA2B9C,OAhBEuK,oBAAA,SAAQlH,QAEkB1oE,IADAuE,KAAKsrE,eAAenH,EAAUnkE,KAAKF,MAAOE,KAAK8gE,OAEnEplE,QAAQC,KAAK,2CAGTwoE,EAASoH,uBAAyBpH,EAAShsD,cAC3C+rD,GAA4BC,EAAUA,EAASoH,uBAEnD7vE,QAAQC,KAAK,iDAEbwoE,EAASoH,2BAAwB9vE,wBClBvC,WAAYqE,EAAcghE,GAA1B,MACES,YAAMzhE,EAAOghE,gBAGft6D,iBAAiB,SAAC29D,EAA4CrkE,EAAcghE,GAC1E,IAAKt6D,EAAKglE,QACR,OAAO,KAGT,IAAMzrE,EAAqC+gE,EAAM2K,SAOjD,OALAtH,EAASJ,aAAe,IAAI7Y,GAAgB1kD,EAAKglE,QAAS1K,EAAMtjE,KAAMuC,EAASyG,EAAK1G,OACpFqkE,EAASJ,aAAa2H,OAASllE,EAAKglE,QACnChlE,EAAKglE,QAAgBrb,gBAAkBgU,EAASJ,aAG1CI,EAASJ,gBAcpB,OAlC8DjC,QAuB5D6J,uBAAA,SAAWzG,EAA8BE,QAEA3pE,IAAjCypE,EAAOnB,aAAar+D,eAAqEjK,IAA3CypE,EAAOnB,aAAa6H,oBAClElwE,QAAQC,KAAK,qGAEjBqE,KAAKwrE,QAAUtG,EAAOnB,cAG1B4H,yBAAA,SAAavG,EAA6BF,KAE1CyG,sBAAA,gBAjC4DN,mBCC5D,WAAYvrE,EAAcghE,GAA1B,MACES,YAAMzhE,EAAOghE,gBAJPt6D,wBAA0D,KAC1DA,0BAA4D,KAMpEA,iBAAiB,SAAC29D,EAA4CrkE,EAAcghE,GAI1E,IAHA,IAAIoG,EAAmC/C,EAASe,OAC5C2G,EAAoC,KAEzB,OAAR3E,GAAc,CACnB,GAAIA,EAAI1C,SAASptC,cAAe,CAE9B+sC,EAASJ,aAAe8H,EAAS,IAAIpf,GAAgBqU,EAAMgL,QAAS5E,EAAInD,aAAcjD,EAAMiL,mBAC5F,MAEF7E,EAAMA,EAAIhC,OAGZ,QAA8BzpE,IAA1B0oE,EAASJ,aAEX,OADAroE,QAAQiC,MAAM,wCACP,KAGT,GAAIwmE,EAASqB,YAAYwG,cAAe,CACtC,IAAK9wE,MAAMC,QAAQgpE,EAASqB,YAAYwG,eAEtC,OADAtwE,QAAQiC,MAAM,gDAAiDwmE,EAASqB,YAAYwG,eAC7E,KAGT,IAAIC,EAA0B9H,EAASqB,YAAYwG,cAGnDxlE,EAAK0lE,sBAAwBpsE,EAAMmiD,yBAAyB37C,KAAI,SAACyO,GAC3Dk3D,EAAcjwE,QAAQ+Y,EAAKjZ,OAAS,GACtCqoE,EAASJ,aAAc5tB,gBAAgBphC,MAI3CvO,EAAKo7C,wBAA0B9hD,EAAM8hD,wBAAwBt7C,KAAI,SAACyO,GAC5Dk3D,EAAcjwE,QAAQ+Y,EAAKjZ,OAAS,GACtCqoE,EAASJ,aAAcoI,mBAAmBp3D,MAI9CjV,EAAMkoE,OAAOvF,SAAQ,SAAC1tD,GAChBk3D,EAAcjwE,QAAQ+Y,EAAKjZ,OAAS,GACtCqoE,EAASJ,aAAc5tB,gBAAgBphC,WAGtC,GAAIovD,EAASqB,YAAY4G,uBAC9B,GAAKlxE,MAAMC,QAAQgpE,EAASqB,YAAY4G,wBAEjC,CACL,IAAIC,EAAmClI,EAASqB,YAAY4G,uBAG5D5lE,EAAK0lE,sBAAwBpsE,EAAMmiD,yBAAyB37C,KAAI,SAACyO,IACZ,IAA/Cs3D,EAAuBrwE,QAAQ+Y,EAAKjZ,OACtCqoE,EAASJ,aAAc5tB,gBAAgBphC,MAI3CvO,EAAKo7C,wBAA0B9hD,EAAM8hD,wBAAwBt7C,KAAI,SAACyO,IACb,IAA/Cs3D,EAAuBrwE,QAAQ+Y,EAAKjZ,OACtCqoE,EAASJ,aAAcoI,mBAAmBp3D,MAI9CjV,EAAMkoE,OAAOvF,SAAQ,SAAC1tD,IAC+B,IAA/Cs3D,EAAuBrwE,QAAQ+Y,EAAKjZ,OACtCqoE,EAASJ,aAAc5tB,gBAAgBphC,WAnB3CrZ,QAAQiC,MAAM,0DAA2DwmE,EAASqB,YAAY4G,wBAyBlG,OAAOP,KAkBX,OAlG8D/J,QAmF5DwK,uBAAA,SAAWpH,EAA8BE,KAEzCkH,yBAAA,SAAalH,EAA6BF,KAE1CoH,sBAAA,WACqC,OAA/BtsE,KAAKksE,wBACPlsE,KAAKF,MAAMmiD,yBAAyBsqB,OAAOvsE,KAAKksE,uBAChDlsE,KAAKksE,sBAAwB,MAGM,OAAjClsE,KAAK4hD,0BACP5hD,KAAKF,MAAM8hD,wBAAwB2qB,OAAOvsE,KAAK4hD,yBAC/C5hD,KAAK4hD,wBAA0B,UA/FyBypB,ICKxDmB,GAAgC,SAAC1L,SACpC,OAAAC,wBAAKjlE,KAAMA,KAAO,UAAUA,KAAS,SAAUynC,eAAMu9B,EAAMv9B,oBAAQ,IAAKvqB,kBAAkB,EAAMkD,iBAAkB,GAChH6kD,qCAAkBjlE,KAAMA,KAAO,mBAAmBA,KAAS,kBAAmBgtB,iBAAiB,EAAOiE,iBAAiB,GACrHg0C,gCAAa0L,IAAK,gBAAgB3L,EAAMqJ,QAAWA,QAASrJ,EAAMqJ,QAASj+B,gBAAiB7sC,GAAQqtE,YAAaxE,SAAU,uCCLhI,WAAoBpoE,GAAAE,WAAAF,EAiBtB,OAfE6sE,+BAAA,SAAmBl1D,EAAeC,GAChC,IAAMk1D,EAAoC,GAY1C,OAXKn1D,EAASgvD,sBAAwBhvD,EAASgvD,uBAAyB/uD,EAAS+uD,sBAClC,iBAAlC/uD,EAAS+uD,sBAClBmG,EAAgBhxE,KAAK,CACnB4B,KAAM,oBACNX,MAAOmD,KAAKF,MAAM6mE,cAAcjvD,EAAS+uD,sBACzChpE,WAAY5C,GAAesE,UAC3BjC,aAAc,iBAKb0vE,iBCdKC,GAAehwE,EAAY2nB,EAAasoD,GACtD,IAAMC,EAAsBD,EAAa1E,MAAM,KAE/C2E,EAAUtK,SAAQ,SAAC6F,EAAcvsE,QACVN,IAAjB+oB,EAAO8jD,KAET5sE,QAAQC,KAAK,oBAAoB2sE,gBAAkByE,MAAcvoD,GACjEA,EAAO8jD,GAAQ,IAGbvsE,IAAUgxE,EAAUttE,OAAS,EAC/B+kB,EAAO8jD,GAAQzrE,EAEf2nB,EAASA,EAAO8jD,wBChBtB,cAuBA,OAtBE0E,uBAAA,SAAW9H,KACX8H,yBAAA,SAAa5H,KACb4H,oBAAA,SAAQ7I,GAMN,IALO,IAAA+D,yBACDtS,EAAUuO,EAASJ,aAErBmD,EAAmC/C,EAASe,OAEjC,OAARgC,GAAc,CACnB,GAAIA,EAAI1C,WAAwC,IAA5B0C,EAAI1C,SAASv6C,WAAqB,CAChDi+C,EACF2E,GAAejX,EAASsR,EAAInD,aAAcmE,GAG1ChB,EAAInD,aAAal3C,eAAiB+oC,EAEpC,MAEFsR,EAAMA,EAAIhC,SAGd8H,sBAAA,gCCpBA,WAAYlM,GACV9gE,KAAK8gE,MAAQA,EAcjB,OAXEmM,uBAAA,SAAW/H,EAA8BE,KAEzC6H,yBAAA,SAAa7H,EAA6BF,KAE1C+H,oBAAA,SAAQ9I,GACFnkE,KAAK8gE,MAAMoM,oBACX/I,EAASJ,aAAcmJ,sBAI7BD,sBAAA,gCCjBF,cAWA,OAVIE,uBAAA,SAAWjI,EAA8BE,GACjCF,EAAOV,SAAS7rD,QAAUysD,EAAMZ,SAAS7rD,SAGzCysD,EAAMrB,aAAamB,OAASA,EAAOnB,eAG3CoJ,yBAAA,SAAajI,EAA8BE,KAC3C+H,oBAAA,SAAQhJ,KACRgJ,sBAAA,gCCVJ,aACUntE,mBAA+C,KAC/CA,cAAoC,KAkB9C,OAhBEotE,uBAAA,SAAWlI,EAA8BE,SACnCF,EAAOV,SAAS7rD,mBAAUusD,EAAOnB,mCAAc9rD,cAA6DmtD,EAAMZ,SAASzpB,YAC7HmqB,EAAOnB,aAAa9rD,YAAYmtD,EAAMrB,cACtC/jE,KAAKqtE,cAAgBnI,EAAOnB,aAC5B/jE,KAAKstE,SAAWlI,EAAMrB,cAEtBroE,QAAQC,KAAK,wDAGjByxE,yBAAA,SAAalI,EAA8BE,KAC3CgI,oBAAA,SAAQjJ,KACRiJ,sBAAA,WACMptE,KAAKqtE,eACPrtE,KAAKqtE,cAAcE,eAAevtE,KAAKstE,8kBCf7C,cAGA,OAFyBE,gBAAwB,gBACxBA,cAAsB,mBCyE/C,SAASC,GAAYC,EAAsCtI,GACzD,GAAIA,EAAO,CACF,IAAArB,iBAEHqB,EAAMuI,mBACRvI,EAAMuI,kBAAkB5I,YAGtBK,EAAMZ,SAAS7rD,OAChBorD,EAAsBmB,OAAS,MACW,IAAlCE,EAAMZ,SAASp8B,gBACxB1sC,QAAQiC,MAAM,sCAGZ+vE,EAAelJ,WAAuD,IAA3CkJ,EAAelJ,SAASpoC,iBAA6D,IAAlCgpC,EAAMZ,SAASpoC,gBAE/FsxC,EAAe3J,aAAa6J,cAAcxI,EAAMrB,cAG/CqB,EAAMvB,UAiBb,SAAyBgK,EAAY3I,EAAYlB,gBAAAA,MAC/C,GAAI6J,EAAO,EACM7J,KAAY6J,GAASA,GAC7BpL,SAAQ,SAAC2C,GAAc,OAAAqI,GAAYvI,EAAQE,OAnBhD0I,CAAgB1I,EAAMvB,SAAUuB,GAGQ,mBAA/BA,EAAMrB,aAAakF,SAC5BlF,EAAakF,UAIfyE,EAAe7J,SAAW6J,EAAe7J,SAASnuD,QAAO,SAAAq4D,GAAM,OAAAA,IAAO3I,KACtEA,EAAMF,OAAS,MAcnB,IAAM8I,GAgBF,CAEFC,uBACE,OAAO,GAGTC,IAAK,WACH,OAAOC,KAAKD,OAKdE,wBACE,OAAO,GAGTC,0BACE,OAAO,GAITC,wBACE,OAAO,GAITC,kBAAmB,SAACpK,GAClB,OAAOA,GAGTqK,mBAAoB,SAACC,GAGnB,MAAO,CACLz4D,OAAQy4D,EAAsBz4D,OAC9B2qD,OAAQ8N,EAAsB9N,OAC9B7gE,MAAO2uE,EAAsB3uE,MAC7B4uE,aAAc,CACZ3K,kBAActoE,EACd+oE,SAAU,CACR5rD,UAAW,gBACXJ,UAAW,UAEb0sD,OAAQ,KACRrB,SAAU,GACV2B,YAAa,MAMnBmJ,oBAAqB,SAACC,EAAgCpxE,EAAcixE,GAClE,OAAOG,GAGTC,cAAA,SACE1K,EACA3mE,EACAia,EACAC,EACA+2D,EACAK,GAEA,IAAK3K,GAAaA,EAASK,WAA6C,IAAjCL,EAASK,SAASuK,WACvD,OAAO,KAET,IAAIC,EAAkC,GAatC,OAVA7K,EAAShsD,cAAeksD,mBAAmB5B,SAAQ,SAACpqD,GAClD,IAAIisD,EAA0CjsD,EAAYksD,mBACxD9sD,EACAC,GAEqB,OAAnB4sD,GACF0K,EAAcpzE,WAAdozE,EAAsB1K,MAIM,IAAzB0K,EAAcvvE,OAAe,KAAOuvE,GAM7CC,wBAAA,SAAwBnX,EAAsBsN,EAA6B8J,GAErE9J,GAEFtN,EAAU4W,aAAa7K,SAASjoE,KAAKwpE,GACrCA,EAAMF,OAASpN,EAAU4W,cAEzBhzE,QAAQiC,MAAM,qCAAsCynE,IAIxDkG,eAAgB,SACd9tE,EACAsjE,EACA2N,EACAK,EACAK,WAGMC,EAAwB,CtBhPI,kBsBmP1Bp5D,WAAQ2qD,WAAQ7gE,UAExB,IAAmC,IAA/BsvE,EAAYpzE,QAAQwB,GAkBtB,MAX6C,CAC3CumE,aAAc,KACdS,aAPA5rD,UAAWpb,EACXuxE,YAAY,GACTjO,EAAM0D,UAMTU,OAAQ,KACRrB,SAAU,GACV1rD,mBAAe1c,EACf+pE,YAAa,GACbmI,kBAAmB,IAAK0B,GAAqB7xE,EAAO,SAASsC,EAAO6gE,EAAQG,IAQhF,GAA2B,UAAvBtjE,EAAK8xE,cAcP,MAboD,CAClDvL,aAAc,IAAIwE,GAClB/D,SAAU,CACR5rD,UAAW,SAEbssD,OAAQ,KACRrB,SAAU,GACV1rD,cAAe,IAAIo3D,GACnB5B,kBAAmB,IAAI6B,GAAyC1vE,EAAyCghE,GACzG0E,YAAa,IAQjB,IAAMiK,EAAuBC,GAAoClyE,IAASA,EAEpEmyE,EAAmBC,GAAkB,QAAQH,GAEnD,QAAwBh0E,IAApBk0E,EACF,MAAM,IAAI3E,MAAM,yBAAyBxtE,MAAQiyE,qEAGnD,IAAII,EAA6BF,EAAgBG,WAC7CtL,EAAoCmL,EAAgBI,SAOpDC,EAJ4CH,EAAep3D,WAIhCw3D,KAAI,SAAAC,GACjC,GAAIh1E,MAAMC,QAAQ+0E,EAAmB1yE,MAAO,CAE1C,IAAI2yE,EAAe,GASnB,OARAD,EAAmB1yE,KAAKilE,SAAQ,SAAA2N,GAC9B,IAAIC,EAAevP,EAAMsP,EAAat0E,WACjBL,IAAjB40E,IAAwD,IAA1BD,EAAa13D,WAAsD,IAAhCw3D,EAAmBx3D,SACtFhd,QAAQC,KAAK,yCAA0Cy0E,EAAat0E,MAEpEq0E,EAAaC,EAAat0E,MAAQu0E,KAG/BF,EAEP,IAAItzE,EAAQikE,EAAMoP,EAAmBp0E,MAiBrC,YAhBcL,IAAVoB,IAGEqzE,EAAmB1yE,KAAK8yE,SAAS,uBAAsD,QAA5BJ,EAAmB1yE,MAA8C,UAA5B0yE,EAAmBp0E,KAGrHe,EAAQiD,GACiC,IAAhCowE,EAAmBx3D,UAC5Bhd,QAAQC,KAAK,0BAA0B6B,oBAAsB0yE,EAAmBp0E,SAAQo0E,EAAmB1yE,YAIjG/B,IAAVoB,IAAuD,IAAhCqzE,EAAmBx3D,UAC5Chd,QAAQC,KAAK,MAAM6B,gDAAkD0yE,EAAmBp0E,mBAAkBo0E,EAAmB1yE,UAGxHX,KAIP0zE,OAAiC90E,EAErC,GAAIo0E,EAAev3D,eAAiBk1D,GAAagD,cAE/CD,GAAgBnN,EAAAqN,GAA8BZ,EAAet3D,kBAAiBs3D,EAAe5oD,uBAAmB+oD,QAEhH,IAA+B,IAA3BxL,EAASjuB,cACX,GAAGs5B,EAAer3D,UAAUk4D,WAAW,eAAgB,CACnD,IAAMC,EAAaF,GAA8BjzE,GACjD,QAAc/B,IAAVk1E,EACF,MAAM,IAAI3F,MAAM,oBAAoBxtE,0BAEtC+yE,MAAoBI,aAAAA,cAASX,UAC1B,GAAIH,EAAer3D,UAAUk4D,WAAW,iBAAkB,CAE7DH,OAAoBK,EAACC,GADCnB,GAAoClyE,IAASA,6BACVwyE,UAEzDt0E,QAAQiC,MAAM,2DAA4DkyE,EAAer3D,WAMlE,mBAApBsoD,EAAMgQ,WACfhQ,EAAMgQ,UAAUP,GAGlB,IAAMQ,EAAqC,IAAKnB,GAAkB,QAAQH,GAEtE9B,OAAwDlyE,EAGxD+pE,EAA2B,CAC7B8B,mBAA+C,IAA5BxG,EAAMwG,kBACzB7B,qBAAmD,IAA9B3E,EAAM2E,oBAC3BiC,eAAgD,mBAAzB5G,EAAM4G,eAAgC5G,EAAM4G,oBAAiBjsE,EACpFsqE,oBAAqBjF,EAAMiF,oBAC3BiB,iBAA2C,IAA1BlG,EAAMkG,gBACvBO,0BAA2BzG,EAAMyG,0BACjCyE,cAAelL,EAAMkL,cACrBI,uBAAwBtL,EAAMsL,uBAC9BvE,qBAAsB/G,EAAM+G,qBAC5BK,SAAUpH,EAAMoH,WAIU,IAAxB1D,EAASv6C,WACX0jD,EAAoB,IAAIqD,IACa,IAA5BxM,EAASp8B,eAClBulC,EAAoB,IAAIsD,GAAgDnxE,IACnC,IAA5B0kE,EAASpoC,eAClBuxC,EAAoB,IAAIuD,IACQ,IAAvB1M,EAASl3B,UAClBqgC,EAAoB,IAAIwD,IACO,IAAtB3M,EAASplD,SAClBuuD,EAAoB,IAAIyD,GAA0CtxE,EAAOghE,EAAO9qD,GACvEwuD,EAAS7rD,OAClBg1D,EAAoB,IAAI0D,GACf7M,EAASzpB,aAClB4yB,EAAoB,IAAI2D,SAKoD71E,IAAzE81E,GAA0B9B,EAAsB,uBACnD9B,EAAoB,IAAK4D,GAA0B9B,EAAsB,qBAAqB3vE,EAAOghE,IAGvG,IAAI0Q,EAvWR,SACE54D,EACAmrD,EACA5rD,EACAqsD,EACAgB,EACAmI,GAEA,IAAI8D,EAAkBjN,EAOtB,OAJ4C,IAAvCrsD,EAAsBquD,eACzBiL,EAAgBjL,cAAe,GAG1B,CACLzC,eACAS,SAAUiN,EACVvM,OAAQ,KACRrB,SAAU,GACV1rD,gBACAw1D,oBACAnI,eAiVuBkM,CAAsBjC,EAAqBc,EAAeQ,EAAavM,EAAUgB,EAAamI,GAgBrH,OAdIA,GAAqBA,EAAkBmD,WACzCnD,EAAkBmD,UAAUU,EAAkB1xE,GAI5C0xE,EAAiBhN,WAAuD,IAA3CgN,EAAiBhN,SAASgC,cACzDuK,EAAYY,gBAAgB,IAAIC,GAAqC9xE,KAGxC,IAA3B0kE,EAASjuB,cACX2tB,GAA4BsN,EAAkB1Q,GAE9C0Q,EAAiBjG,sBAAwBzK,EAEpC0Q,GAGTK,0BAA2B,SAACr0E,EAAcsjE,GACxC,OAAO,GAGTgR,aAAA,SAAa3N,KAEb4N,eAAA,SAAe5N,EAAoCrD,KAEnDkR,mBAAoB,aAIpBC,yBAAA,SAAyBC,EAA2D1O,GAClF,OAAOV,OAAOqP,oBAAoBD,EAAU1O,IAG9C4O,uBAAA,SAAuBC,GACrB,OAAOvP,OAAOwP,mBAAmBD,IAGnCtK,WAAA,SAAWvrE,EAAmC+1E,GAC5C,OAAOzP,OAAOiF,WAAWvrE,IAG3Bg2E,aAAA,SAAaH,GACXvP,OAAO0P,aAAaH,IAItBI,WAAY,EAGZC,iBAAkB,SAACC,KAGnBC,iBAAkB,SAACD,KAEnBE,mBAAoB,SAAC3N,EAAkCE,GAEjDF,IACGE,GAIHF,EAAOrB,SAASjoE,KAAKwpE,GACrBA,EAAMF,OAASA,GAJfxpE,QAAQiC,MAAM,kBAAmBunE,IAQjCE,GAASA,EAAMuI,mBAAqBvI,EAAMuI,kBAAkBlJ,YAC9DW,EAAMuI,kBAAkBlJ,WAAWS,EAASE,GAG1CF,GAAUA,EAAOyI,mBAAqBzI,EAAOyI,kBAAkBhJ,cACjEO,EAAOyI,kBAAkBhJ,aAAaS,EAAOF,IAIjD4N,YAAa,SAAC5N,EAA8BE,GAC1CF,EAAOrB,SAASjoE,KAAKwpE,GACrBA,EAAMF,OAASA,GAGjB6N,mBAAoB,SAAC5O,EAAe3mE,EAAcsjE,GAEhD,OAAO,MAOTkS,wBAAyB,WACvB,OAAO,GAGTC,YAAa,SAAC9O,EAAoC3mE,EAAcka,EAAey3D,GACzEhL,GAAYA,EAASwJ,mBAAqBxJ,EAASwJ,kBAAkB9I,SACvEV,EAASwJ,kBAAkB9I,QAAQV,IAOvC+O,uBAAwB,SAACpb,EAAsBsN,GACzCA,IAEFtN,EAAU4W,aAAa7K,SAASjoE,KAAKwpE,GACrCA,EAAMF,OAASpN,EAAU4W,eAI7ByE,aAAA,SAAahP,EAAoC6K,EAA8BxxE,GACvD,OAAlBwxE,GACFA,EAAcvM,SAAQ,SAACh9D,GACrBq+D,GAAsBK,EAAUJ,aAAct+D,OAKpD2tE,yBAA0B,SAACtb,EAAsBsN,GAS3CA,GACFqI,GAAY3V,EAAU4W,aAActJ,IAGxCqI,eAGA4F,qBAAsB,SAAC71E,EAAcsjE,GACnC,OAAO,ICxfEwS,GAAe5S,GAAgC,CAC1DC,OAAQ,KACR3qD,OAAQ,KACRlW,MAAO,KACPyzE,YAAY,IAGDC,GAAkB,WAAM,OAAAnS,GAAWiS,IAAcxzE,gBAI9C2zE,GAEd5S,GAEA,OAAO,SAAwBC,GAC7B,OACEC,iBAACuS,GAAatS,eACX,SAAAC,GAAO,OAAAF,iBAACF,QAAcC,GAAc4S,aAAczS,SA2B3D,OAsLeL,IAtLqB,SAACE,EAAmB3qD,GAC/C,IAAAwqD,gBAEA5lE,gBACDqoE,SAACmQ,OAAYI,OACb/C,WAAC9wE,OAAO8zE,OACRC,WAACC,OAAWC,OAGZC,WAACC,OAAUC,OAEXC,EAAeC,GAAO,IAwK5B,OArKAC,IAAU,WAKN,IAAMv0E,EAAQ,IAAIw0E,GAAe3T,EAASG,EAAMyT,cAE5Cz0E,EAAM00E,UAERb,GAAc,GAEdj4E,QAAQiC,MAAM,4DAGhBi2E,EAAS9zE,GAET,IAEMg4D,EAAuB,CAC3B6I,OAAQG,EAAMI,iBAAiBP,OAC/B3qD,OAAQ8qD,EAAMI,iBAAiBlrD,OAC/BlW,MAAOA,EACP4uE,aAAc,CACZ3K,aAAc,KACdF,SAAU,GACVqB,OAAQ,KACRV,SAAU,CACR5rD,UAAW,QAEb4sD,YAAa,KAIXyO,EAAWQ,GAAgBzG,IACjCkG,EAAYD,GACZ,IAAMH,EAAYG,EAASS,gBAAgB5c,GAnB3B,GAmB+C,GAC/Dic,EAAaD,GAEbG,EAASU,mBAAmB,CAC1BC,WAAqC,eAAzBj4E,QAAQk4E,IAAIC,SAA4B,EAAI,EACxDC,QAAS,QACTC,oBAAqB,oBAGvB,IAAMC,EAAyDn1E,EAAMyiD,oBAAoBj8C,KACvF,SAAC4uE,GAKC,GAJwC,mBAA7BpU,EAAMqU,oBACfrU,EAAMqU,mBAAmBD,EAAKp1E,GAG5Bo1E,GAAOA,EAAIE,UAAYF,EAAIE,SAASC,KAAOH,EAAIE,SAASE,WAAY,CACtE,IAAIvgE,EAAOmgE,EAAIE,SAASE,WACU,mBAAvBxU,EAAMyU,cACfzU,EAAMyU,aAAaxgE,EAAMjV,MAM/B01E,GAAkBC,aAIhBC,EAAuD,KACrB,mBAA3B5U,EAAM6U,mBACfD,EAAsB51E,EAAMyiD,oBAAoBj8C,KAC9C,SAAC4uE,GACCpU,EAAM6U,iBAAkBT,EAAKp1E,KAE/B01E,GAAkBI,YAMtB,IAAIC,EAAyD,KAqC7D,MApCwC,mBAA7B/U,EAAMgV,qBACfD,EAAwB/1E,EAAMyiD,oBAAoBj8C,KAChD,SAAC4uE,GACCpU,EAAMgV,mBAAoBZ,EAAKp1E,KAEjC01E,GAAkBO,cAIY,mBAAvBjV,EAAMkV,cACflV,EAAMkV,aAAa,CACjBl2E,MAAOA,EACPkW,OAAQlW,EAAMm2E,YAAYC,uBAO1Bh7E,MAAMC,QAAQ2lE,EAAMqV,gBACtBr2E,EAAMq2E,cAAcrV,EAAMqV,cAAc,GAAIrV,EAAMqV,cAAc,IAIlElC,EAASmC,gBACPrV,iBAACuS,GAAa5P,UAAS7mE,MAAO,CAC5B8jE,OAAQG,EAAMI,iBAAiBP,OAC/B3qD,OAAQ8qD,EAAMI,iBAAiBlrD,OAC/BlW,QACAyzE,eAECzS,EAAM+C,UACiBiQ,OAAWr4E,GAAW,eAI3C,WACDw5E,GACFn1E,EAAMyiD,oBAAoBgqB,OAAO0I,GAG/BS,GACF51E,EAAMyiD,oBAAoBgqB,OAAOmJ,GAG/BG,GACF/1E,EAAMyiD,oBAAoBgqB,OAAOsJ,GAGnC/1E,EAAMmpE,aAGV,IAKFoL,IAAU,WACR,GAAe,OAAX1T,GAA6B,OAAV7gE,GAA+B,OAAbm0E,EAAzC,CAIA,IAAMoC,EAAYlC,EAAamC,QACzB/L,EAAyBxvE,EAAawpE,mBAAmB8R,EAAWvV,GAE1D,OAAZyJ,GACFA,EAAQ9H,SAAQ,SAAAkH,GACd7F,GAAsBhkE,EAAO6pE,MAIjCsK,EAASmC,gBACPrV,iBAACuS,GAAa5P,UAAS7mE,MAAO,CAC5B8jE,OAAQG,EAAMI,iBAAiBP,OAC/B3qD,OAAQ8qD,EAAMI,iBAAiBlrD,OAC/BlW,QACAyzE,eAECzS,EAAM+C,UAETiQ,OACAr4E,GACA,eAIF04E,EAAamC,QAAUxV,MAGlB,iBCpPOyV,GAAgBrE,EAA2BsE,EAAeC,EAAuBC,GACvF,IAAAtT,SAACtjE,UAAOyzE,eAEdc,IAAU,WACN,IAAmB,IAAfd,GAAiC,OAAVzzE,EAA3B,CAIA,IAAM62E,GAA8C,IAAbD,EACjCE,EAA2C92E,EAAMuG,yBAAyBC,IAAI4rE,EAAUsE,EAAMC,OAAah7E,EAAWk7E,GAE5H,OAA8B,IAA1BA,EACO,WACH72E,EAAMuG,yBAAyBkmE,OAAOqK,SAF9C,eAQQC,GAAe3E,EAA2BsE,EAAeC,EAAuBC,GACtF,IAAAtT,SAACtjE,UAAOyzE,eAEdc,IAAU,WACN,IAAmB,IAAfd,GAAiC,OAAVzzE,EAA3B,CAIA,IAAM62E,GAA8C,IAAbD,EACjCE,EAA2C92E,EAAMywC,wBAAwBjqC,IAAI4rE,EAAUsE,EAAMC,OAAah7E,EAAWk7E,GAE3H,OAA8B,IAA1BA,EACO,WACH72E,EAAMywC,wBAAwBg8B,OAAOqK,SAF7C,UAQKE,GAAwB,SAAC/7E,GAClC,IAAMg8E,EAAW3C,IAAgB,IAER,IAArB2C,EAAST,UACXx7E,GAAmBk8E,qBAAqBj8E,GACxCg8E,EAAST,SAAU,GAGrBjC,IAAU,WACR,OAAO,WAELv5E,GAAmBm8E,uBAAuBl8E,MAE3C,KAqBMm8E,GAAW,SAACC,EAAkBC,GACnC,IAAAhU,SAACvmE,OAAOw6E,OAER1T,EAAMyQ,GAA8B,MAsE1C,OApEAC,IAAU,WACR,GAAI1Q,EAAI2S,QAAS,CACf,IAAMgB,EAA6C,GAC/CC,EAAkD,KAGtD,IAAoC,IAAhC5T,EAAI2S,QAAQ9R,SAASr9C,OAAiB,CACxC,IAAMpS,EAAO4uD,EAAI2S,QAAQvS,aAEpBhvD,EAAKyiE,gBACRziE,EAAKyiE,cAAgB,IAAIC,GAAc1iE,EAAK2wD,aAG9C,IAAMgS,EAAyC3iE,EAAKyiE,cAAcG,eAChE,IAAIC,GACFH,GAAcI,sBAAsB,SAACC,GACnCX,GAASA,EAAuBW,GAChCT,GAAS,OAKTU,EAAwChjE,EAAKyiE,cAAcG,eAC/D,IAAIC,GACFH,GAAcO,qBAAqB,SAACF,GAClCV,GAAQA,EAAsBU,GAC9BT,GAAS,OAKfC,EAAsB17E,KAAK87E,GAC3BJ,EAAsB17E,KAAKm8E,QACtB,IAA4C,IAAxCpU,EAAI2S,QAAQ9R,SAASpoC,eAAyB,CACvD,IAAM01B,EAAU6R,EAAI2S,QAAQvS,aAC5BwT,EAAqBzlB,EAAQt3B,yBAAyBl0B,IAAI6wE,GACvCrlB,EAAQp3B,uBAAuBp0B,IAAI8wE,QAEtD17E,QAAQC,KAAK,4DAA6DgoE,EAAI2S,QAAQ9R,UAGxF,GAAI8S,EAAsB73E,OAAS,GAA4B,OAAvB83E,EACtC,OAAO,WACL,GAAI5T,EAAI2S,UACFgB,EAAsB73E,OAAS,IACjC63E,EAAsB7U,SAAQ,SAACwV,SACd,OAAXA,cACWtU,EAAI2S,QAAQvS,aACpByT,8BAAeU,iBAAiBD,OAGzCX,EAAsBa,OAAO,EAAGb,EAAsB73E,SAG7B,OAAvB83E,GAA6B,CAC/B,IAAMzlB,EAAU6R,EAAI2S,QAAQvS,aAC5BjS,EAAQt3B,yBAAyB+xC,OAAOgL,GACxCzlB,EAAQp3B,uBAAuB6xC,OAAOgL,GACtCA,EAAqB,KACF,UAM5B,CAAC5T,EAAI2S,UAGD,CAAC3S,EAAK9mE,aASCu7E,GAASC,GACvB,IAAM1U,EAAMyQ,GAA8B,MAyB1C,OAvBAC,IAAU,WACR,GAAI1Q,EAAI2S,QACN,IAAoC,IAAhC3S,EAAI2S,QAAQ9R,SAASr9C,OAAiB,CACxC,IAAMpS,EAAO4uD,EAAI2S,QAAQvS,aAEpBhvD,EAAKyiE,gBACRziE,EAAKyiE,cAAgB,IAAIC,GAAc1iE,EAAK2wD,aAG9C3wD,EAAKyiE,cAAcG,eACjB,IAAIC,GACFH,GAAca,eAAe,SAAUR,GACrCO,EAAQP,YAKdp8E,QAAQC,KAAK,mDAGhB,CAACgoE,IAGG,CAACA,GClMV,SAAS4U,GAAgBC,GAEvB,OADsBA,EAAKC,QAAQ,UAAW,IAAIrQ,MAAM,KAC7C6H,KAAI,SAAAyI,GAAO,OAAAC,SAASD,EAAK,IAAM,OAG5C,IAAME,GAAM,qCAEZ,aAKS54E,oBAAyBnF,GAAemD,OAgBjD,OApBEjB,sBAAI87E,wBAAJ,WACE,OAAUD,oDAKZC,mBAAA,SAAO18E,GACL,MAA4B,oBAG9B08E,oBAAA,SAAQ38E,EAAiBC,GACvB,OAAID,IAAYC,EACP,CACLS,WAAW,EACXC,MAAOmB,GAAO86E,UAAUP,GAAgBp8E,KAIrC,CAACS,WAAW,EAAOC,MAAO,0BAIrC,aAKSmD,oBAAyBnF,GAAemD,OA2BjD,OA/BEjB,sBAAIg8E,wBAAJ,WACE,OAAUH,mDAKZG,mBAAA,SAAO58E,GACL,OAAOjB,MAAMC,QAAQgB,IAGvB48E,oBAAA,SAAQ78E,EAAmBC,GACzB,QAAgBV,IAAZS,GAAyBA,EAAQuD,SAAWtD,EAAQsD,OAEtD,MAAO,CACL7C,WAAW,EACXC,MAAOmB,GAAO86E,UAAU38E,IAI5B,IAAK,IAAIoH,EAAI,EAAGA,EAAIrH,EAAQuD,OAAQ8D,IAClC,GAAIrH,EAAQqH,KAAOpH,EAAQoH,GAEzB,MAAO,CACL3G,WAAW,EACXC,MAAOmB,GAAO86E,UAAU38E,IAK9B,MAAO,CAACS,WAAW,EAAOC,MAAO,0BAIrC,aAMSmD,oBAAyBnF,GAAeqD,OAiBjD,OArBEnB,sBAAIi8E,wBAAJ,WACE,OAAUJ,oDAKZI,mBAAA,SAAO78E,GACL,MAA4B,oBAG9B68E,oBAAA,SAAQ98E,EAAiBC,GACvB,OAAID,IAAYC,EAEP,CACLS,WAAW,EACXC,MAAOqB,GAAO46E,UAAUP,GAAgBp8E,KAIrC,CAACS,WAAW,EAAOC,MAAO,0BAKrC,aAKSmD,oBAAyBnF,GAAegD,QA0BjD,OA9BEd,sBAAIk8E,wBAAJ,WACE,OAAUL,oDAKZK,mBAAA,SAAO98E,GACL,OAAOjB,MAAMC,QAAQgB,IAGvB88E,oBAAA,SAAQ/8E,EAAmBC,GACzB,QAAgBV,IAAZS,GAAyBA,EAAQuD,SAAWtD,EAAQsD,OAEtD,MAAO,CACL7C,WAAW,EACXC,MAAOgB,GAAQi7E,UAAU38E,IAI7B,IAAK,IAAIoH,EAAI,EAAGA,EAAIrH,EAAQuD,OAAQ8D,IAClC,GAAIrH,EAAQqH,KAAOpH,EAAQoH,GACzB,MAAO,CACL3G,WAAW,EACXC,MAAOgB,GAAQi7E,UAAU38E,IAK/B,MAAO,CAACS,WAAW,EAAOC,MAAO,YCvGxBq8E,GAA+CC,GAC1DC,MAXer8E,OAAOs8E,KAAK1a,MAa3B,GCrBF2a,GAAQC,OAAO,CACbC,eAAgB,gBAEhBC,oBAAqB,SAACtqB,EAAM2R,GAK1BoD,GAA4B/U,EAAM2R,IAEpC4Y"}